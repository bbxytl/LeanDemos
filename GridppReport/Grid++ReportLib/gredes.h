/****************************************************************************
**
** Namespace grdesLib generated by dumpcpp from type library
** grdes50.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_GREDES_H
#define QAX_DUMPCPP_GREDES_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef GRDESLIB_EXPORT
#define GRDESLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace grdesLib {

    enum tagGRDesignerAction {
        grdaEditUndo            = 101,
        grdaEditRedo            = 102,
        grdaEditCut             = 103,
        grdaEditPaste           = 104,
        grdaEditCopy            = 105,
        grdaEditDelete          = 106,
        grdaEditSelectAll       = 107,
        grdaAutoSizeControl     = 201,
        grdaAutoGenColumn       = 202,
        grdaAutoGenField        = 203,
        grdaSectionMoveUp       = 204,
        grdaSectionMoveDown     = 205,
        grdaAutoGenParameter    = 206,
        grdaReportPaperSetting  = 301,
        grdaSetupDBQuery        = 302,
        grdaReportParameterCollection= 303,
        grdaReportGroupCollection= 304,
        grdaReportColumnCollection= 305,
        grdaReportFieldCollection= 306,
        grdaReportColumnTitleLayout= 307,
        grdaBrowseScriptCode    = 308,
        grdaExitSubReportDesign = 309,
        grdaSetupParamDBQuery   = 310,
        grdaInsertReportHeader  = 401,
        grdaInsertReportFooter  = 402,
        grdaInsertPageHeader    = 403,
        grdaInsertPageFooter    = 404,
        grdaInsertDetailGrid    = 405,
        grdaInsertGroup         = 406,
        grdaInsertField         = 407,
        grdaInsertColumn        = 408,
        grdaInsertParameter     = 409,
        grdaFormatAlignLeft     = 501,
        grdaFormatAlignRight    = 502,
        grdaFormatAlignCenter   = 503,
        grdaFormatAlignTop      = 504,
        grdaFormatAlignMiddle   = 505,
        grdaFormatAlignBottom   = 506,
        grdaFormatAlignToGrid   = 507,
        grdaFormatSizeSameWidth = 508,
        grdaFormatSizeSameHeight= 509,
        grdaFormatSizeSameBoth  = 510,
        grdaFormatSizeToGrid    = 511,
        grdaFormatSpaceEquallyVertical= 512,
        grdaFormatSpaceIncreaseVertical= 513,
        grdaFormatSpaceDecreaseVertical= 514,
        grdaFormatSpaceEquallyHorizontal= 515,
        grdaFormatSpaceIncreaseHorizontal= 516,
        grdaFormatSpaceDecreaseHorizontal= 517,
        grdaFormatSpaceRemoveHorizontal= 518,
        grdaFormatSpaceRemoveVertical= 519,
        grdaFormatOrderBringToFront= 520,
        grdaFormatOrderSendToBack= 521,
        grdaFormatFontStrikethrough= 600,
        grdaFormatFontBold      = 601,
        grdaFormatFontItalic    = 602,
        grdaFormatFontUnderline = 603,
        grdaFormatTextAlignTopLeft= 604,
        grdaFormatTextAlignTopCenter= 605,
        grdaFormatTextAlignTopRight= 606,
        grdaFormatTextAlignMiddleLeft= 607,
        grdaFormatTextAlignMiddleCenter= 608,
        grdaFormatTextAlignMiddleRight= 609,
        grdaFormatTextAlignBottomLeft= 610,
        grdaFormatTextAlignBottomCenter= 611,
        grdaFormatTextAlignBottomRight= 612,
        grdaFormatTextOrientationDefault= 613,
        grdaFormatTextOrientationU2DL2R0= 614,
        grdaFormatTextOrientationD2UL2R1= 615,
        grdaFormatTextOrientationU2DR2L0= 616,
        grdaFormatTextOrientationU2DR2L1= 617,
        grdaFormatTextOrientationInvert= 618
    };

    enum tagGRDesignerOption {
        grdoShowRuler           = 1,
        grdoCanPopupMenu        = 2,
        grdoShowInspector       = 4,
        grdoShowInspectorObjectPicker= 8,
        grdoShowExplorer        = 16,
        grdoShowToolbar         = 32,
        grdoShowSectionLine     = 256,
        grdoShowMarginLine      = 512,
        grdoCanResizeSection    = 1024,
        grdoCanChangeMargin     = 2048,
        grdoCanDeleteObject     = 4096,
        grdoEnableQuickEdit     = 8192,
        grdoShowDetailGridToolbar= 16777216,
        grdoShowDetailGridColumnRuler= 33554432,
        grdoCanModifyDBSettings = 67108864
    };

    enum tagGRDesignerViewMode {
        grvmInNormalDesign      = 1,
        grvmInPageDesign        = 2,
        grvmInPrint             = 4,
        grvmInDisplay           = 8,
        grvmInScript            = 16
    };

    enum tagGRDesignerViewStyle {
        grvsOnlyNormal          = 1,
        grvsOnlyPage            = 2,
        grvsNormalPage          = 3,
        grvsNomalPrint          = 5,
        grvsNomalPrintDisplay   = 13,
        grvsPagePrint           = 6,
        grvsPagePrintDisplay    = 14,
        grvsNomalPagePrint      = 7,
        grvsNomalPagePrintDisplay= 15
    };

    enum tagGRDesignerWindowLayout {
        grdwlLayoutAtLeft       = 1,
        grdwlLayoutAtRight      = 2
    };

    enum tagGRPropertyCategory {
        grpcDesign              = 1,
        grpcLayout              = 2,
        grpcAppearance          = 4,
        grpcData                = 8,
        grpcAction              = 16,
        grpcEvent               = 32,
        grpcMisc                = 2048
    };

    enum tagGRSelectionObjectType {
        grdssReport             = 1,
        grdssPageHeader         = 2,
        grdssPageFooter         = 3,
        grdssReportHeader       = 4,
        grdssReportFooter       = 5,
        grdssControlSingle      = 6,
        grdssControlMulti       = 7,
        grdssDetailGrid         = 8,
        grdssColumn             = 9,
        grdssColumnContentCell  = 10,
        grdssColumnTitleCell    = 11,
        grdssColumnContent      = 12,
        grdssColumnTitle        = 13,
        grdssGroup              = 14,
        grdssGroupHeader        = 15,
        grdssGroupFooter        = 16,
        grdssRecordset          = 17,
        grdssField              = 18,
        grdssParameter          = 19,
        grdssCrossTab           = 20
    };

// forward declarations
    enum tagGRDesignerAction;
    enum tagGRDesignerWindowLayout;
    enum tagGRDesignerViewMode;
    enum tagGRDesignerViewStyle;
    enum tagGRDesignerOption;
    enum tagGRPropertyCategory;
    enum tagGRSelectionObjectType;
    enum tagGRDesignerAction;
    enum tagGRDesignerWindowLayout;
    enum tagGRDesignerViewMode;
    enum tagGRDesignerViewStyle;
    enum tagGRDesignerOption;
    enum tagGRPropertyCategory;
    enum tagGRSelectionObjectType;

// skipping event interface _IGRDesignerEvents

class GRDESLIB_EXPORT IGRDesigner : public QAxObject
{
public:
    IGRDesigner(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AsFormUI

    property  AsFormUI

    */
    inline bool AsFormUI() const; //Returns the value of AsFormUI
    inline void SetAsFormUI(bool value); //Sets the value of the AsFormUI property

    /*
    Property AsNativeUI

    property  AsNativeUI

    */
    inline bool AsNativeUI() const; //Returns the value of AsNativeUI
    inline void SetAsNativeUI(bool value); //Sets the value of the AsNativeUI property

    /*
    Property DefaultAction

    property  DefaultAction

    */
    inline bool DefaultAction() const; //Returns the value of DefaultAction
    inline void SetDefaultAction(bool value); //Sets the value of the DefaultAction property

    /*
    Property DesignEdgeColor

    property  DesignEdgeColor

    */
    inline QColor DesignEdgeColor() const; //Returns the value of DesignEdgeColor
    inline void SetDesignEdgeColor(const QColor& value); //Sets the value of the DesignEdgeColor property

    /*
    Property DesignGridColor

    property  DesignGridColor

    */
    inline QColor DesignGridColor() const; //Returns the value of DesignGridColor
    inline void SetDesignGridColor(const QColor& value); //Sets the value of the DesignGridColor property

    /*
    Property Dirty

    property  Dirty

    */
    inline bool Dirty() const; //Returns the value of Dirty
    inline void SetDirty(bool value); //Sets the value of the Dirty property

    /*
    Property EnableQuickEdit

    property  EnableQuickEdit

    */
    inline bool EnableQuickEdit() const; //Returns the value of EnableQuickEdit
    inline void SetEnableQuickEdit(bool value); //Sets the value of the EnableQuickEdit property

    /*
    Property IsBlank

    property  IsBlank

    */
    inline bool IsBlank() const; //Returns the value of IsBlank

    /*
    Property IsInsertingControl

    property  IsInsertingControl

    */
    inline bool IsInsertingControl() const; //Returns the value of IsInsertingControl

    /*
    Property OnlyLayout

    property  OnlyLayout

    */
    inline bool OnlyLayout() const; //Returns the value of OnlyLayout
    inline void SetOnlyLayout(bool value); //Sets the value of the OnlyLayout property

    /*
    Property Options

    property  Options

    */
    inline uint Options() const; //Returns the value of Options
    inline void SetOptions(uint value); //Sets the value of the Options property

    /*
    Property Published

    property  Published

    */
    inline uint Published() const; //Returns the value of Published
    inline void SetPublished(uint value); //Sets the value of the Published property

    /*
    Property Report

    property  Report

    */
    inline IDispatch* Report() const; //Returns the value of Report
    inline void SetReport(IDispatch* value); //Sets the value of the Report property

    /*
    Property ShowExplorer

    property  ShowExplorer

    */
    inline bool ShowExplorer() const; //Returns the value of ShowExplorer
    inline void SetShowExplorer(bool value); //Sets the value of the ShowExplorer property

    /*
    Property ShowInspector

    property  ShowInspector

    */
    inline bool ShowInspector() const; //Returns the value of ShowInspector
    inline void SetShowInspector(bool value); //Sets the value of the ShowInspector property

    /*
    Property ShowToolbar

    property  ShowToolbar

    */
    inline bool ShowToolbar() const; //Returns the value of ShowToolbar
    inline void SetShowToolbar(bool value); //Sets the value of the ShowToolbar property

    /*
    Property ViewFloatSection

    property  ViewFloatSection

    */
    inline bool ViewFloatSection() const; //Returns the value of ViewFloatSection
    inline void SetViewFloatSection(bool value); //Sets the value of the ViewFloatSection property

    /*
    Property ViewMode

    property  ViewMode

    */
    inline grdesLib::tagGRDesignerViewMode ViewMode() const; //Returns the value of ViewMode
    inline void SetViewMode(grdesLib::tagGRDesignerViewMode value); //Sets the value of the ViewMode property

    /*
    Property ViewStyle

    property  ViewStyle

    */
    inline grdesLib::tagGRDesignerViewStyle ViewStyle() const; //Returns the value of ViewStyle
    inline void SetViewStyle(grdesLib::tagGRDesignerViewStyle value); //Sets the value of the ViewStyle property

    /*
    Property WindowLayout

    property  WindowLayout

    */
    inline grdesLib::tagGRDesignerWindowLayout WindowLayout() const; //Returns the value of WindowLayout
    inline void SetWindowLayout(grdesLib::tagGRDesignerWindowLayout value); //Sets the value of the WindowLayout property

    /*
    Method CancelInsertControl

    method CancelInsertControl

    */
    inline void CancelInsertControl();

    /*
    Method DisableAllOptions

    method DisableAllOptions

    */
    inline void DisableAllOptions();

    /*
    Method DisableAllPublished

    method DisableAllPublished

    */
    inline void DisableAllPublished();

    /*
    Method DoAction

    method DoAction

    */
    inline void DoAction(grdesLib::tagGRDesignerAction Action);

    /*
    Method EnableAllOptions

    method EnableAllOptions

    */
    inline void EnableAllOptions();

    /*
    Method EnableAllPublished

    method EnableAllPublished

    */
    inline void EnableAllPublished();

    /*
    Method GetObjectCount

    method GetObjectCount

    */
    inline int GetObjectCount();

    /*
    Method GetObjectFontBold

    method GetObjectFontBold

    */
    inline bool GetObjectFontBold();

    /*
    Method GetObjectFontItalic

    method GetObjectFontItalic

    */
    inline bool GetObjectFontItalic();

    /*
    Method GetObjectFontName

    method GetObjectFontName

    */
    inline QString GetObjectFontName();

    /*
    Method GetObjectFontPoint

    method GetObjectFontPoint

    */
    inline double GetObjectFontPoint();

    /*
    Method GetObjectFontStrikethrough

    method GetObjectFontStrikethrough

    */
    inline bool GetObjectFontStrikethrough();

    /*
    Method GetObjectFontUnderline

    method GetObjectFontUnderline

    */
    inline bool GetObjectFontUnderline();

    /*
    Method GetObjectName

    method GetObjectName

    */
    inline QString GetObjectName(int Index);

    /*
    Method GetObjectTextAlign

    method GetObjectTextAlign

    */
    inline int GetObjectTextAlign();

    /*
    Method GetObjectTextOrientation

    method GetObjectTextOrientation

    */
    inline int GetObjectTextOrientation();

    /*
    Method GetObjectType

    method GetObjectType

    */
    inline tagGRSelectionObjectType GetObjectType();

    /*
    Method GetOptionValue

    method GetOptionValue

    */
    inline bool GetOptionValue(grdesLib::tagGRDesignerOption Option);

    /*
    Method GetPublishedValue

    method GetPublishedValue

    */
    inline bool GetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory);

    /*
    Method IsActionEnabled

    method IsActionEnabled

    */
    inline bool IsActionEnabled(grdesLib::tagGRDesignerAction Action);

    /*
    Method IsInsertControlEnabled

    method IsInsertControlEnabled

    */
    inline bool IsInsertControlEnabled();

    /*
    Method IsSetObjectBackColorEnabled

    method IsSetObjectBackColorEnabled

    */
    inline bool IsSetObjectBackColorEnabled();

    /*
    Method IsSetObjectFontEnabled

    method IsSetObjectFontEnabled

    */
    inline bool IsSetObjectFontEnabled();

    /*
    Method IsSetObjectForeColorEnabled

    method IsSetObjectForeColorEnabled

    */
    inline bool IsSetObjectForeColorEnabled();

    /*
    Method Post

    method Post

    */
    inline void Post();

    /*
    Method PrepareInsertControl

    method PrepareInsertControl

    */
    inline void PrepareInsertControl(int ControlType);

    /*
    Method Reload

    method Reload

    */
    inline void Reload();

    /*
    Method SetObjectBackColor

    method SetObjectBackColor

    */
    inline void SetObjectBackColor(const QColor& BackColor);

    /*
    Method SetObjectFontName

    method SetObjectFontName

    */
    inline void SetObjectFontName(const QString& FontName);

    /*
    Method SetObjectFontPoint

    method SetObjectFontPoint

    */
    inline void SetObjectFontPoint(double FontPoint);

    /*
    Method SetObjectForeColor

    method SetObjectForeColor

    */
    inline void SetObjectForeColor(const QColor& FontColor);

    /*
    Method SetOptionValue

    method SetOptionValue

    */
    inline void SetOptionValue(grdesLib::tagGRDesignerOption Option, bool newVal);

    /*
    Method SetPublishedValue

    method SetPublishedValue

    */
    inline void SetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory, bool newVal);

    /*
    Method ShowClassProperty

    method ShowClassProperty

    */
    inline void ShowClassProperty(const QString& ClassName, bool IsShow);

    /*
    Method ShowOneProperty

    method ShowOneProperty

    */
    inline void ShowOneProperty(const QString& ClassName, const QString& PropertyName, bool IsShow);

    /*
    Method UpdateLanguage

    method UpdateLanguage

    */
    inline void UpdateLanguage();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class GRDESLIB_EXPORT GRDesigner : public QAxWidget
{
public:
    GRDesigner(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{f5efb38e-ebef-46e9-a9b5-051076391d75}");
    }

    GRDesigner(IGRDesigner *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AsFormUI

    property  AsFormUI

    */
    inline bool AsFormUI() const; //Returns the value of AsFormUI
    inline void SetAsFormUI(bool value); //Sets the value of the AsFormUI property

    /*
    Property AsNativeUI

    property  AsNativeUI

    */
    inline bool AsNativeUI() const; //Returns the value of AsNativeUI
    inline void SetAsNativeUI(bool value); //Sets the value of the AsNativeUI property

    /*
    Property DefaultAction

    property  DefaultAction

    */
    inline bool DefaultAction() const; //Returns the value of DefaultAction
    inline void SetDefaultAction(bool value); //Sets the value of the DefaultAction property

    /*
    Property DesignEdgeColor

    property  DesignEdgeColor

    */
    inline QColor DesignEdgeColor() const; //Returns the value of DesignEdgeColor
    inline void SetDesignEdgeColor(const QColor& value); //Sets the value of the DesignEdgeColor property

    /*
    Property DesignGridColor

    property  DesignGridColor

    */
    inline QColor DesignGridColor() const; //Returns the value of DesignGridColor
    inline void SetDesignGridColor(const QColor& value); //Sets the value of the DesignGridColor property

    /*
    Property Dirty

    property  Dirty

    */
    inline bool Dirty() const; //Returns the value of Dirty
    inline void SetDirty(bool value); //Sets the value of the Dirty property

    /*
    Property EnableQuickEdit

    property  EnableQuickEdit

    */
    inline bool EnableQuickEdit() const; //Returns the value of EnableQuickEdit
    inline void SetEnableQuickEdit(bool value); //Sets the value of the EnableQuickEdit property

    /*
    Property IsBlank

    property  IsBlank

    */
    inline bool IsBlank() const; //Returns the value of IsBlank

    /*
    Property IsInsertingControl

    property  IsInsertingControl

    */
    inline bool IsInsertingControl() const; //Returns the value of IsInsertingControl

    /*
    Property OnlyLayout

    property  OnlyLayout

    */
    inline bool OnlyLayout() const; //Returns the value of OnlyLayout
    inline void SetOnlyLayout(bool value); //Sets the value of the OnlyLayout property

    /*
    Property Options

    property  Options

    */
    inline uint Options() const; //Returns the value of Options
    inline void SetOptions(uint value); //Sets the value of the Options property

    /*
    Property Published

    property  Published

    */
    inline uint Published() const; //Returns the value of Published
    inline void SetPublished(uint value); //Sets the value of the Published property

    /*
    Property Report

    property  Report

    */
    inline IDispatch* Report() const; //Returns the value of Report
    inline void SetReport(IDispatch* value); //Sets the value of the Report property

    /*
    Property ShowExplorer

    property  ShowExplorer

    */
    inline bool ShowExplorer() const; //Returns the value of ShowExplorer
    inline void SetShowExplorer(bool value); //Sets the value of the ShowExplorer property

    /*
    Property ShowInspector

    property  ShowInspector

    */
    inline bool ShowInspector() const; //Returns the value of ShowInspector
    inline void SetShowInspector(bool value); //Sets the value of the ShowInspector property

    /*
    Property ShowToolbar

    property  ShowToolbar

    */
    inline bool ShowToolbar() const; //Returns the value of ShowToolbar
    inline void SetShowToolbar(bool value); //Sets the value of the ShowToolbar property

    /*
    Property ViewFloatSection

    property  ViewFloatSection

    */
    inline bool ViewFloatSection() const; //Returns the value of ViewFloatSection
    inline void SetViewFloatSection(bool value); //Sets the value of the ViewFloatSection property

    /*
    Property ViewMode

    property  ViewMode

    */
    inline grdesLib::tagGRDesignerViewMode ViewMode() const; //Returns the value of ViewMode
    inline void SetViewMode(grdesLib::tagGRDesignerViewMode value); //Sets the value of the ViewMode property

    /*
    Property ViewStyle

    property  ViewStyle

    */
    inline grdesLib::tagGRDesignerViewStyle ViewStyle() const; //Returns the value of ViewStyle
    inline void SetViewStyle(grdesLib::tagGRDesignerViewStyle value); //Sets the value of the ViewStyle property

    /*
    Property WindowLayout

    property  WindowLayout

    */
    inline grdesLib::tagGRDesignerWindowLayout WindowLayout() const; //Returns the value of WindowLayout
    inline void SetWindowLayout(grdesLib::tagGRDesignerWindowLayout value); //Sets the value of the WindowLayout property

    /*
    Method CancelInsertControl

    method CancelInsertControl

    */
    inline void CancelInsertControl();

    /*
    Method DisableAllOptions

    method DisableAllOptions

    */
    inline void DisableAllOptions();

    /*
    Method DisableAllPublished

    method DisableAllPublished

    */
    inline void DisableAllPublished();

    /*
    Method DoAction

    method DoAction

    */
    inline void DoAction(grdesLib::tagGRDesignerAction Action);

    /*
    Method EnableAllOptions

    method EnableAllOptions

    */
    inline void EnableAllOptions();

    /*
    Method EnableAllPublished

    method EnableAllPublished

    */
    inline void EnableAllPublished();

    /*
    Method GetObjectCount

    method GetObjectCount

    */
    inline int GetObjectCount();

    /*
    Method GetObjectFontBold

    method GetObjectFontBold

    */
    inline bool GetObjectFontBold();

    /*
    Method GetObjectFontItalic

    method GetObjectFontItalic

    */
    inline bool GetObjectFontItalic();

    /*
    Method GetObjectFontName

    method GetObjectFontName

    */
    inline QString GetObjectFontName();

    /*
    Method GetObjectFontPoint

    method GetObjectFontPoint

    */
    inline double GetObjectFontPoint();

    /*
    Method GetObjectFontStrikethrough

    method GetObjectFontStrikethrough

    */
    inline bool GetObjectFontStrikethrough();

    /*
    Method GetObjectFontUnderline

    method GetObjectFontUnderline

    */
    inline bool GetObjectFontUnderline();

    /*
    Method GetObjectName

    method GetObjectName

    */
    inline QString GetObjectName(int Index);

    /*
    Method GetObjectTextAlign

    method GetObjectTextAlign

    */
    inline int GetObjectTextAlign();

    /*
    Method GetObjectTextOrientation

    method GetObjectTextOrientation

    */
    inline int GetObjectTextOrientation();

    /*
    Method GetObjectType

    method GetObjectType

    */
    inline tagGRSelectionObjectType GetObjectType();

    /*
    Method GetOptionValue

    method GetOptionValue

    */
    inline bool GetOptionValue(grdesLib::tagGRDesignerOption Option);

    /*
    Method GetPublishedValue

    method GetPublishedValue

    */
    inline bool GetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory);

    /*
    Method IsActionEnabled

    method IsActionEnabled

    */
    inline bool IsActionEnabled(grdesLib::tagGRDesignerAction Action);

    /*
    Method IsInsertControlEnabled

    method IsInsertControlEnabled

    */
    inline bool IsInsertControlEnabled();

    /*
    Method IsSetObjectBackColorEnabled

    method IsSetObjectBackColorEnabled

    */
    inline bool IsSetObjectBackColorEnabled();

    /*
    Method IsSetObjectFontEnabled

    method IsSetObjectFontEnabled

    */
    inline bool IsSetObjectFontEnabled();

    /*
    Method IsSetObjectForeColorEnabled

    method IsSetObjectForeColorEnabled

    */
    inline bool IsSetObjectForeColorEnabled();

    /*
    Method Post

    method Post

    */
    inline void Post();

    /*
    Method PrepareInsertControl

    method PrepareInsertControl

    */
    inline void PrepareInsertControl(int ControlType);

    /*
    Method Reload

    method Reload

    */
    inline void Reload();

    /*
    Method SetObjectBackColor

    method SetObjectBackColor

    */
    inline void SetObjectBackColor(const QColor& BackColor);

    /*
    Method SetObjectFontName

    method SetObjectFontName

    */
    inline void SetObjectFontName(const QString& FontName);

    /*
    Method SetObjectFontPoint

    method SetObjectFontPoint

    */
    inline void SetObjectFontPoint(double FontPoint);

    /*
    Method SetObjectForeColor

    method SetObjectForeColor

    */
    inline void SetObjectForeColor(const QColor& FontColor);

    /*
    Method SetOptionValue

    method SetOptionValue

    */
    inline void SetOptionValue(grdesLib::tagGRDesignerOption Option, bool newVal);

    /*
    Method SetPublishedValue

    method SetPublishedValue

    */
    inline void SetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory, bool newVal);

    /*
    Method ShowClassProperty

    method ShowClassProperty

    */
    inline void ShowClassProperty(const QString& ClassName, bool IsShow);

    /*
    Method ShowOneProperty

    method ShowOneProperty

    */
    inline void ShowOneProperty(const QString& ClassName, const QString& PropertyName, bool IsShow);

    /*
    Method UpdateLanguage

    method UpdateLanguage

    */
    inline void UpdateLanguage();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRDESLIB_EXPORT DesignerProps : public QAxObject
{
public:
    DesignerProps(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{a53ea3f7-cfae-49e9-a113-7a1211d762d7}");
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_GRDESLIB_NOINLINES
inline bool GRDesigner::AsFormUI() const
{
    QVariant qax_result = property("AsFormUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetAsFormUI(bool value){ setProperty("AsFormUI", QVariant(value)); }

inline bool GRDesigner::AsNativeUI() const
{
    QVariant qax_result = property("AsNativeUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetAsNativeUI(bool value){ setProperty("AsNativeUI", QVariant(value)); }

inline bool GRDesigner::DefaultAction() const
{
    QVariant qax_result = property("DefaultAction");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetDefaultAction(bool value){ setProperty("DefaultAction", QVariant(value)); }

inline QColor GRDesigner::DesignEdgeColor() const
{
    QVariant qax_result = property("DesignEdgeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GRDesigner::SetDesignEdgeColor(const QColor& value){ setProperty("DesignEdgeColor", QVariant(value)); }

inline QColor GRDesigner::DesignGridColor() const
{
    QVariant qax_result = property("DesignGridColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GRDesigner::SetDesignGridColor(const QColor& value){ setProperty("DesignGridColor", QVariant(value)); }

inline bool GRDesigner::Dirty() const
{
    QVariant qax_result = property("Dirty");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetDirty(bool value){ setProperty("Dirty", QVariant(value)); }

inline bool GRDesigner::EnableQuickEdit() const
{
    QVariant qax_result = property("EnableQuickEdit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetEnableQuickEdit(bool value){ setProperty("EnableQuickEdit", QVariant(value)); }

inline bool GRDesigner::IsBlank() const
{
    QVariant qax_result = property("IsBlank");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool GRDesigner::IsInsertingControl() const
{
    QVariant qax_result = property("IsInsertingControl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool GRDesigner::OnlyLayout() const
{
    QVariant qax_result = property("OnlyLayout");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetOnlyLayout(bool value){ setProperty("OnlyLayout", QVariant(value)); }

inline uint GRDesigner::Options() const
{
    QVariant qax_result = property("Options");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void GRDesigner::SetOptions(uint value){ setProperty("Options", QVariant(value)); }

inline uint GRDesigner::Published() const
{
    QVariant qax_result = property("Published");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void GRDesigner::SetPublished(uint value){ setProperty("Published", QVariant(value)); }

inline IDispatch* GRDesigner::Report() const
{
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void GRDesigner::SetReport(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline bool GRDesigner::ShowExplorer() const
{
    QVariant qax_result = property("ShowExplorer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetShowExplorer(bool value){ setProperty("ShowExplorer", QVariant(value)); }

inline bool GRDesigner::ShowInspector() const
{
    QVariant qax_result = property("ShowInspector");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetShowInspector(bool value){ setProperty("ShowInspector", QVariant(value)); }

inline bool GRDesigner::ShowToolbar() const
{
    QVariant qax_result = property("ShowToolbar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetShowToolbar(bool value){ setProperty("ShowToolbar", QVariant(value)); }

inline bool GRDesigner::ViewFloatSection() const
{
    QVariant qax_result = property("ViewFloatSection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDesigner::SetViewFloatSection(bool value){ setProperty("ViewFloatSection", QVariant(value)); }

inline grdesLib::tagGRDesignerViewMode GRDesigner::ViewMode() const
{
    QVariant qax_result = property("ViewMode");
    Q_ASSERT(qax_result.isValid());
    return *(grdesLib::tagGRDesignerViewMode*)qax_result.constData();
}
inline void GRDesigner::SetViewMode(grdesLib::tagGRDesignerViewMode value){ setProperty("ViewMode", QVariant(value)); }

inline grdesLib::tagGRDesignerViewStyle GRDesigner::ViewStyle() const
{
    QVariant qax_result = property("ViewStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grdesLib::tagGRDesignerViewStyle*)qax_result.constData();
}
inline void GRDesigner::SetViewStyle(grdesLib::tagGRDesignerViewStyle value){ setProperty("ViewStyle", QVariant(value)); }

inline grdesLib::tagGRDesignerWindowLayout GRDesigner::WindowLayout() const
{
    QVariant qax_result = property("WindowLayout");
    Q_ASSERT(qax_result.isValid());
    return *(grdesLib::tagGRDesignerWindowLayout*)qax_result.constData();
}
inline void GRDesigner::SetWindowLayout(grdesLib::tagGRDesignerWindowLayout value){ setProperty("WindowLayout", QVariant(value)); }

inline void GRDesigner::CancelInsertControl()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void GRDesigner::DisableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void GRDesigner::DisableAllPublished()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void GRDesigner::DoAction(grdesLib::tagGRDesignerAction Action)
{
    void *_a[] = {0, (void*)&Action};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void GRDesigner::EnableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void GRDesigner::EnableAllPublished()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline int GRDesigner::GetObjectCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool GRDesigner::GetObjectFontBold()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline bool GRDesigner::GetObjectFontItalic()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline QString GRDesigner::GetObjectFontName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline double GRDesigner::GetObjectFontPoint()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool GRDesigner::GetObjectFontStrikethrough()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool GRDesigner::GetObjectFontUnderline()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline QString GRDesigner::GetObjectName(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline int GRDesigner::GetObjectTextAlign()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline int GRDesigner::GetObjectTextOrientation()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline tagGRSelectionObjectType GRDesigner::GetObjectType()
{
    tagGRSelectionObjectType qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool GRDesigner::GetOptionValue(grdesLib::tagGRDesignerOption Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool GRDesigner::GetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PropertyCategory};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool GRDesigner::IsActionEnabled(grdesLib::tagGRDesignerAction Action)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Action};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool GRDesigner::IsInsertControlEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool GRDesigner::IsSetObjectBackColorEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool GRDesigner::IsSetObjectFontEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool GRDesigner::IsSetObjectForeColorEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline void GRDesigner::Post()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void GRDesigner::PrepareInsertControl(int ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void GRDesigner::Reload()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void GRDesigner::SetObjectBackColor(const QColor& BackColor)
{
    void *_a[] = {0, (void*)&BackColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void GRDesigner::SetObjectFontName(const QString& FontName)
{
    void *_a[] = {0, (void*)&FontName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void GRDesigner::SetObjectFontPoint(double FontPoint)
{
    void *_a[] = {0, (void*)&FontPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void GRDesigner::SetObjectForeColor(const QColor& FontColor)
{
    void *_a[] = {0, (void*)&FontColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void GRDesigner::SetOptionValue(grdesLib::tagGRDesignerOption Option, bool newVal)
{
    void *_a[] = {0, (void*)&Option, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void GRDesigner::SetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory, bool newVal)
{
    void *_a[] = {0, (void*)&PropertyCategory, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void GRDesigner::ShowClassProperty(const QString& ClassName, bool IsShow)
{
    void *_a[] = {0, (void*)&ClassName, (void*)&IsShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void GRDesigner::ShowOneProperty(const QString& ClassName, const QString& PropertyName, bool IsShow)
{
    void *_a[] = {0, (void*)&ClassName, (void*)&PropertyName, (void*)&IsShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline void GRDesigner::UpdateLanguage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
}


inline bool IGRDesigner::AsFormUI() const
{
    QVariant qax_result = property("AsFormUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetAsFormUI(bool value){ setProperty("AsFormUI", QVariant(value)); }

inline bool IGRDesigner::AsNativeUI() const
{
    QVariant qax_result = property("AsNativeUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetAsNativeUI(bool value){ setProperty("AsNativeUI", QVariant(value)); }

inline bool IGRDesigner::DefaultAction() const
{
    QVariant qax_result = property("DefaultAction");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetDefaultAction(bool value){ setProperty("DefaultAction", QVariant(value)); }

inline QColor IGRDesigner::DesignEdgeColor() const
{
    QVariant qax_result = property("DesignEdgeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDesigner::SetDesignEdgeColor(const QColor& value){ setProperty("DesignEdgeColor", QVariant(value)); }

inline QColor IGRDesigner::DesignGridColor() const
{
    QVariant qax_result = property("DesignGridColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDesigner::SetDesignGridColor(const QColor& value){ setProperty("DesignGridColor", QVariant(value)); }

inline bool IGRDesigner::Dirty() const
{
    QVariant qax_result = property("Dirty");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetDirty(bool value){ setProperty("Dirty", QVariant(value)); }

inline bool IGRDesigner::EnableQuickEdit() const
{
    QVariant qax_result = property("EnableQuickEdit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetEnableQuickEdit(bool value){ setProperty("EnableQuickEdit", QVariant(value)); }

inline bool IGRDesigner::IsBlank() const
{
    QVariant qax_result = property("IsBlank");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IGRDesigner::IsInsertingControl() const
{
    QVariant qax_result = property("IsInsertingControl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IGRDesigner::OnlyLayout() const
{
    QVariant qax_result = property("OnlyLayout");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetOnlyLayout(bool value){ setProperty("OnlyLayout", QVariant(value)); }

inline uint IGRDesigner::Options() const
{
    QVariant qax_result = property("Options");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IGRDesigner::SetOptions(uint value){ setProperty("Options", QVariant(value)); }

inline uint IGRDesigner::Published() const
{
    QVariant qax_result = property("Published");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IGRDesigner::SetPublished(uint value){ setProperty("Published", QVariant(value)); }

inline IDispatch* IGRDesigner::Report() const
{
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void IGRDesigner::SetReport(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline bool IGRDesigner::ShowExplorer() const
{
    QVariant qax_result = property("ShowExplorer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetShowExplorer(bool value){ setProperty("ShowExplorer", QVariant(value)); }

inline bool IGRDesigner::ShowInspector() const
{
    QVariant qax_result = property("ShowInspector");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetShowInspector(bool value){ setProperty("ShowInspector", QVariant(value)); }

inline bool IGRDesigner::ShowToolbar() const
{
    QVariant qax_result = property("ShowToolbar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetShowToolbar(bool value){ setProperty("ShowToolbar", QVariant(value)); }

inline bool IGRDesigner::ViewFloatSection() const
{
    QVariant qax_result = property("ViewFloatSection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDesigner::SetViewFloatSection(bool value){ setProperty("ViewFloatSection", QVariant(value)); }

inline grdesLib::tagGRDesignerViewMode IGRDesigner::ViewMode() const
{
    QVariant qax_result = property("ViewMode");
    Q_ASSERT(qax_result.isValid());
    return *(grdesLib::tagGRDesignerViewMode*)qax_result.constData();
}
inline void IGRDesigner::SetViewMode(grdesLib::tagGRDesignerViewMode value){ setProperty("ViewMode", QVariant(value)); }

inline grdesLib::tagGRDesignerViewStyle IGRDesigner::ViewStyle() const
{
    QVariant qax_result = property("ViewStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grdesLib::tagGRDesignerViewStyle*)qax_result.constData();
}
inline void IGRDesigner::SetViewStyle(grdesLib::tagGRDesignerViewStyle value){ setProperty("ViewStyle", QVariant(value)); }

inline grdesLib::tagGRDesignerWindowLayout IGRDesigner::WindowLayout() const
{
    QVariant qax_result = property("WindowLayout");
    Q_ASSERT(qax_result.isValid());
    return *(grdesLib::tagGRDesignerWindowLayout*)qax_result.constData();
}
inline void IGRDesigner::SetWindowLayout(grdesLib::tagGRDesignerWindowLayout value){ setProperty("WindowLayout", QVariant(value)); }

inline void IGRDesigner::CancelInsertControl()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRDesigner::DisableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IGRDesigner::DisableAllPublished()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRDesigner::DoAction(grdesLib::tagGRDesignerAction Action)
{
    void *_a[] = {0, (void*)&Action};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRDesigner::EnableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IGRDesigner::EnableAllPublished()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline int IGRDesigner::GetObjectCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IGRDesigner::GetObjectFontBold()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool IGRDesigner::GetObjectFontItalic()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline QString IGRDesigner::GetObjectFontName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double IGRDesigner::GetObjectFontPoint()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool IGRDesigner::GetObjectFontStrikethrough()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IGRDesigner::GetObjectFontUnderline()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline QString IGRDesigner::GetObjectName(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline int IGRDesigner::GetObjectTextAlign()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline int IGRDesigner::GetObjectTextOrientation()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline tagGRSelectionObjectType IGRDesigner::GetObjectType()
{
    tagGRSelectionObjectType qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IGRDesigner::GetOptionValue(grdesLib::tagGRDesignerOption Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IGRDesigner::GetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PropertyCategory};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool IGRDesigner::IsActionEnabled(grdesLib::tagGRDesignerAction Action)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Action};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IGRDesigner::IsInsertControlEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool IGRDesigner::IsSetObjectBackColorEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool IGRDesigner::IsSetObjectFontEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline bool IGRDesigner::IsSetObjectForeColorEnabled()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void IGRDesigner::Post()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IGRDesigner::PrepareInsertControl(int ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IGRDesigner::Reload()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IGRDesigner::SetObjectBackColor(const QColor& BackColor)
{
    void *_a[] = {0, (void*)&BackColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRDesigner::SetObjectFontName(const QString& FontName)
{
    void *_a[] = {0, (void*)&FontName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IGRDesigner::SetObjectFontPoint(double FontPoint)
{
    void *_a[] = {0, (void*)&FontPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRDesigner::SetObjectForeColor(const QColor& FontColor)
{
    void *_a[] = {0, (void*)&FontColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRDesigner::SetOptionValue(grdesLib::tagGRDesignerOption Option, bool newVal)
{
    void *_a[] = {0, (void*)&Option, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void IGRDesigner::SetPublishedValue(grdesLib::tagGRPropertyCategory PropertyCategory, bool newVal)
{
    void *_a[] = {0, (void*)&PropertyCategory, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IGRDesigner::ShowClassProperty(const QString& ClassName, bool IsShow)
{
    void *_a[] = {0, (void*)&ClassName, (void*)&IsShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void IGRDesigner::ShowOneProperty(const QString& ClassName, const QString& PropertyName, bool IsShow)
{
    void *_a[] = {0, (void*)&ClassName, (void*)&PropertyName, (void*)&IsShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IGRDesigner::UpdateLanguage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}




#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<grdesLib::GRDesigner, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grdesLib::GRDesigner*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grdesLib::GRDesigner();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grdesLib::GRDesigner*>(t)->grdesLib::GRDesigner::~GRDesigner();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grdesLib::GRDesigner;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grdesLib::GRDesigner*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grdesLib::GRDesigner*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grdesLib::IGRDesigner, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grdesLib::IGRDesigner*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grdesLib::IGRDesigner();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grdesLib::IGRDesigner*>(t)->grdesLib::IGRDesigner::~IGRDesigner();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grdesLib::IGRDesigner;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grdesLib::IGRDesigner*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grdesLib::IGRDesigner*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grdesLib::DesignerProps, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grdesLib::DesignerProps*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grdesLib::DesignerProps();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grdesLib::DesignerProps*>(t)->grdesLib::DesignerProps::~DesignerProps();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grdesLib::DesignerProps;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grdesLib::DesignerProps*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grdesLib::DesignerProps*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

