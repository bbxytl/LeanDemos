/****************************************************************************
**
** Namespace grproLib generated by dumpcpp from type library
** gregn50.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_GREGN_H
#define QAX_DUMPCPP_GREGN_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef GRPROLIB_EXPORT
#define GRPROLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>
#include "ocidl.h"

struct IDispatch;


// Referenced namespace
namespace stdole {
    class IPicture;
}


namespace grproLib {

    enum tagGRAlignColumnSideStyle {
        gracsLeft               = 1,
        gracsRight              = 2,
        gracsBoth               = 3
    };

    enum tagGRAnchorStyle {
        grasLeft                = 1,
        grasTop                 = 2,
        grasRight               = 4,
        grasBottom              = 8
    };

    enum tagGRBackStyle {
        grbkNormal              = 1,
        grbkTransparent         = 2
    };

    enum tagGRBarcodeCaptionPosition {
        grbcpNone               = 1,
        grbcpAbove              = 2,
        grbcpBelow              = 3
    };

    enum tagGRBarcodeDirection {
        grbdLeftToRight         = 1,
        grbdRightToLeft         = 2,
        grbdTopToBottom         = 3,
        grbdBottomToTop         = 4
    };

    enum tagGRBarcodeType {
        grbtCode25Intlv         = 1,
        grbtCode25Ind           = 2,
        grbtCode25Matrix        = 3,
        grbtCode39              = 4,
        grbtCode39X             = 5,
        grbtCode128A            = 6,
        grbtCode128B            = 7,
        grbtCode128C            = 8,
        grbtCode93              = 9,
        grbtCode93X             = 10,
        grbtCodeMSI             = 11,
        grbtCodePostNet         = 12,
        grbtCodeCodabar         = 13,
        grbtCodeEAN8            = 14,
        grbtCodeEAN13           = 15,
        grbtCodeUPC_A           = 16,
        grbtCodeUPC_E0          = 17,
        grbtCodeUPC_E1          = 18,
        grbtCodeUPC_Supp2       = 19,
        grbtCodeUPC_Supp5       = 20,
        grbtCodeEAN128A         = 21,
        grbtCodeEAN128B         = 22,
        grbtCodeEAN128C         = 23,
        grbtCode128Auto         = 24,
        grbtPDF417              = 50,
        grbtQRCode              = 51
    };

    enum tagGRBorderStyle {
        grbsDrawLeft            = 1,
        grbsDrawTop             = 2,
        grbsDrawRight           = 4,
        grbsDrawBottom          = 8
    };

    enum tagGRCenterStyle {
        grcsNone                = 0,
        grcsHorizontal          = 1,
        grcsVertical            = 2,
        grcsBoth                = 3
    };

    enum tagGRChartType {
        grctBarChart            = 1,
        grctPieChart            = 2,
        grctLineChart           = 3,
        grctStepBarChart        = 4,
        grctXYScatterChart      = 5,
        grctXYLineChart         = 6,
        grctCurveLineChart      = 7,
        grctXYCurveLineChart    = 8,
        grctBubble              = 9
    };

    enum tagGRCollateKind {
        grckDefault             = 0,
        grckCollate             = 1,
        grckNotCollate          = 2
    };

    enum tagGRColumnPrintAdaptMethod {
        grcpamDiscard           = 1,
        grcpamWrap              = 2,
        grcpamResizeToFit       = 3,
        grcpamShrinkToFit       = 4,
        grcpamToNewPage         = 5,
        grcpamToNewPageEx       = 6,
        grcpamToNewPageRFC      = 7,
        grcpamToNewPageRFCEx    = 8
    };

    enum tagGRControlType {
        grctStaticBox           = 1,
        grctShapeBox            = 2,
        grctSystemVarBox        = 3,
        grctFieldBox            = 4,
        grctSummaryBox          = 5,
        grctRichTextBox         = 6,
        grctPictureBox          = 7,
        grctMemoBox             = 8,
        grctSubReport           = 9,
        grctLine                = 10,
        grctChart               = 11,
        grctBarcode             = 12
    };

    enum tagGRDetailGridRowType {
        grgrtRecord             = 1,
        grgrtGroupHeader        = 2,
        grgrtGroupFooter        = 3
    };

    enum tagGRDisplayCursor {
        grdcDefault             = 0,
        grdcArrow               = 1,
        grdcMagnify             = 2,
        grdcFinger              = 3,
        grdcAffirm              = 4,
        grdcNegative            = 5
    };

    enum tagGRDockStyle {
        grdsNone                = 0,
        grdsLeft                = 1,
        grdsTop                 = 2,
        grdsRight               = 3,
        grdsBottom              = 4,
        grdsFill                = 5
    };

    enum tagGRDuplexKind {
        grdkDefault             = 0,
        grdkSimplex             = 1,
        grdkHorizontal          = 3,
        grdkVertical            = 2
    };

    enum tagGRExportImageType {
        greitBMP                = 1,
        greitPNG                = 2,
        greitJPEG               = 3,
        greitGIF                = 4,
        greitTIFF               = 5
    };

    enum tagGRExportType {
        gretXLS                 = 1,
        gretTXT                 = 2,
        gretHTM                 = 3,
        gretRTF                 = 4,
        gretPDF                 = 5,
        gretCSV                 = 6,
        gretIMG                 = 7
    };

    enum tagGRFieldType {
        grftString              = 1,
        grftInteger             = 2,
        grftFloat               = 3,
        grftCurrency            = 4,
        grftBoolean             = 5,
        grftDateTime            = 6,
        grftBinary              = 7
    };

    enum tagGRGrpKpTogetherStyle {
        grgktsNone              = 1,
        grgktsFirstDetail       = 2,
        grgktsAll               = 3
    };

    enum tagGRLineType {
        grltTopLeftToBottomRight= 0,
        grltBottomLeftToTopRight= 1,
        grltTopLeftToTopRight   = 2,
        grltMiddleLeftToMiddleRight= 3,
        grltBottomLeftToBottomRight= 4,
        grltTopLeftToBottomLeft = 5,
        grltTopCenterToBottomCenter= 6,
        grltTopRightToBottomRight= 7
    };

    enum tagGRMouseButton {
        grmbLeft                = 1,
        grmbRight               = 2,
        grmbMiddle              = 3
    };

    enum tagGRNewPageColumnStyle {
        grncsNone               = 1,
        grncsBefore             = 2,
        grncsAfter              = 3,
        grncsBeforeAfter        = 4
    };

    enum tagGRNewPageStyle {
        grnpsNone               = 1,
        grnpsBefore             = 2,
        grnpsAfter              = 3,
        grnpsBeforeAfter        = 4
    };

    enum tagGROCGroupHeaderVAlign {
        grbaTop                 = 1,
        grbaBottom              = 2,
        grbaMiddle              = 3
    };

    enum tagGRPageColumnDirection {
        grpcdDownAcross         = 1,
        grpcdAcrossDown         = 2,
        grpcdDownAcrossEqual    = 3
    };

    enum tagGRPaperKind {
        grpkDefault             = 255,
        grpkCustom              = 256,
        grpkLetter              = 1,
        grpkLegal               = 5,
        grpk10X14               = 16,
        grpk11X17               = 17,
        grpk12X11               = 90,
        grpkA3                  = 8,
        grpkA4                  = 9,
        grpkA4Small             = 10,
        grpkA5                  = 11,
        grpkA6                  = 70,
        grpkB4                  = 12,
        grpkB5                  = 13,
        grpkB6                  = 88,
        grpkCSheet              = 24,
        grpkDSheet              = 25,
        grpkEnvelope9           = 19,
        grpkEnvelope10          = 20,
        grpkEnvelope11          = 21,
        grpkEnvelope12          = 22,
        grpkEnvelope14          = 23,
        grpkEnvelopeC5          = 28,
        grpkEnvelopeC3          = 29,
        grpkEnvelopeC4          = 30,
        grpkEnvelopeC6          = 31,
        grpkEnvelopeC65         = 32,
        grpkEnvelopeB4          = 33,
        grpkEnvelopeB5          = 34,
        grpkEnvelopeB6          = 35,
        grpkEnvelopeDL          = 27,
        grpkEnvelopeItaly       = 36,
        grpkEnvelopeMonarch     = 37,
        grpkEnvelopePersonal    = 38,
        grpkESheet              = 26,
        grpkExecutive           = 7,
        grpkFanfold             = 39,
        grpkFolio               = 14,
        grpkLedger              = 4,
        grpkLetterSmall         = 2,
        grpkNote                = 18,
        grpkP16K                = 93,
        grpkP32K                = 94,
        grpkQuarto              = 15,
        grpkStatement           = 6,
        grpkTabloid             = 3
    };

    enum tagGRPaperOrientation {
        grpoDefault             = 0,
        grpoPortrait            = 1,
        grpoLandscape           = 2
    };

    enum tagGRPaperSourceKind {
        grpskDefault            = 0,
        grpskAutomaticFeed      = 7,
        grpskCassette           = 14,
        grpskCustom             = 256,
        grpskEnvelope           = 5,
        grpskFormSource         = 15,
        grpskLargeCapacity      = 11,
        grpskLargeFormat        = 10,
        grpskLower              = 2,
        grpskManual             = 4,
        grpskManualFeed         = 6,
        grpskMiddle             = 3,
        grpskSmallFormat        = 9,
        grpskTractorFeed        = 8,
        grpskUpper              = 1
    };

    enum tagGRParameterDataType {
        grptString              = 1,
        grptInteger             = 2,
        grptFloat               = 3,
        grptBoolean             = 4,
        grptDateTime            = 5
    };

    enum tagGRPenStyle {
        grpsSolid               = 0,
        grpsDash                = 1,
        grpsDot                 = 2,
        grpsDashDot             = 3,
        grpsDashDotDot          = 4,
        grpsClear               = 5,
        grpsInsideFrame         = 6
    };

    enum tagGRPeriodType {
        grptNone                = 0,
        grptDay                 = 1,
        grptWeek                = 2,
        grptThirdMonth          = 3,
        grptHalfMonth           = 4,
        grptMonth               = 5,
        grptQuarter             = 6,
        grptHalfYear            = 7,
        grptYear                = 8
    };

    enum tagGRPictureAlignment {
        grpaTopLeft             = 1,
        grpaTopRight            = 2,
        grpaCenter              = 3,
        grpaBottomLeft          = 4,
        grpaBottomRight         = 5
    };

    enum tagGRPictureSizeMode {
        grpsmClip               = 1,
        grpsmStretch            = 2,
        grpsmZoom               = 3,
        grpsmEnsureFullView     = 4,
        grpsmTile               = 5
    };

    enum tagGRPreviewEditMode {
        grpemDisable            = 1,
        grpemClickToEdit        = 2,
        grpemDblClickToEdit     = 3
    };

    enum tagGRPrintGenerateStyle {
        grpgsOnlyForm           = 1,
        grpgsOnlyContent        = 2,
        grpgsAll                = 3,
        grpgsPreviewAll         = 4
    };

    enum tagGRPrintPageType {
        grpptAllSelectionPages  = 1,
        grpptOddSelectionPages  = 2,
        grpptEvenSelectionPages = 3
    };

    enum tagGRPrintRangeType {
        grprtAllPages           = 1,
        grprtCurrentPage        = 2,
        grprtSelectionPages     = 3
    };

    enum tagGRPrintType {
        grptForm                = 1,
        grptContent             = 2
    };

    enum tagGRPrintViewMode {
        grpvmContinuousPage     = 1,
        grpvmSinglePage         = 2,
        grpvmMultiPage          = 3
    };

    enum tagGRRepeatStyle {
        grrsNone                = 1,
        grrsOnPage              = 2,
        grrsOnPageColumn        = 4,
        grrsOnGroupHeader       = 8,
        grrsOnGroupHeaderPage   = 10
    };

    enum tagGRReportDisplayMode {
        grrdmScreenView         = 1,
        grrdmPrintGenerate      = 2,
        grrdmIdle               = 3
    };

    enum tagGRScriptType {
        grstJScript             = 1,
        grstVBScript            = 2
    };

    enum tagGRSectionType {
        grstPageHeader          = 1,
        grstReportHeader        = 2,
        grstReportFooter        = 3,
        grstPageFooter          = 4,
        grstColumnTitle         = 5,
        grstColumnContent       = 6,
        grstGroupHeader         = 7,
        grstGroupFooter         = 8
    };

    enum tagGRShapeBoxType {
        grsbtCircle             = 1,
        grsbtEllipse            = 2,
        grsbtRectangle          = 3,
        grsbtRoundRect          = 4,
        grsbtRoundSquare        = 5,
        grsbtSquare             = 6,
        grsbtLine               = 7
    };

    enum tagGRSharePrintSetupOption {
        grspsoPaperMargin       = 1,
        grspsoPaperKind         = 2,
        grspsoPaperOrientation  = 4,
        grspsoPaperSource       = 8,
        grspsoSelectedPrinter   = 16
    };

    enum tagGRSheetPages {
        grsp1Pages              = 1,
        grsp2Pages              = 2,
        grsp4Pages              = 4,
        grsp6Pages              = 6,
        grsp8Pages              = 8,
        grsp16Pages             = 16
    };

    enum tagGRShiftState {
        grssShift               = 1,
        grssAlt                 = 2,
        grssCtrl                = 4,
        grssLeft                = 8,
        grssRight               = 16,
        grssMiddle              = 32,
        grssDouble              = 64
    };

    enum tagGRStorageFormat {
        grsfText                = 1,
        grsfBinary              = 2,
        grsfBinBase64           = 3,
        grsfXML                 = 4
    };

    enum tagGRStringAlignment {
        grsaNear                = 1,
        grsaCenter              = 2,
        grsaFar                 = 3
    };

    enum tagGRSummaryFun {
        grsfSum                 = 1,
        grsfAvg                 = 2,
        grsfCount               = 3,
        grsfMin                 = 4,
        grsfMax                 = 5,
        grsfVar                 = 6,
        grsfVarP                = 7,
        grsfStdDev              = 8,
        grsfStdDevP             = 9,
        grsfAveDev              = 10,
        grsfDevSq               = 11,
        grsfCountBlank          = 12,
        grsfCountA              = 13,
        grsfDistinct            = 14,
        grsfAvgA                = 15,
        grsfMinN                = 16,
        grsfMaxN                = 17,
        grsfStrMin              = 18,
        grsfStrMax              = 19
    };

    enum tagGRSystemImage {
        grsiChecked             = -1,
        grsiUnchecked           = -2,
        grsi3DChecked           = -3,
        grsi3DUnchecked         = -4,
        grsiAffirm              = -5,
        grsiNegative            = -6,
        grsiArrowDown           = -7,
        grsiArrowUp             = -8
    };

    enum tagGRSystemVar {
        grsvCurrentDateTime     = 1,
        grsvPageCount           = 2,
        grsvPageNumber          = 3,
        grsvRecordNo            = 4,
        grsvGroup1RowNo         = 5,
        grsvGroup2RowNo         = 6,
        grsvGroup3RowNo         = 7,
        grsvRowNo               = 8,
        grsvGroupOrderNo        = 9,
        grsvGroup1PageNumber    = 10,
        grsvGroup2PageNumber    = 11,
        grsvGroup3PageNumber    = 12,
        grsvGroup1PageCount     = 13,
        grsvGroup2PageCount     = 14,
        grsvGroup3PageCount     = 15
    };

    enum tagGRTextAlign {
        grtaTopLeft             = 17,
        grtaTopCenter           = 18,
        grtaTopRight            = 20,
        grtaBottomLeft          = 65,
        grtaBottomCenter        = 66,
        grtaBottomRight         = 68,
        grtaMiddleLeft          = 33,
        grtaMiddleCenter        = 34,
        grtaMiddleRight         = 36
    };

    enum tagGRTextEncodeMode {
        grtemAnsi               = 1,
        grtemUTF8               = 2,
        grtemUnicode            = 3
    };

    enum tagGRTextOrientation {
        grtoDefault             = 0,
        grtoU2DL2R0             = 5,
        grtoD2UL2R1             = 22,
        grtoU2DR2L0             = 9,
        grtoU2DR2L1             = 25,
        grtoInvert              = 26
    };

    enum tagGRToolControlType {
        grtctSep                = 1,
        grtctPrint              = 2,
        grtctPageSetup          = 3,
        grtctPrinterSetup       = 4,
        grtctExport             = 5,
        grtctMail               = 6,
        grtctSaveDocument       = 7,
        grtctContinuousPage     = 8,
        grtctSinglePage         = 9,
        grtctMultiPage          = 10,
        grtctZoomIn             = 11,
        grtctZoomOut            = 12,
        grtctZoomPercent        = 13,
        grtctPriorPage          = 14,
        grtctNextPage           = 15,
        grtctFirstPage          = 16,
        grtctLastPage           = 17,
        grtctCurPageNo          = 18,
        grtctClose              = 19,
        grtctClip               = 20,
        grtctRefresh            = 21,
        grtctBookmark           = 22,
        grtctFindTextBox        = 30,
        grtctFind               = 31,
        grtctFindAgain          = 32,
        grtctFindDlg            = 33,
        grtctExportXLS          = 50,
        grtctExportTXT          = 51,
        grtctExportHTM          = 52,
        grtctExportRTF          = 53,
        grtctExportPDF          = 54,
        grtctExportCSV          = 55,
        grtctExportIMG          = 56,
        grtctExportXLSBtn       = 60,
        grtctExportPDFBtn       = 61
    };

    enum tagGRToolControlType2 {
        grdtctSep               = 1,
        grdtctPrint             = 2,
        grdtctPageSetup         = 3,
        grdtctPrinterSetup      = 4,
        grdtctPrintPreview      = 40,
        grdtctPostLayout        = 41,
        grdtctShowPreviewLine   = 42,
        grdtctFindTextBox       = 30,
        grdtctFind              = 31,
        grdtctFindAgain         = 32,
        grdtctFindDlg           = 33,
        grdtctPriorPage         = 14,
        grdtctNextPage          = 15,
        grdtctFirstPage         = 16,
        grdtctLastPage          = 17,
        grdtctCurPageNo         = 18,
        grdtctDividePage        = 25,
        grdtctClip              = 20,
        grdtctExport            = 5,
        grdtctMail              = 6,
        grdtctSaveDocument      = 7,
        grdtctClose             = 19,
        grdtctRefresh           = 21,
        grdtctExportXLS         = 50,
        grdtctExportTXT         = 51,
        grdtctExportHTM         = 52,
        grdtctExportRTF         = 53,
        grdtctExportPDF         = 54,
        grdtctExportCSV         = 55,
        grdtctExportIMG         = 56,
        grdtctExportXLSBtn      = 60,
        grdtctExportPDFBtn      = 61,
        grdtctColumnVisible     = 70
    };

    enum tagGRUnit {
        grmuCm                  = 1,
        grmuInch                = 2
    };

    enum tagGRViewerBorderStyle {
        grvbsFixed3D            = 1,
        grvbsFixedSingle        = 2,
        grvbsNone               = 3
    };

// forward declarations
    enum tagGRControlType;
    enum tagGRAnchorStyle;
    enum tagGRDockStyle;
    enum tagGRCenterStyle;
    enum tagGRBorderStyle;
    enum tagGRAlignColumnSideStyle;
    enum tagGRBackStyle;
    enum tagGRPrintType;
    enum tagGRDisplayCursor;
    enum tagGRTextAlign;
    enum tagGRFieldType;
    enum tagGRChartType;
    enum tagGRShapeBoxType;
    enum tagGRPenStyle;
    enum tagGRLineType;
    enum tagGRSystemVar;
    enum tagGRSummaryFun;
    enum tagGRPictureAlignment;
    enum tagGRPictureSizeMode;
    enum tagGRSystemImage;
    enum tagGRTextOrientation;
    enum tagGRPageColumnDirection;
    enum tagGRColumnPrintAdaptMethod;
    enum tagGRNewPageStyle;
    enum tagGRRepeatStyle;
    enum tagGRPeriodType;
    enum tagGRDetailGridRowType;
    enum tagGRParameterDataType;
    enum tagGRSectionType;
    enum tagGRUnit;
    enum tagGRScriptType;
    enum tagGRStorageFormat;
    enum tagGRTextEncodeMode;
    enum tagGRPaperOrientation;
    enum tagGRPaperSourceKind;
    enum tagGRCollateKind;
    enum tagGRDuplexKind;
    enum tagGRPaperKind;
    enum tagGRPrintRangeType;
    enum tagGRPrintPageType;
    enum tagGRSheetPages;
    enum tagGRReportDisplayMode;
    enum tagGRPrintGenerateStyle;
    enum tagGRExportType;
    enum tagGRExportImageType;
    enum tagGRSharePrintSetupOption;
    enum tagGRBarcodeType;
    enum tagGRStringAlignment;
    enum tagGRBarcodeCaptionPosition;
    enum tagGRBarcodeDirection;
    enum tagGROCGroupHeaderVAlign;
    enum tagGRNewPageColumnStyle;
    enum tagGRGrpKpTogetherStyle;
    enum tagGRViewerBorderStyle;
    enum tagGRPrintViewMode;
    enum tagGRToolControlType;
    enum tagGRPreviewEditMode;
    enum tagGRShiftState;
    enum tagGRMouseButton;
    enum tagGRToolControlType2;
    class IGRGroup;
    class IGRSection;
    class IGRField;
    class IGRTextBox;
    class IGRControl;
    class IGRGraphics;
    class IGRExportOption;
    class IGRPrintViewer;
    class IGRGroupHeader;
    class IGRGroupFooter;
    class IGRDetailGrid;
    class IGRRecordset;
    class IGRFont;
    class IGRControls;
    class IGRChart;
    class IGRStaticBox;
    class IGRShapeBox;
    class IGRSystemVarBox;
    class IGRFieldBox;
    class IGRSummaryBox;
    class IGRPictureBox;
    class IGRRichTextBox;
    class IGRMemoBox;
    class IGRSubReport;
    class IGRLine;
    class IGRBarcode;
    enum tagGRControlType;
    enum tagGRAnchorStyle;
    enum tagGRDockStyle;
    enum tagGRCenterStyle;
    enum tagGRBorderStyle;
    enum tagGRAlignColumnSideStyle;
    enum tagGRBackStyle;
    enum tagGRPrintType;
    enum tagGRDisplayCursor;
    enum tagGRTextAlign;
    enum tagGRFieldType;
    enum tagGRChartType;
    enum tagGRShapeBoxType;
    enum tagGRPenStyle;
    enum tagGRLineType;
    enum tagGRSystemVar;
    enum tagGRSummaryFun;
    class IGRPicture;
    enum tagGRPictureAlignment;
    enum tagGRPictureSizeMode;
    enum tagGRSystemImage;
    enum tagGRTextOrientation;
    class IGridppReport;
    class IGRPageHeader;
    class IGRPageFooter;
    class IGRReportHeader;
    class IGRReportFooter;
    class IGRParameters;
    class IGRSections;
    class IGRPrinter;
    class IGRImageList;
    class IGRColumn;
    class IGRParameter;
    class IGRObject;
    class IGRSharePrintSetupObject;
    class IGRColumnContent;
    class IGRColumnTitle;
    class IGRColumns;
    class IGRGroups;
    class IGRCrossTab;
    class IGRColumnTitleCell;
    class IGRColumnTitleCells;
    enum tagGRPageColumnDirection;
    enum tagGRColumnPrintAdaptMethod;
    enum tagGRNewPageStyle;
    class IGRColumnContentCells;
    class IGRColumnContentCell;
    enum tagGRRepeatStyle;
    class IGRFields;
    enum tagGRPeriodType;
    enum tagGRDetailGridRowType;
    enum tagGRParameterDataType;
    enum tagGRSectionType;
    enum tagGRUnit;
    enum tagGRScriptType;
    enum tagGRStorageFormat;
    enum tagGRTextEncodeMode;
    enum tagGRPaperOrientation;
    enum tagGRPaperSourceKind;
    enum tagGRCollateKind;
    enum tagGRDuplexKind;
    enum tagGRPaperKind;
    enum tagGRPrintRangeType;
    enum tagGRPrintPageType;
    enum tagGRSheetPages;
    enum tagGRReportDisplayMode;
    enum tagGRPrintGenerateStyle;
    enum tagGRExportType;
    class IGRE2XLSOption;
    class IGRE2TXTOption;
    class IGRE2HTMOption;
    class IGRE2RTFOption;
    class IGRE2PDFOption;
    class IGRE2CSVOption;
    class IGRE2IMGOption;
    enum tagGRExportImageType;
    enum tagGRSharePrintSetupOption;
    enum tagGRBarcodeType;
    enum tagGRStringAlignment;
    enum tagGRBarcodeCaptionPosition;
    enum tagGRBarcodeDirection;
    enum tagGROCGroupHeaderVAlign;
    enum tagGRNewPageColumnStyle;
    enum tagGRGrpKpTogetherStyle;
    enum tagGRViewerBorderStyle;
    enum tagGRPrintViewMode;
    enum tagGRToolControlType;
    enum tagGRPreviewEditMode;
    enum tagGRShiftState;
    enum tagGRMouseButton;
    enum tagGRToolControlType2;

// skipping event interface _IGridppReportEvents

class GRPROLIB_EXPORT IGRGroup : public QAxObject
{
public:
    IGRGroup(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ByFields

    property ByFields

    */
    inline QString ByFields() const; //Returns the value of ByFields
    inline void SetByFields(const QString& value); //Sets the value of the ByFields property

    /*
    Property Footer

    property GroupFooter

    */
    inline grproLib::IGRGroupFooter* Footer() const; //Returns the value of Footer

    /*
    Property GroupBeginScript

    property GroupBeginScript

    */
    inline QString GroupBeginScript() const; //Returns the value of GroupBeginScript
    inline void SetGroupBeginScript(const QString& value); //Sets the value of the GroupBeginScript property

    /*
    Property GroupEndScript

    property GroupEndScript

    */
    inline QString GroupEndScript() const; //Returns the value of GroupEndScript
    inline void SetGroupEndScript(const QString& value); //Sets the value of the GroupEndScript property

    /*
    Property Header

    property GroupHeader

    */
    inline grproLib::IGRGroupHeader* Header() const; //Returns the value of Header

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property PageGroup

    property PageGroup

    */
    inline bool PageGroup() const; //Returns the value of PageGroup
    inline void SetPageGroup(bool value); //Sets the value of the PageGroup property

    /*
    Property Parent

    property Parent

    */
    inline grproLib::IGRDetailGrid* Parent() const; //Returns the value of Parent

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property _Dataset

    property _Dataset

    */
    inline grproLib::IGRRecordset* _Dataset() const; //Returns the value of _Dataset

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _BeginOneGroup

    method _BeginOneGroup

    */
    inline void _BeginOneGroup();

    /*
    Method _EndOneGroup

    method _EndOneGroup

    */
    inline void _EndOneGroup();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _ProcessGroupRecord

    method _ProcessGroupRecord

    */
    inline void _ProcessGroupRecord();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRObject : public QAxObject
{
public:
    IGRObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRGroupHeader : public QAxObject
{
public:
    IGRGroupHeader(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Group

    property Group

    */
    inline grproLib::IGRGroup* Group() const; //Returns the value of Group

    /*
    Property GroupKeepTogether

    property GroupKeepTogether

    */
    inline grproLib::tagGRGrpKpTogetherStyle GroupKeepTogether() const; //Returns the value of GroupKeepTogether
    inline void SetGroupKeepTogether(grproLib::tagGRGrpKpTogetherStyle value); //Sets the value of the GroupKeepTogether property

    /*
    Property HNewPageFixed

    property HNewPageFixed

    */
    inline bool HNewPageFixed() const; //Returns the value of HNewPageFixed
    inline void SetHNewPageFixed(bool value); //Sets the value of the HNewPageFixed property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property IncludeFooter

    property IncludeFooter

    */
    inline bool IncludeFooter() const; //Returns the value of IncludeFooter
    inline void SetIncludeFooter(bool value); //Sets the value of the IncludeFooter property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NewPage

    property NewPage

    */
    inline grproLib::tagGRNewPageStyle NewPage() const; //Returns the value of NewPage
    inline void SetNewPage(grproLib::tagGRNewPageStyle value); //Sets the value of the NewPage property

    /*
    Property NewPageColumn

    property NewPageColumn

    */
    inline grproLib::tagGRNewPageColumnStyle NewPageColumn() const; //Returns the value of NewPageColumn
    inline void SetNewPageColumn(grproLib::tagGRNewPageColumnStyle value); //Sets the value of the NewPageColumn property

    /*
    Property OccupiedColumns

    property OccupiedColumns

    */
    inline QString OccupiedColumns() const; //Returns the value of OccupiedColumns
    inline void SetOccupiedColumns(const QString& value); //Sets the value of the OccupiedColumns property

    /*
    Property OccupyColumn

    property OccupyColumn

    */
    inline bool OccupyColumn() const; //Returns the value of OccupyColumn
    inline void SetOccupyColumn(bool value); //Sets the value of the OccupyColumn property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintGridBorder

    property PrintGridBorder

    */
    inline bool PrintGridBorder() const; //Returns the value of PrintGridBorder
    inline void SetPrintGridBorder(bool value); //Sets the value of the PrintGridBorder property

    /*
    Property RepeatOnPage

    property RepeatOnPage

    */
    inline bool RepeatOnPage() const; //Returns the value of RepeatOnPage
    inline void SetRepeatOnPage(bool value); //Sets the value of the RepeatOnPage property

    /*
    Property SameAsColumn

    property SameAsColumn

    */
    inline bool SameAsColumn() const; //Returns the value of SameAsColumn
    inline void SetSameAsColumn(bool value); //Sets the value of the SameAsColumn property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property VAlign

    property VAlign

    */
    inline grproLib::tagGROCGroupHeaderVAlign VAlign() const; //Returns the value of VAlign
    inline void SetVAlign(grproLib::tagGROCGroupHeaderVAlign value); //Sets the value of the VAlign property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRGroupSection : public QAxObject
{
public:
    IGRGroupSection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Group

    property Group

    */
    inline grproLib::IGRGroup* Group() const; //Returns the value of Group

    /*
    Property HNewPageFixed

    property HNewPageFixed

    */
    inline bool HNewPageFixed() const; //Returns the value of HNewPageFixed
    inline void SetHNewPageFixed(bool value); //Sets the value of the HNewPageFixed property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NewPage

    property NewPage

    */
    inline grproLib::tagGRNewPageStyle NewPage() const; //Returns the value of NewPage
    inline void SetNewPage(grproLib::tagGRNewPageStyle value); //Sets the value of the NewPage property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintGridBorder

    property PrintGridBorder

    */
    inline bool PrintGridBorder() const; //Returns the value of PrintGridBorder
    inline void SetPrintGridBorder(bool value); //Sets the value of the PrintGridBorder property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRSection : public QAxObject
{
public:
    IGRSection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRFont : public QAxObject
{
public:
    IGRFont(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Bold

    property Bold

    */
    inline bool Bold() const; //Returns the value of Bold
    inline void SetBold(bool value); //Sets the value of the Bold property

    /*
    Property Charset

    property Charset

    */
    inline int Charset() const; //Returns the value of Charset
    inline void SetCharset(int value); //Sets the value of the Charset property

    /*
    Property Italic

    property Italic

    */
    inline bool Italic() const; //Returns the value of Italic
    inline void SetItalic(bool value); //Sets the value of the Italic property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property OleFont

    property OleFont

    */
    inline QFont OleFont() const; //Returns the value of OleFont
    inline void SetOleFont(const QFont& value); //Sets the value of the OleFont property

    /*
    Property Point

    property Point

    */
    inline double Point() const; //Returns the value of Point
    inline void SetPoint(double value); //Sets the value of the Point property

    /*
    Property Strikethrough

    property Strikethrough

    */
    inline bool Strikethrough() const; //Returns the value of Strikethrough
    inline void SetStrikethrough(bool value); //Sets the value of the Strikethrough property

    /*
    Property Underline

    property Underline

    */
    inline bool Underline() const; //Returns the value of Underline
    inline void SetUnderline(bool value); //Sets the value of the Underline property

    /*
    Property UsingOleFont

    property UsingFont

    */
    inline QFont UsingOleFont() const; //Returns the value of UsingOleFont

    /*
    Property Weight

    property Weight

    */
    inline int Weight() const; //Returns the value of Weight
    inline void SetWeight(int value); //Sets the value of the Weight property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRControls : public QAxObject
{
public:
    IGRControls(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    method Add

    */
    inline grproLib::IGRControl* Add(grproLib::tagGRControlType ControlType);

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRControl* Item(const QVariant& Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(const QVariant& Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

    /*
    Method SetItemOrder

    method SetItemOrder

    */
    inline void SetItemOrder(const QVariant& Index, int OrderNo);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRControl : public QAxObject
{
public:
    IGRControl(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRTextBox : public QAxObject
{
public:
    IGRTextBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextAlign

    property text TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _ExportXlsFormat

    property _ExportXlsFormat

    */
    inline QString _ExportXlsFormat() const; //Returns the value of _ExportXlsFormat

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _CalcFullViewWidth
    */
    inline void _CalcFullViewWidth(int& NewWidth);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportData

    method _FetchExportData

    */
    inline void _FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _HasGetDisplayTextScript
    */
    inline void _HasGetDisplayTextScript();

    /*
    Method _HopeSize
    */
    inline void _HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRChart : public QAxObject
{
public:
    IGRChart(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BarSingleSeriesColor

    property BarSingleSeriesColor

    */
    inline bool BarSingleSeriesColor() const; //Returns the value of BarSingleSeriesColor
    inline void SetBarSingleSeriesColor(bool value); //Sets the value of the BarSingleSeriesColor property

    /*
    Property BarWidthPercent

    property BarWidthPercent

    */
    inline int BarWidthPercent() const; //Returns the value of BarWidthPercent
    inline void SetBarWidthPercent(int value); //Sets the value of the BarWidthPercent property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property BubbleScalePerCm

    property BubbleScalePerCm

    */
    inline double BubbleScalePerCm() const; //Returns the value of BubbleScalePerCm
    inline void SetBubbleScalePerCm(double value); //Sets the value of the BubbleScalePerCm property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property Chart3D

    property Chart3D

    */
    inline bool Chart3D() const; //Returns the value of Chart3D
    inline void SetChart3D(bool value); //Sets the value of the Chart3D property

    /*
    Property ChartType

    property ChartType

    */
    inline grproLib::tagGRChartType ChartType() const; //Returns the value of ChartType
    inline void SetChartType(grproLib::tagGRChartType value); //Sets the value of the ChartType property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property CoordLineColor

    property CoordLineColor

    */
    inline QColor CoordLineColor() const; //Returns the value of CoordLineColor
    inline void SetCoordLineColor(const QColor& value); //Sets the value of the CoordLineColor property

    /*
    Property CoordLineVisible

    property CoordLineVisible

    */
    inline bool CoordLineVisible() const; //Returns the value of CoordLineVisible
    inline void SetCoordLineVisible(bool value); //Sets the value of the CoordLineVisible property

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property FillColorCount

    property FillColorCount

    */
    inline int FillColorCount() const; //Returns the value of FillColorCount

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property GroupCount

    property GroupCount

    */
    inline int GroupCount() const; //Returns the value of GroupCount
    inline void SetGroupCount(int value); //Sets the value of the GroupCount property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property LegendCursor

    property LegendCursor

    */
    inline grproLib::tagGRDisplayCursor LegendCursor() const; //Returns the value of LegendCursor
    inline void SetLegendCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the LegendCursor property

    /*
    Property LegendShowSum

    property LegendShowSum

    */
    inline bool LegendShowSum() const; //Returns the value of LegendShowSum
    inline void SetLegendShowSum(bool value); //Sets the value of the LegendShowSum property

    /*
    Property LegendValueVisible

    property LegendValueVisible

    */
    inline bool LegendValueVisible() const; //Returns the value of LegendValueVisible
    inline void SetLegendValueVisible(bool value); //Sets the value of the LegendValueVisible property

    /*
    Property LegendVisible

    property LegendVisible

    */
    inline bool LegendVisible() const; //Returns the value of LegendVisible
    inline void SetLegendVisible(bool value); //Sets the value of the LegendVisible property

    /*
    Property LineWeight

    property LineWeight

    */
    inline int LineWeight() const; //Returns the value of LineWeight
    inline void SetLineWeight(int value); //Sets the value of the LineWeight property

    /*
    Property MarginGap

    property MarginGap

    */
    inline int MarginGap() const; //Returns the value of MarginGap
    inline void SetMarginGap(int value); //Sets the value of the MarginGap property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PointWeight

    property PointWeight

    */
    inline int PointWeight() const; //Returns the value of PointWeight
    inline void SetPointWeight(int value); //Sets the value of the PointWeight property

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property SeriesCount

    property SeriesCount

    */
    inline int SeriesCount() const; //Returns the value of SeriesCount
    inline void SetSeriesCount(int value); //Sets the value of the SeriesCount property

    /*
    Property SeriesCursor

    property SeriesCursor

    */
    inline grproLib::tagGRDisplayCursor SeriesCursor() const; //Returns the value of SeriesCursor
    inline void SetSeriesCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the SeriesCursor property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Title

    property Title

    */
    inline QString Title() const; //Returns the value of Title
    inline void SetTitle(const QString& value); //Sets the value of the Title property

    /*
    Property TitleFont

    property TitleFont

    */
    inline grproLib::IGRFont* TitleFont() const; //Returns the value of TitleFont

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property ValueAsPercent

    property ValueAsPercent

    */
    inline bool ValueAsPercent() const; //Returns the value of ValueAsPercent
    inline void SetValueAsPercent(bool value); //Sets the value of the ValueAsPercent property

    /*
    Property ValueFormat

    property ValueFormat

    */
    inline QString ValueFormat() const; //Returns the value of ValueFormat
    inline void SetValueFormat(const QString& value); //Sets the value of the ValueFormat property

    /*
    Property ValueVisible

    property ValueVisible

    */
    inline bool ValueVisible() const; //Returns the value of ValueVisible
    inline void SetValueVisible(bool value); //Sets the value of the ValueVisible property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property XAxisLabel

    property XAxisLabel

    */
    inline QString XAxisLabel() const; //Returns the value of XAxisLabel
    inline void SetXAxisLabel(const QString& value); //Sets the value of the XAxisLabel property

    /*
    Property XAxisMaximum

    property XAxisMaximum

    */
    inline double XAxisMaximum() const; //Returns the value of XAxisMaximum
    inline void SetXAxisMaximum(double value); //Sets the value of the XAxisMaximum property

    /*
    Property XAxisMinimum

    property XAxisMinimum

    */
    inline double XAxisMinimum() const; //Returns the value of XAxisMinimum
    inline void SetXAxisMinimum(double value); //Sets the value of the XAxisMinimum property

    /*
    Property XAxisSpace

    property XAxisSpace

    */
    inline double XAxisSpace() const; //Returns the value of XAxisSpace
    inline void SetXAxisSpace(double value); //Sets the value of the XAxisSpace property

    /*
    Property XAxisTextAngle

    property XAxisTextAngle

    */
    inline int XAxisTextAngle() const; //Returns the value of XAxisTextAngle
    inline void SetXAxisTextAngle(int value); //Sets the value of the XAxisTextAngle property

    /*
    Property XAxisTextCount

    property XAxisTextCount

    */
    inline int XAxisTextCount() const; //Returns the value of XAxisTextCount

    /*
    Property XAxisTextFormat

    property XAxisTextFormat

    */
    inline QString XAxisTextFormat() const; //Returns the value of XAxisTextFormat
    inline void SetXAxisTextFormat(const QString& value); //Sets the value of the XAxisTextFormat property

    /*
    Property XAxisTextVisible

    property XAxisTextVisible

    */
    inline bool XAxisTextVisible() const; //Returns the value of XAxisTextVisible
    inline void SetXAxisTextVisible(bool value); //Sets the value of the XAxisTextVisible property

    /*
    Property XAxisVisible

    property XAxisVisible

    */
    inline bool XAxisVisible() const; //Returns the value of XAxisVisible
    inline void SetXAxisVisible(bool value); //Sets the value of the XAxisVisible property

    /*
    Property YAxisLabel

    property YAxisLabel

    */
    inline QString YAxisLabel() const; //Returns the value of YAxisLabel
    inline void SetYAxisLabel(const QString& value); //Sets the value of the YAxisLabel property

    /*
    Property YAxisMaximum

    property YAxisMaximum

    */
    inline double YAxisMaximum() const; //Returns the value of YAxisMaximum
    inline void SetYAxisMaximum(double value); //Sets the value of the YAxisMaximum property

    /*
    Property YAxisMinimum

    property YAxisMinimum

    */
    inline double YAxisMinimum() const; //Returns the value of YAxisMinimum
    inline void SetYAxisMinimum(double value); //Sets the value of the YAxisMinimum property

    /*
    Property YAxisSpace

    property YAxisSpace

    */
    inline double YAxisSpace() const; //Returns the value of YAxisSpace
    inline void SetYAxisSpace(double value); //Sets the value of the YAxisSpace property

    /*
    Property YAxisTextCount

    property YAxisTextCount

    */
    inline int YAxisTextCount() const; //Returns the value of YAxisTextCount

    /*
    Property YAxisTextFormat

    property YAxisTextFormat

    */
    inline QString YAxisTextFormat() const; //Returns the value of YAxisTextFormat
    inline void SetYAxisTextFormat(const QString& value); //Sets the value of the YAxisTextFormat property

    /*
    Property YAxisTextVisible

    property YAxisTextVisible

    */
    inline bool YAxisTextVisible() const; //Returns the value of YAxisTextVisible
    inline void SetYAxisTextVisible(bool value); //Sets the value of the YAxisTextVisible property

    /*
    Property YAxisVisible

    property YAxisVisible

    */
    inline bool YAxisVisible() const; //Returns the value of YAxisVisible
    inline void SetYAxisVisible(bool value); //Sets the value of the YAxisVisible property

    /*
    Property ZValueFormat

    property ZValueFormat

    */
    inline QString ZValueFormat() const; //Returns the value of ZValueFormat
    inline void SetZValueFormat(const QString& value); //Sets the value of the ZValueFormat property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _LegendCursorHandle

    property _LegendCursorHandle

    */
    inline int _LegendCursorHandle() const; //Returns the value of _LegendCursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Property _SeriesCursorHandle

    property _SeriesCursorHandle

    */
    inline int _SeriesCursorHandle() const; //Returns the value of _SeriesCursorHandle

    /*
    Method AddFillColor

    method AddFillColor

    */
    inline void AddFillColor(const QColor& FillColor);

    /*
    Method AddXAxisText

    method AddXAxisText

    */
    inline void AddXAxisText(double PosVal, const QString& Text);

    /*
    Method AddXYValue

    method AddXYValue

    */
    inline void AddXYValue(int SeriesIndex, double XVal, double YVal);

    /*
    Method AddXYZValue

    method AddXYZValue

    */
    inline void AddXYZValue(int SeriesIndex, double XVal, double YVal, double ZVal);

    /*
    Method AddYAxisText

    method AddYAxisText

    */
    inline void AddYAxisText(double PosVal, const QString& Text);

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method EmptyFillColors

    method EmptyFillColors

    */
    inline void EmptyFillColors();

    /*
    Method EmptyXAxisText

    method EmptyXAxisTexts

    */
    inline void EmptyXAxisText();

    /*
    Method EmptyXYValue

    method EmptyXYValues

    */
    inline void EmptyXYValue();

    /*
    Method EmptyXYZValue

    method EmptyXYZValues

    */
    inline void EmptyXYZValue();

    /*
    Method EmptyYAxisText

    method EmptyYAxisTexts

    */
    inline void EmptyYAxisText();

    /*
    Method FillColor

    property FillColor

    */
    inline QColor FillColor(int Index);

    /*
    Method GetXYValue

    method GetXYValue

    */
    inline void GetXYValue(int SeriesIndex, int Index, double& pXVal, double& pYVal);

    /*
    Method GetXYZValue

    method GetXYZValue

    */
    inline void GetXYZValue(int SeriesIndex, int Index, double& pXVal, double& pYVal, double& pZVal);

    /*
    Method GroupLabel

    property GroupLabel

    */
    inline QString GroupLabel(int GroupIndex);

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method LoadDataFromXML

    method LoadDataFromXML

    */
    inline bool LoadDataFromXML(const QString& XML, bool FirstSeries, bool AutoSeries, bool AutoGroup);

    /*
    Method LoadXYDataFromXML

    method LoadXYDataFromXML

    */
    inline bool LoadXYDataFromXML(const QString& XML, bool AutoSeries);

    /*
    Method LoadXYZDataFromXML

    method LoadXYZDataFromXML

    */
    inline bool LoadXYZDataFromXML(const QString& XML, bool AutoSeries);

    /*
    Method PrepareSnapShot

    method PrepareSnapShot

    */
    inline void PrepareSnapShot();

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SeriesLabel

    property SeriesLabel

    */
    inline QString SeriesLabel(int SeriesIndex);

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method SetGroupLabel
    */
    inline void SetGroupLabel(int GroupIndex, const QString& rhs);

    /*
    Method SetSeriesLabel
    */
    inline void SetSeriesLabel(int SeriesIndex, const QString& rhs);

    /*
    Method SetValue
    */
    inline void SetValue(int SeriesIndex, int GroupIndex, double rhs);

    /*
    Method SnapShot

    method SnapShot

    */
    inline void SnapShot();

    /*
    Method Value

    property Value

    */
    inline double Value(int SeriesIndex, int GroupIndex);

    /*
    Method XAxisText

    property XAxisText

    */
    inline QString XAxisText(int Index);

    /*
    Method XYValueCount

    property XYValueCount

    */
    inline int XYValueCount(int SeriesIndex);

    /*
    Method XYZValueCount

    property XYZValueCount

    */
    inline int XYZValueCount(int SeriesIndex);

    /*
    Method YAxisText

    property YAxisText

    */
    inline QString YAxisText(int Index);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRStaticBox : public QAxObject
{
public:
    IGRStaticBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parameter

    property Parameter

    */
    inline QString Parameter() const; //Returns the value of Parameter
    inline void SetParameter(const QString& value); //Sets the value of the Parameter property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Text

    property Text

    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextAlign

    property text TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _ExportXlsFormat

    property _ExportXlsFormat

    */
    inline QString _ExportXlsFormat() const; //Returns the value of _ExportXlsFormat

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _CalcFullViewWidth
    */
    inline void _CalcFullViewWidth(int& NewWidth);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportData

    method _FetchExportData

    */
    inline void _FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _HasGetDisplayTextScript
    */
    inline void _HasGetDisplayTextScript();

    /*
    Method _HopeSize
    */
    inline void _HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRShapeBox : public QAxObject
{
public:
    IGRShapeBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property CornerDx

    property RoundRectCornerDx

    */
    inline int CornerDx() const; //Returns the value of CornerDx
    inline void SetCornerDx(int value); //Sets the value of the CornerDx property

    /*
    Property CornerDy

    property RoundRectCornerDy

    */
    inline int CornerDy() const; //Returns the value of CornerDy
    inline void SetCornerDy(int value); //Sets the value of the CornerDy property

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property FillColor

    property FillColor

    */
    inline QColor FillColor() const; //Returns the value of FillColor
    inline void SetFillColor(const QColor& value); //Sets the value of the FillColor property

    /*
    Property FillStyle

    property FillStyle

    */
    inline grproLib::tagGRBackStyle FillStyle() const; //Returns the value of FillStyle
    inline void SetFillStyle(grproLib::tagGRBackStyle value); //Sets the value of the FillStyle property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property LineType

    property LineStyle

    */
    inline grproLib::tagGRLineType LineType() const; //Returns the value of LineType
    inline void SetLineType(grproLib::tagGRLineType value); //Sets the value of the LineType property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PenColor

    property PenColor

    */
    inline QColor PenColor() const; //Returns the value of PenColor
    inline void SetPenColor(const QColor& value); //Sets the value of the PenColor property

    /*
    Property PenStyle

    property PenStyle

    */
    inline grproLib::tagGRPenStyle PenStyle() const; //Returns the value of PenStyle
    inline void SetPenStyle(grproLib::tagGRPenStyle value); //Sets the value of the PenStyle property

    /*
    Property PenWidth

    property PenWidth

    */
    inline double PenWidth() const; //Returns the value of PenWidth
    inline void SetPenWidth(double value); //Sets the value of the PenWidth property

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShapeType

    property ShapeType

    */
    inline grproLib::tagGRShapeBoxType ShapeType() const; //Returns the value of ShapeType
    inline void SetShapeType(grproLib::tagGRShapeBoxType value); //Sets the value of the ShapeType property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRSystemVarBox : public QAxObject
{
public:
    IGRSystemVarBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Format

    property Format

    */
    inline QString Format() const; //Returns the value of Format
    inline void SetFormat(const QString& value); //Sets the value of the Format property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property SystemVar

    property SystemVar

    */
    inline grproLib::tagGRSystemVar SystemVar() const; //Returns the value of SystemVar
    inline void SetSystemVar(grproLib::tagGRSystemVar value); //Sets the value of the SystemVar property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextAlign

    property text TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _ExportXlsFormat

    property _ExportXlsFormat

    */
    inline QString _ExportXlsFormat() const; //Returns the value of _ExportXlsFormat

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _CalcFullViewWidth
    */
    inline void _CalcFullViewWidth(int& NewWidth);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportData

    method _FetchExportData

    */
    inline void _FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _HasGetDisplayTextScript
    */
    inline void _HasGetDisplayTextScript();

    /*
    Method _HopeSize
    */
    inline void _HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRFieldBox : public QAxObject
{
public:
    IGRFieldBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DataField

    property DataField

    */
    inline QString DataField() const; //Returns the value of DataField
    inline void SetDataField(const QString& value); //Sets the value of the DataField property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextAlign

    property text TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _ExportXlsFormat

    property _ExportXlsFormat

    */
    inline QString _ExportXlsFormat() const; //Returns the value of _ExportXlsFormat

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _CalcFullViewWidth
    */
    inline void _CalcFullViewWidth(int& NewWidth);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportData

    method _FetchExportData

    */
    inline void _FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _HasGetDisplayTextScript
    */
    inline void _HasGetDisplayTextScript();

    /*
    Method _HopeSize
    */
    inline void _HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRSummaryBox : public QAxObject
{
public:
    IGRSummaryBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ConditionScript

    property ConditionScript

    */
    inline QString ConditionScript() const; //Returns the value of ConditionScript
    inline void SetConditionScript(const QString& value); //Sets the value of the ConditionScript property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DataField

    property DataField

    */
    inline QString DataField() const; //Returns the value of DataField
    inline void SetDataField(const QString& value); //Sets the value of the DataField property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Format

    property Format

    */
    inline QString Format() const; //Returns the value of Format
    inline void SetFormat(const QString& value); //Sets the value of the Format property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property RankNo

    property RankNo

    */
    inline int RankNo() const; //Returns the value of RankNo
    inline void SetRankNo(int value); //Sets the value of the RankNo property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property SummaryFun

    property SummaryFun

    */
    inline grproLib::tagGRSummaryFun SummaryFun() const; //Returns the value of SummaryFun
    inline void SetSummaryFun(grproLib::tagGRSummaryFun value); //Sets the value of the SummaryFun property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextAlign

    property text TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Value

    property Value

    */
    inline double Value() const; //Returns the value of Value
    inline void SetValue(double value); //Sets the value of the Value property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _ExportXlsFormat

    property _ExportXlsFormat

    */
    inline QString _ExportXlsFormat() const; //Returns the value of _ExportXlsFormat

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _CalcFullViewWidth
    */
    inline void _CalcFullViewWidth(int& NewWidth);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportData

    method _FetchExportData

    */
    inline void _FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _HasGetDisplayTextScript
    */
    inline void _HasGetDisplayTextScript();

    /*
    Method _HopeSize
    */
    inline void _HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRPictureBox : public QAxObject
{
public:
    IGRPictureBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Alignment

    property Alignment

    */
    inline grproLib::tagGRPictureAlignment Alignment() const; //Returns the value of Alignment
    inline void SetAlignment(grproLib::tagGRPictureAlignment value); //Sets the value of the Alignment property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DataField

    property DataField

    */
    inline QString DataField() const; //Returns the value of DataField
    inline void SetDataField(const QString& value); //Sets the value of the DataField property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property ImageFile

    property ImageFile

    */
    inline QString ImageFile() const; //Returns the value of ImageFile
    inline void SetImageFile(const QString& value); //Sets the value of the ImageFile property

    /*
    Property ImageIndex

    property ImageIndex

    */
    inline int ImageIndex() const; //Returns the value of ImageIndex
    inline void SetImageIndex(int value); //Sets the value of the ImageIndex property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property Picture

    property Picture

    */
    inline stdole::IPicture* Picture() const; //Returns the value of Picture
    inline void SetPicture(stdole::IPicture* value); //Sets the value of the Picture property

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property RotateAngle

    property RotateAngle

    */
    inline double RotateAngle() const; //Returns the value of RotateAngle
    inline void SetRotateAngle(double value); //Sets the value of the RotateAngle property

    /*
    Property SizeMode

    property SizeMode

    */
    inline grproLib::tagGRPictureSizeMode SizeMode() const; //Returns the value of SizeMode
    inline void SetSizeMode(grproLib::tagGRPictureSizeMode value); //Sets the value of the SizeMode property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Transparent

    property Transparent

    */
    inline bool Transparent() const; //Returns the value of Transparent
    inline void SetTransparent(bool value); //Sets the value of the Transparent property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _GRPicture
    */
    inline grproLib::IGRPicture* _GRPicture() const; //Returns the value of _GRPicture
    inline void set_GRPicture(grproLib::IGRPicture* value); //Sets the value of the _GRPicture property

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method AttachSystemImage

    method AttachSystemImage

    */
    inline void AttachSystemImage(grproLib::tagGRSystemImage SystemImage);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadBmpPicture

    method LoadBmpPicture

    */
    inline void LoadBmpPicture(stdole::IPicture* newVal);

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method LoadFromFile

    method LoadFromFile

    */
    inline void LoadFromFile(const QString& PathFile);

    /*
    Method LoadFromMemory

    method LoadFromMemory

    */
    inline void LoadFromMemory(uint& pBuffer, int BytesCount);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _RuntimePicture

    property _RuntimePicture

    */
    inline stdole::IPicture* _RuntimePicture(bool& pIsBmp);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRPicture : public QAxObject
{
public:
    IGRPicture(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Height

    property Height

    */
    inline int Height() const; //Returns the value of Height

    /*
    Property OlePicture

    property OlePicture

    */
    inline stdole::IPicture* OlePicture() const; //Returns the value of OlePicture
    inline void SetOlePicture(stdole::IPicture* value); //Sets the value of the OlePicture property

    /*
    Property Type

    property Type

    */
    inline int Type() const; //Returns the value of Type

    /*
    Property Width

    property Width

    */
    inline int Width() const; //Returns the value of Width

    /*
    Method LoadFromMemory

    method LoadFromMemory

    */
    inline void LoadFromMemory(uint& pData, int ByteCount);

    /*
    Method Render

    method Render

    */
    inline void Render(int hdc, int Left, int Top, int Width, int Height, grproLib::tagGRPictureAlignment PictureAlignment, grproLib::tagGRPictureSizeMode PictureSizeMode, uint BackColor, bool FillBack, bool Transparent);

    /*
    Method SaveToMemory

    method SaveToMemory

    */
    inline void SaveToMemory(int*& ppData, int& pBytesCount);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRRichTextBox : public QAxObject
{
public:
    IGRRichTextBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DataField

    property DataField

    */
    inline QString DataField() const; //Returns the value of DataField
    inline void SetDataField(const QString& value); //Sets the value of the DataField property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property RTF

    property RTF

    */
    inline QString RTF() const; //Returns the value of RTF
    inline void SetRTF(const QString& value); //Sets the value of the RTF property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method LoadFromFile

    method LoadFromFile

    */
    inline void LoadFromFile(const QString& PathFile);

    /*
    Method LoadFromMemory

    method LoadFromMemory

    */
    inline void LoadFromMemory(uint& pBuffer, int BytesCount);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportText

    method  _FetchExportText

    */
    inline void _FetchExportText(QString& pExportText);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _Prepare

    method _Prepare

    */
    inline void _Prepare();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRMemoBox : public QAxObject
{
public:
    IGRMemoBox(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property CharacterSpacing

    property CharacterSpacing

    */
    inline int CharacterSpacing() const; //Returns the value of CharacterSpacing
    inline void SetCharacterSpacing(int value); //Sets the value of the CharacterSpacing property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property FlowTo

    property FlowTo

    */
    inline QString FlowTo() const; //Returns the value of FlowTo
    inline void SetFlowTo(const QString& value); //Sets the value of the FlowTo property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HtmlTags

    property HtmlTags

    */
    inline bool HtmlTags() const; //Returns the value of HtmlTags
    inline void SetHtmlTags(bool value); //Sets the value of the HtmlTags property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property LineSpacing

    property LineSpacing

    */
    inline int LineSpacing() const; //Returns the value of LineSpacing
    inline void SetLineSpacing(int value); //Sets the value of the LineSpacing property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Text

    property Text

    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextAlign

    property text TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property TextAngle

    property TextAngle

    */
    inline int TextAngle() const; //Returns the value of TextAngle
    inline void SetTextAngle(int value); //Sets the value of the TextAngle property

    /*
    Property TextOrientation

    property TextOrientation

    */
    inline grproLib::tagGRTextOrientation TextOrientation() const; //Returns the value of TextOrientation
    inline void SetTextOrientation(grproLib::tagGRTextOrientation value); //Sets the value of the TextOrientation property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _ExportXlsFormat

    property _ExportXlsFormat

    */
    inline QString _ExportXlsFormat() const; //Returns the value of _ExportXlsFormat

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _CalcFullViewWidth
    */
    inline void _CalcFullViewWidth(int& NewWidth);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _FetchExportData

    method _FetchExportData

    */
    inline void _FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _HasGetDisplayTextScript
    */
    inline void _HasGetDisplayTextScript();

    /*
    Method _HopeSize
    */
    inline void _HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRSubReport : public QAxObject
{
public:
    IGRSubReport(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property ParentPageSettings

    property ParentPageSettings

    */
    inline bool ParentPageSettings() const; //Returns the value of ParentPageSettings
    inline void SetParentPageSettings(bool value); //Sets the value of the ParentPageSettings property

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property Report

    property Report

    */
    inline grproLib::IGridppReport* Report() const; //Returns the value of Report
    inline void SetReport(grproLib::IGridppReport* value); //Sets the value of the Report property

    /*
    Property ReportFile

    property ReportFile

    */
    inline QString ReportFile() const; //Returns the value of ReportFile
    inline void SetReportFile(const QString& value); //Sets the value of the ReportFile property

    /*
    Property ResetPageNumber

    property ResetPageNumber

    */
    inline bool ResetPageNumber() const; //Returns the value of ResetPageNumber
    inline void SetResetPageNumber(bool value); //Sets the value of the ResetPageNumber property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property ToNewExcelSheet

    property ToNewExcelSheet

    */
    inline bool ToNewExcelSheet() const; //Returns the value of ToNewExcelSheet
    inline void SetToNewExcelSheet(bool value); //Sets the value of the ToNewExcelSheet property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _ResetSaveFlag
    */
    inline void _ResetSaveFlag();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGridppReport : public QAxObject
{
public:
    IGridppReport(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignToGrid

    property AlignToGrid

    */
    inline bool AlignToGrid() const; //Returns the value of AlignToGrid
    inline void SetAlignToGrid(bool value); //Sets the value of the AlignToGrid property

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackImage

    property BackImage

    */
    inline stdole::IPicture* BackImage() const; //Returns the value of BackImage
    inline void SetBackImage(stdole::IPicture* value); //Sets the value of the BackImage property

    /*
    Property BackImageFile

    property BackImageFile

    */
    inline QString BackImageFile() const; //Returns the value of BackImageFile
    inline void SetBackImageFile(const QString& value); //Sets the value of the BackImageFile property

    /*
    Property BackImagePreview

    property BackImagePreview

    */
    inline bool BackImagePreview() const; //Returns the value of BackImagePreview
    inline void SetBackImagePreview(bool value); //Sets the value of the BackImagePreview property

    /*
    Property BackImagePrint

    property BackImagePrint

    */
    inline bool BackImagePrint() const; //Returns the value of BackImagePrint
    inline void SetBackImagePrint(bool value); //Sets the value of the BackImagePrint property

    /*
    Property BeforeSortScript

    property BeforeSortScript

    */
    inline QString BeforeSortScript() const; //Returns the value of BeforeSortScript
    inline void SetBeforeSortScript(const QString& value); //Sets the value of the BeforeSortScript property

    /*
    Property ConnectionString

    property ConnectionString

    */
    inline QString ConnectionString() const; //Returns the value of ConnectionString
    inline void SetConnectionString(const QString& value); //Sets the value of the ConnectionString property

    /*
    Property ContinuePrint

    property ContinuePrint

    */
    inline bool ContinuePrint() const; //Returns the value of ContinuePrint
    inline void SetContinuePrint(bool value); //Sets the value of the ContinuePrint property

    /*
    Property DesignBottomMargin

    property DesignBottomMargin

    */
    inline double DesignBottomMargin() const; //Returns the value of DesignBottomMargin
    inline void SetDesignBottomMargin(double value); //Sets the value of the DesignBottomMargin property

    /*
    Property DesignLeftMargin

    property DesignLeftMargin

    */
    inline double DesignLeftMargin() const; //Returns the value of DesignLeftMargin
    inline void SetDesignLeftMargin(double value); //Sets the value of the DesignLeftMargin property

    /*
    Property DesignPaperKind

    property DesignPaperKind

    */
    inline grproLib::tagGRPaperKind DesignPaperKind() const; //Returns the value of DesignPaperKind
    inline void SetDesignPaperKind(grproLib::tagGRPaperKind value); //Sets the value of the DesignPaperKind property

    /*
    Property DesignPaperLength

    property DesignPaperLength

    */
    inline double DesignPaperLength() const; //Returns the value of DesignPaperLength
    inline void SetDesignPaperLength(double value); //Sets the value of the DesignPaperLength property

    /*
    Property DesignPaperName

    property DesignPaperName

    */
    inline QString DesignPaperName() const; //Returns the value of DesignPaperName
    inline void SetDesignPaperName(const QString& value); //Sets the value of the DesignPaperName property

    /*
    Property DesignPaperOrientation

    property DesignPaperOrientation

    */
    inline grproLib::tagGRPaperOrientation DesignPaperOrientation() const; //Returns the value of DesignPaperOrientation
    inline void SetDesignPaperOrientation(grproLib::tagGRPaperOrientation value); //Sets the value of the DesignPaperOrientation property

    /*
    Property DesignPaperSize

    property DesignPaperSize

    */
    inline int DesignPaperSize() const; //Returns the value of DesignPaperSize
    inline void SetDesignPaperSize(int value); //Sets the value of the DesignPaperSize property

    /*
    Property DesignPaperSource

    property DesignPaperSource

    */
    inline grproLib::tagGRPaperSourceKind DesignPaperSource() const; //Returns the value of DesignPaperSource
    inline void SetDesignPaperSource(grproLib::tagGRPaperSourceKind value); //Sets the value of the DesignPaperSource property

    /*
    Property DesignPaperWidth

    property DesignPaperWidth

    */
    inline double DesignPaperWidth() const; //Returns the value of DesignPaperWidth
    inline void SetDesignPaperWidth(double value); //Sets the value of the DesignPaperWidth property

    /*
    Property DesignPrintCollate

    property DesignPrintCollate

    */
    inline grproLib::tagGRCollateKind DesignPrintCollate() const; //Returns the value of DesignPrintCollate
    inline void SetDesignPrintCollate(grproLib::tagGRCollateKind value); //Sets the value of the DesignPrintCollate property

    /*
    Property DesignPrintDuplex

    property DesignPrintDuplex

    */
    inline grproLib::tagGRDuplexKind DesignPrintDuplex() const; //Returns the value of DesignPrintDuplex
    inline void SetDesignPrintDuplex(grproLib::tagGRDuplexKind value); //Sets the value of the DesignPrintDuplex property

    /*
    Property DesignRightMargin

    property DesignRightMargin

    */
    inline double DesignRightMargin() const; //Returns the value of DesignRightMargin
    inline void SetDesignRightMargin(double value); //Sets the value of the DesignRightMargin property

    /*
    Property DesignTopMargin

    property DesignTopMargin

    */
    inline double DesignTopMargin() const; //Returns the value of DesignTopMargin
    inline void SetDesignTopMargin(double value); //Sets the value of the DesignTopMargin property

    /*
    Property DetailGrid

    property DetailGrid

    */
    inline grproLib::IGRDetailGrid* DetailGrid() const; //Returns the value of DetailGrid

    /*
    Property DisplayMode

    property DisplayMode

    */
    inline grproLib::tagGRReportDisplayMode DisplayMode() const; //Returns the value of DisplayMode

    /*
    Property ExportBeginScript

    property ExportBeginScript

    */
    inline QString ExportBeginScript() const; //Returns the value of ExportBeginScript
    inline void SetExportBeginScript(const QString& value); //Sets the value of the ExportBeginScript property

    /*
    Property FirstPass

    property FirstPass

    */
    inline bool FirstPass() const; //Returns the value of FirstPass

    /*
    Property FloatControls

    property FloatControls

    */
    inline grproLib::IGRControls* FloatControls() const; //Returns the value of FloatControls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property Graphics

    property Graphics

    */
    inline grproLib::IGRGraphics* Graphics() const; //Returns the value of Graphics

    /*
    Property GridColsPerUnit

    property GridColsPerUnit

    */
    inline int GridColsPerUnit() const; //Returns the value of GridColsPerUnit
    inline void SetGridColsPerUnit(int value); //Sets the value of the GridColsPerUnit property

    /*
    Property GridRowsPerUnit

    property GridRowsPerUnit

    */
    inline int GridRowsPerUnit() const; //Returns the value of GridRowsPerUnit
    inline void SetGridRowsPerUnit(int value); //Sets the value of the GridRowsPerUnit property

    /*
    Property HasFloatControl

    property HasFloatControl

    */
    inline bool HasFloatControl() const; //Returns the value of HasFloatControl

    /*
    Property ImageList

    property ImageList

    */
    inline grproLib::IGRImageList* ImageList() const; //Returns the value of ImageList

    /*
    Property InitializeScript

    property InitializeScript

    */
    inline QString InitializeScript() const; //Returns the value of InitializeScript
    inline void SetInitializeScript(const QString& value); //Sets the value of the InitializeScript property

    /*
    Property IsBlank

    property IsBlank

    */
    inline bool IsBlank() const; //Returns the value of IsBlank

    /*
    Property Language

    property Language

    */
    inline int Language() const; //Returns the value of Language
    inline void SetLanguage(int value); //Sets the value of the Language property

    /*
    Property MaxGenPages

    property MaxGenPages

    */
    inline int MaxGenPages() const; //Returns the value of MaxGenPages
    inline void SetMaxGenPages(int value); //Sets the value of the MaxGenPages property

    /*
    Property MirrorMargins

    property MirrorMargins

    */
    inline bool MirrorMargins() const; //Returns the value of MirrorMargins
    inline void SetMirrorMargins(bool value); //Sets the value of the MirrorMargins property

    /*
    Property MonoPrint

    property MonoPrint

    */
    inline bool MonoPrint() const; //Returns the value of MonoPrint
    inline void SetMonoPrint(bool value); //Sets the value of the MonoPrint property

    /*
    Property PageBlankHeight

    property PageBlankHeight

    */
    inline double PageBlankHeight() const; //Returns the value of PageBlankHeight

    /*
    Property PageDivideCount

    property PageDivideCount

    */
    inline int PageDivideCount() const; //Returns the value of PageDivideCount
    inline void SetPageDivideCount(int value); //Sets the value of the PageDivideCount property

    /*
    Property PageDivideLine

    property PageDivideLine

    */
    inline bool PageDivideLine() const; //Returns the value of PageDivideLine
    inline void SetPageDivideLine(bool value); //Sets the value of the PageDivideLine property

    /*
    Property PageDivideSpacing

    property PageDivideSpacing

    */
    inline double PageDivideSpacing() const; //Returns the value of PageDivideSpacing
    inline void SetPageDivideSpacing(double value); //Sets the value of the PageDivideSpacing property

    /*
    Property PageEndScript

    property PageEndScript

    */
    inline QString PageEndScript() const; //Returns the value of PageEndScript
    inline void SetPageEndScript(const QString& value); //Sets the value of the PageEndScript property

    /*
    Property PageFooter

    property PageFooter

    */
    inline grproLib::IGRPageFooter* PageFooter() const; //Returns the value of PageFooter

    /*
    Property PageHeader

    property PageHeader

    */
    inline grproLib::IGRPageHeader* PageHeader() const; //Returns the value of PageHeader

    /*
    Property PageStartScript

    property PageStartScript

    */
    inline QString PageStartScript() const; //Returns the value of PageStartScript
    inline void SetPageStartScript(const QString& value); //Sets the value of the PageStartScript property

    /*
    Property Parameters

    property Parameters

    */
    inline grproLib::IGRParameters* Parameters() const; //Returns the value of Parameters

    /*
    Property ParentReport

    property ParentReport

    */
    inline grproLib::IGridppReport* ParentReport() const; //Returns the value of ParentReport

    /*
    Property PrintAsDesignPaper

    property PrintAsDesignPaper

    */
    inline bool PrintAsDesignPaper() const; //Returns the value of PrintAsDesignPaper
    inline void SetPrintAsDesignPaper(bool value); //Sets the value of the PrintAsDesignPaper property

    /*
    Property PrintToStretch

    property PrintToStretch

    */
    inline bool PrintToStretch() const; //Returns the value of PrintToStretch
    inline void SetPrintToStretch(bool value); //Sets the value of the PrintToStretch property

    /*
    Property Printer

    property Printer

    */
    inline grproLib::IGRPrinter* Printer() const; //Returns the value of Printer

    /*
    Property ProcessBeginScript

    property ProcessBeginScript

    */
    inline QString ProcessBeginScript() const; //Returns the value of ProcessBeginScript
    inline void SetProcessBeginScript(const QString& value); //Sets the value of the ProcessBeginScript property

    /*
    Property ProcessEndScript

    property ProcessEndScript

    */
    inline QString ProcessEndScript() const; //Returns the value of ProcessEndScript
    inline void SetProcessEndScript(const QString& value); //Sets the value of the ProcessEndScript property

    /*
    Property QuerySQL

    property QuerySQL

    */
    inline QString QuerySQL() const; //Returns the value of QuerySQL
    inline void SetQuerySQL(const QString& value); //Sets the value of the QuerySQL property

    /*
    Property ReportFooterCount

    property ReportFooterCount

    */
    inline int ReportFooterCount() const; //Returns the value of ReportFooterCount

    /*
    Property ReportHeaderCount

    property ReportHeaderCount

    */
    inline int ReportHeaderCount() const; //Returns the value of ReportHeaderCount

    /*
    Property Running

    property Running

    */
    inline bool Running() const; //Returns the value of Running

    /*
    Property RunningDetailGrid

    property RunningDetailGrid

    */
    inline grproLib::IGRDetailGrid* RunningDetailGrid() const; //Returns the value of RunningDetailGrid

    /*
    Property ScriptType

    property ScriptType

    */
    inline grproLib::tagGRScriptType ScriptType() const; //Returns the value of ScriptType
    inline void SetScriptType(grproLib::tagGRScriptType value); //Sets the value of the ScriptType property

    /*
    Property Sections

    property Sections

    */
    inline grproLib::IGRSections* Sections() const; //Returns the value of Sections

    /*
    Property SharePrintSetupObject

    property SharePrintSetupObject

    */
    inline grproLib::IGRSharePrintSetupObject* SharePrintSetupObject() const; //Returns the value of SharePrintSetupObject

    /*
    Property SharePrintSetupOptions

    property SharePrintSetupOptions

    */
    inline int SharePrintSetupOptions() const; //Returns the value of SharePrintSetupOptions
    inline void SetSharePrintSetupOptions(int value); //Sets the value of the SharePrintSetupOptions property

    /*
    Property ShowGrid

    property ShowGrid

    */
    inline bool ShowGrid() const; //Returns the value of ShowGrid
    inline void SetShowGrid(bool value); //Sets the value of the ShowGrid property

    /*
    Property ShowMoneyDigit

    property ShowMoneyDigit

    */
    inline int ShowMoneyDigit() const; //Returns the value of ShowMoneyDigit
    inline void SetShowMoneyDigit(int value); //Sets the value of the ShowMoneyDigit property

    /*
    Property ShowMoneyLineColor

    property ShowMoneyLineColor

    */
    inline QColor ShowMoneyLineColor() const; //Returns the value of ShowMoneyLineColor
    inline void SetShowMoneyLineColor(const QColor& value); //Sets the value of the ShowMoneyLineColor property

    /*
    Property ShowMoneySepLineColor

    property ShowMoneySepLineColor

    */
    inline QColor ShowMoneySepLineColor() const; //Returns the value of ShowMoneySepLineColor
    inline void SetShowMoneySepLineColor(const QColor& value); //Sets the value of the ShowMoneySepLineColor property

    /*
    Property ShowMoneyWidth

    property ShowMoneyWidth

    */
    inline double ShowMoneyWidth() const; //Returns the value of ShowMoneyWidth
    inline void SetShowMoneyWidth(double value); //Sets the value of the ShowMoneyWidth property

    /*
    Property ShowPreviewWndScript

    property ShowPreviewWndScript

    */
    inline QString ShowPreviewWndScript() const; //Returns the value of ShowPreviewWndScript
    inline void SetShowPreviewWndScript(const QString& value); //Sets the value of the ShowPreviewWndScript property

    /*
    Property ShowProgressUI

    property ShowProgressUI

    */
    inline bool ShowProgressUI() const; //Returns the value of ShowProgressUI
    inline void SetShowProgressUI(bool value); //Sets the value of the ShowProgressUI property

    /*
    Property SkipQuery

    property SkipQuery

    */
    inline bool SkipQuery() const; //Returns the value of SkipQuery
    inline void SetSkipQuery(bool value); //Sets the value of the SkipQuery property

    /*
    Property StorageFormat

    property StorageFormat

    */
    inline grproLib::tagGRStorageFormat StorageFormat() const; //Returns the value of StorageFormat
    inline void SetStorageFormat(grproLib::tagGRStorageFormat value); //Sets the value of the StorageFormat property

    /*
    Property SummaryAccept

    property SummaryAccept

    */
    inline bool SummaryAccept() const; //Returns the value of SummaryAccept
    inline void SetSummaryAccept(bool value); //Sets the value of the SummaryAccept property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextEncode

    property TextEncode

    */
    inline grproLib::tagGRTextEncodeMode TextEncode() const; //Returns the value of TextEncode
    inline void SetTextEncode(grproLib::tagGRTextEncodeMode value); //Sets the value of the TextEncode property

    /*
    Property Title

    property Title

    */
    inline QString Title() const; //Returns the value of Title
    inline void SetTitle(const QString& value); //Sets the value of the Title property

    /*
    Property Unit

    property Unit

    */
    inline grproLib::tagGRUnit Unit() const; //Returns the value of Unit
    inline void SetUnit(grproLib::tagGRUnit value); //Sets the value of the Unit property

    /*
    Property Version

    property Version

    */
    inline QString Version() const; //Returns the value of Version

    /*
    Property Watermark

    property Watermark

    */
    inline stdole::IPicture* Watermark() const; //Returns the value of Watermark
    inline void SetWatermark(stdole::IPicture* value); //Sets the value of the Watermark property

    /*
    Property WatermarkAlignment

    property WatermarkAlignment

    */
    inline grproLib::tagGRPictureAlignment WatermarkAlignment() const; //Returns the value of WatermarkAlignment
    inline void SetWatermarkAlignment(grproLib::tagGRPictureAlignment value); //Sets the value of the WatermarkAlignment property

    /*
    Property WatermarkSizeMode

    property WatermarkSizeMode

    */
    inline grproLib::tagGRPictureSizeMode WatermarkSizeMode() const; //Returns the value of WatermarkSizeMode
    inline void SetWatermarkSizeMode(grproLib::tagGRPictureSizeMode value); //Sets the value of the WatermarkSizeMode property

    /*
    Property _GRBackImage
    */
    inline grproLib::IGRPicture* _GRBackImage() const; //Returns the value of _GRBackImage
    inline void set_GRBackImage(grproLib::IGRPicture* value); //Sets the value of the _GRBackImage property

    /*
    Property _GRWatermark
    */
    inline grproLib::IGRPicture* _GRWatermark() const; //Returns the value of _GRWatermark
    inline void set_GRWatermark(grproLib::IGRPicture* value); //Sets the value of the _GRWatermark property

    /*
    Property _ResHinst

    property _ResHinst

    */
    inline int _ResHinst() const; //Returns the value of _ResHinst

    /*
    Method AbortPrint

    method AbortPrint

    */
    inline void AbortPrint();

    /*
    Method About

    method About

    */
    inline void About();

    /*
    Method AddParameter

    method AddParameter

    */
    inline grproLib::IGRParameter* AddParameter(const QString& Name, grproLib::tagGRParameterDataType DataType);

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BeginLoopPrint

    method BeginLoopPrint

    */
    inline bool BeginLoopPrint(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog);

    /*
    Method CalcTextOut

    method CalcTextOut

    */
    inline QString CalcTextOut(double Width, double Height, const QString& Text, grproLib::IGRFont* Font, bool WordWrap);

    /*
    Method CancelRecordset

    method CancelRecordset

    */
    inline void CancelRecordset();

    /*
    Method Clear

    method Clear

    */
    inline void Clear();

    /*
    Method ColumnByName

    method ColumnByName

    */
    inline grproLib::IGRColumn* ColumnByName(const QString& Name);

    /*
    Method ControlByName

    method ControlByName

    */
    inline grproLib::IGRControl* ControlByName(const QString& Name);

    /*
    Method CreateBatchReport

    method CreateBatchReport

    */
    inline grproLib::IGRObject* CreateBatchReport();

    /*
    Method DeleteDetailGrid

    method DeleteDetailGrid

    */
    inline void DeleteDetailGrid();

    /*
    Method DeletePageFooter

    method DeletePageFooter

    */
    inline void DeletePageFooter();

    /*
    Method DeletePageHeader

    method DeletePageHeader

    */
    inline void DeletePageHeader();

    /*
    Method DeleteReportFooter

    method DeleteReportFooter

    */
    inline void DeleteReportFooter(const QVariant& Index);

    /*
    Method DeleteReportHeader

    method DeleteReportHeader

    */
    inline void DeleteReportHeader(const QVariant& Index);

    /*
    Method EndLoopPrint

    method EndLoopPrint

    */
    inline void EndLoopPrint();

    /*
    Method Export

    method Export

    */
    inline bool Export(bool DoneOpen);

    /*
    Method ExportDirect

    method ExportDirect

    */
    inline bool ExportDirect(grproLib::tagGRExportType ExportType, const QString& FileName, bool ShowOptionDlg, bool DoneOpen);

    /*
    Method ExtractXMLFromURL

    method ExtractXMLFromURL

    */
    inline QString ExtractXMLFromURL(const QString& URL);

    /*
    Method FieldByDBName

    method FieldByDBName

    */
    inline grproLib::IGRField* FieldByDBName(const QString& Name);

    /*
    Method FieldByName

    method FieldByName

    */
    inline grproLib::IGRField* FieldByName(const QString& Name);

    /*
    Method FindFirstControl

    method FindFirstControl

    */
    inline grproLib::IGRControl* FindFirstControl();

    /*
    Method FindNextControl

    method FindNextControl

    */
    inline grproLib::IGRControl* FindNextControl();

    /*
    Method ForceNewPage

    method ForceNewPage

    */
    inline void ForceNewPage();

    /*
    Method GenerateDocumentFile

    method GenerateDocumentFile

    */
    inline void GenerateDocumentFile(const QString& FileName);

    /*
    Method GetSkin

    method GetSkin

    */
    inline void GetSkin(uint& BackColorRed, uint& BackColorGreen, uint& BackColorBlue, int& Style);

    /*
    Method InsertDetailGrid

    method InsertDetailGrid

    */
    inline grproLib::IGRDetailGrid* InsertDetailGrid();

    /*
    Method InsertPageFooter

    method InsertPageFooter

    */
    inline grproLib::IGRPageFooter* InsertPageFooter();

    /*
    Method InsertPageHeader

    method InsertPageHeader

    */
    inline grproLib::IGRPageHeader* InsertPageHeader();

    /*
    Method InsertReportFooter

    method InsertReportFooter

    */
    inline grproLib::IGRReportFooter* InsertReportFooter();

    /*
    Method InsertReportHeader

    method InsertReportHeader

    */
    inline grproLib::IGRReportHeader* InsertReportHeader();

    /*
    Method LoadBackImageFromFile

    method LoadBackImageFromFile

    */
    inline void LoadBackImageFromFile(const QString& PathFile);

    /*
    Method LoadBackImageFromMemory

    method LoadBackImageFromMemory

    */
    inline void LoadBackImageFromMemory(uint& pBuffer, int BytesCount);

    /*
    Method LoadDataFromURL

    method LoadDataFromURL

    */
    inline bool LoadDataFromURL(const QString& URL);

    /*
    Method LoadDataFromXML

    method LoadDataFromXML

    */
    inline bool LoadDataFromXML(const QString& XMLData);

    /*
    Method LoadFromFile

    method LoadFromFile

    */
    inline bool LoadFromFile(const QString& FileName);

    /*
    Method LoadFromMemory

    method LoadFromMemory

    */
    inline bool LoadFromMemory(uint& pData, int ByteCount);

    /*
    Method LoadFromStr

    method LoadFromStr

    */
    inline bool LoadFromStr(const QString& Data);

    /*
    Method LoadFromURL

    method LoadFromURL

    */
    inline bool LoadFromURL(const QString& URL);

    /*
    Method LoadFromVariant

    method LoadFromVariant

    */
    inline bool LoadFromVariant(const QVariant& Buf);

    /*
    Method LoadWatermarkFromFile

    method LoadWatermarkFromFile

    */
    inline void LoadWatermarkFromFile(const QString& PathFile);

    /*
    Method LoadWatermarkFromMemory

    method LoadWatermarkFromMemory

    */
    inline void LoadWatermarkFromMemory(uint& pBuffer, int BytesCount);

    /*
    Method LoopPrint

    method LoopPrint

    */
    inline void LoopPrint();

    /*
    Method ParameterByName

    method ParameterByName

    */
    inline grproLib::IGRParameter* ParameterByName(const QString& Name);

    /*
    Method PixelsToUnit

    method PixelsToUnit

    */
    inline double PixelsToUnit(int Pixels);

    /*
    Method PrepareExport

    method PrepareExport

    */
    inline grproLib::IGRExportOption* PrepareExport(grproLib::tagGRExportType ExportType);

    /*
    Method PrepareRecordset

    method PrepareRecordset

    */
    inline bool PrepareRecordset();

    /*
    Method Print

    method Print

    */
    inline void Print(bool ShowPrintDialog);

    /*
    Method PrintEx

    method PrintEx

    */
    inline void PrintEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog);

    /*
    Method PrintPreview

    method PrintPreview

    */
    inline void PrintPreview(bool ShowModal);

    /*
    Method PrintPreviewEx

    method PrintPreviewEx

    */
    inline void PrintPreviewEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowModal, bool MaximizeWindow);

    /*
    Method Register

    method Register

    */
    inline bool Register(const QString& SerialNo);

    /*
    Method ReportFooter

    property ReportFooter

    */
    inline grproLib::IGRReportFooter* ReportFooter(const QVariant& Index);

    /*
    Method ReportHeader

    property ReportHeader

    */
    inline grproLib::IGRReportHeader* ReportHeader(const QVariant& Index);

    /*
    Method SaveToFile

    method SaveToFile

    */
    inline bool SaveToFile(const QString& FileName);

    /*
    Method SaveToMemory

    method SaveToMemory

    */
    inline bool SaveToMemory(int*& ppData, int& pBytesCount);

    /*
    Method SaveToStr

    method SaveToStr

    */
    inline QString SaveToStr();

    /*
    Method SaveToURL

    method SaveToURL

    */
    inline bool SaveToURL(const QString& URL);

    /*
    Method SaveToVariant

    method SaveToVariant

    */
    inline QVariant SaveToVariant();

    /*
    Method SetSkin

    method SetSkin

    */
    inline void SetSkin(uint BackColorRed, uint BackColorGreen, uint BackColorBlue, int Style);

    /*
    Method SharePrintSetupDisableAllOptions

    method SharePrintSetupDisableAllOptions

    */
    inline void SharePrintSetupDisableAllOptions();

    /*
    Method SharePrintSetupEnableAllOptions

    method SharePrintSetupEnableAllOptions

    */
    inline void SharePrintSetupEnableAllOptions();

    /*
    Method SharePrintSetupGetOptionEnabled

    method SharePrintSetupGetOptionEnabled

    */
    inline bool SharePrintSetupGetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option);

    /*
    Method SharePrintSetupSetOptionEnabled

    method SharePrintSetupSetOptionEnabled

    */
    inline void SharePrintSetupSetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option, bool Enabled);

    /*
    Method SystemVarValue

    method SystemVarValue

    */
    inline int SystemVarValue(grproLib::tagGRSystemVar SystemVar);

    /*
    Method UnitToPixels

    method PixelsToUnit

    */
    inline int UnitToPixels(double UnitValue);

    /*
    Method UnprepareExport

    method UnprepareExport

    */
    inline void UnprepareExport();

    /*
    Method _CreatePicture
    */
    inline grproLib::IGRPicture* _CreatePicture();

    /*
    Method _CreateProxyReport

    method _CreateProxyReport

    */
    inline grproLib::IGridppReport* _CreateProxyReport();

    /*
    Method _DestroyProxyReport

    method _DestroyProxyReport

    */
    inline void _DestroyProxyReport();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjLoadBegin

    method _ObjLoadBegin

    */
    inline void _ObjLoadBegin(uint& pData, uint BytesCount);

    /*
    Method _ObjLoadEnd

    method _ObjLoadEnd

    */
    inline void _ObjLoadEnd();

    /*
    Method _ObjLoadEof

    method _ObjLoadEof

    */
    inline bool _ObjLoadEof();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _ObjSaveBegin

    method _ObjSaveBegin

    */
    inline void _ObjSaveBegin();

    /*
    Method _ObjSaveEnd

    method _ObjSaveEnd

    */
    inline void _ObjSaveEnd(int*& ppData, uint& pBytesCount);

    /*
    Method _RefreshPrinter

    method _RefreshPrinter

    */
    inline void _RefreshPrinter();

    /*
    Method _SystemImage

    property _SystemImage

    */
    inline int _SystemImage(grproLib::tagGRSystemImage SystemImage);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRDetailGrid : public QAxObject
{
public:
    IGRDetailGrid(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AppendBlankCol

    property AppendBlankCol

    */
    inline bool AppendBlankCol() const; //Returns the value of AppendBlankCol
    inline void SetAppendBlankCol(bool value); //Sets the value of the AppendBlankCol property

    /*
    Property AppendBlankColWidth

    property AppendBlankColWidth

    */
    inline double AppendBlankColWidth() const; //Returns the value of AppendBlankColWidth
    inline void SetAppendBlankColWidth(double value); //Sets the value of the AppendBlankColWidth property

    /*
    Property AppendBlankRow

    property AppendBlankRow

    */
    inline bool AppendBlankRow() const; //Returns the value of AppendBlankRow
    inline void SetAppendBlankRow(bool value); //Sets the value of the AppendBlankRow property

    /*
    Property AppendBlankRowAtLast

    property AppendBlankRowAtLast

    */
    inline bool AppendBlankRowAtLast() const; //Returns the value of AppendBlankRowAtLast
    inline void SetAppendBlankRowAtLast(bool value); //Sets the value of the AppendBlankRowAtLast property

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderPrintType

    property BorderPrintType

    */
    inline grproLib::tagGRPrintType BorderPrintType() const; //Returns the value of BorderPrintType
    inline void SetBorderPrintType(grproLib::tagGRPrintType value); //Sets the value of the BorderPrintType property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CenterView

    property CenterView

    */
    inline bool CenterView() const; //Returns the value of CenterView
    inline void SetCenterView(bool value); //Sets the value of the CenterView property

    /*
    Property ColLineColor

    property ColLineColor

    */
    inline QColor ColLineColor() const; //Returns the value of ColLineColor
    inline void SetColLineColor(const QColor& value); //Sets the value of the ColLineColor property

    /*
    Property ColLineWidth

    property ColLineWidth

    */
    inline double ColLineWidth() const; //Returns the value of ColLineWidth
    inline void SetColLineWidth(double value); //Sets the value of the ColLineWidth property

    /*
    Property ColumnContent

    property ColumnContent

    */
    inline grproLib::IGRColumnContent* ColumnContent() const; //Returns the value of ColumnContent

    /*
    Property ColumnTitle

    property ColumnTitle

    */
    inline grproLib::IGRColumnTitle* ColumnTitle() const; //Returns the value of ColumnTitle

    /*
    Property Columns

    property Columns

    */
    inline grproLib::IGRColumns* Columns() const; //Returns the value of Columns

    /*
    Property CrossTab

    property CrossTab

    */
    inline grproLib::IGRCrossTab* CrossTab() const; //Returns the value of CrossTab

    /*
    Property FixCols

    property FixCols

    */
    inline int FixCols() const; //Returns the value of FixCols
    inline void SetFixCols(int value); //Sets the value of the FixCols property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property GridLinePrintType

    property GridLinePrintType

    */
    inline grproLib::tagGRPrintType GridLinePrintType() const; //Returns the value of GridLinePrintType
    inline void SetGridLinePrintType(grproLib::tagGRPrintType value); //Sets the value of the GridLinePrintType property

    /*
    Property Groups

    property Groups

    */
    inline grproLib::IGRGroups* Groups() const; //Returns the value of Groups

    /*
    Property GrowToBottom

    property GrowToBottom

    */
    inline bool GrowToBottom() const; //Returns the value of GrowToBottom
    inline void SetGrowToBottom(bool value); //Sets the value of the GrowToBottom property

    /*
    Property IsCrossTab

    property IsCrossTab

    */
    inline bool IsCrossTab() const; //Returns the value of IsCrossTab
    inline void SetIsCrossTab(bool value); //Sets the value of the IsCrossTab property

    /*
    Property NewPage

    property NewPage

    */
    inline grproLib::tagGRNewPageStyle NewPage() const; //Returns the value of NewPage
    inline void SetNewPage(grproLib::tagGRNewPageStyle value); //Sets the value of the NewPage property

    /*
    Property PageColumnCount

    property PageColumnCount

    */
    inline int PageColumnCount() const; //Returns the value of PageColumnCount
    inline void SetPageColumnCount(int value); //Sets the value of the PageColumnCount property

    /*
    Property PageColumnDirection

    property PageColumnDirection

    */
    inline grproLib::tagGRPageColumnDirection PageColumnDirection() const; //Returns the value of PageColumnDirection
    inline void SetPageColumnDirection(grproLib::tagGRPageColumnDirection value); //Sets the value of the PageColumnDirection property

    /*
    Property PageColumnSpacing

    property PageColumnSpacing

    */
    inline double PageColumnSpacing() const; //Returns the value of PageColumnSpacing
    inline void SetPageColumnSpacing(double value); //Sets the value of the PageColumnSpacing property

    /*
    Property PrintAdaptFitText

    property PrintAdaptFitText

    */
    inline bool PrintAdaptFitText() const; //Returns the value of PrintAdaptFitText
    inline void SetPrintAdaptFitText(bool value); //Sets the value of the PrintAdaptFitText property

    /*
    Property PrintAdaptMethod

    property PrintAdaptMethod

    */
    inline grproLib::tagGRColumnPrintAdaptMethod PrintAdaptMethod() const; //Returns the value of PrintAdaptMethod
    inline void SetPrintAdaptMethod(grproLib::tagGRColumnPrintAdaptMethod value); //Sets the value of the PrintAdaptMethod property

    /*
    Property PrintAdaptRFCStep

    property PrintAdaptRFCStep

    */
    inline int PrintAdaptRFCStep() const; //Returns the value of PrintAdaptRFCStep
    inline void SetPrintAdaptRFCStep(int value); //Sets the value of the PrintAdaptRFCStep property

    /*
    Property PrintAdaptRepeat

    property PrintAdaptRepeat

    */
    inline bool PrintAdaptRepeat() const; //Returns the value of PrintAdaptRepeat
    inline void SetPrintAdaptRepeat(bool value); //Sets the value of the PrintAdaptRepeat property

    /*
    Property Recordset

    property Recordset

    */
    inline grproLib::IGRRecordset* Recordset() const; //Returns the value of Recordset

    /*
    Property RowLineColor

    property RowLineColor

    */
    inline QColor RowLineColor() const; //Returns the value of RowLineColor
    inline void SetRowLineColor(const QColor& value); //Sets the value of the RowLineColor property

    /*
    Property RowLineWidth

    property RowLineWidth

    */
    inline double RowLineWidth() const; //Returns the value of RowLineWidth
    inline void SetRowLineWidth(double value); //Sets the value of the RowLineWidth property

    /*
    Property ShowColLine

    property ShowColLine

    */
    inline bool ShowColLine() const; //Returns the value of ShowColLine
    inline void SetShowColLine(bool value); //Sets the value of the ShowColLine property

    /*
    Property ShowRowLine

    property ShowRowLine

    */
    inline bool ShowRowLine() const; //Returns the value of ShowRowLine
    inline void SetShowRowLine(bool value); //Sets the value of the ShowRowLine property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Method AddColumn

    method AddColumn

    */
    inline grproLib::IGRColumn* AddColumn(const QString& Name, const QString& Title, const QString& DataField, double Width);

    /*
    Method AddGroupTitle

    method AddGroupTitle

    */
    inline grproLib::IGRColumnTitleCell* AddGroupTitle(const QString& Name, const QString& Title);

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method ClearColumns

    method ClearColumns

    */
    inline void ClearColumns();

    /*
    Method ClearGroupTitles

    method ClearGroupTitles

    */
    inline void ClearGroupTitles();

    /*
    Method ColumnMoveTo

    method ColumnMoveTo

    */
    inline void ColumnMoveTo(const QString& ColumnName, const QString& NewGroupTitleCellName, int NewShowOrderNo);

    /*
    Method ColumnMoveToEnd

    method ColumnMoveToEnd

    */
    inline void ColumnMoveToEnd(const QVariant& ColumnIndex);

    /*
    Method FindGroupTitleCell

    method FindGroupTitleCell

    */
    inline grproLib::IGRColumnTitleCell* FindGroupTitleCell(const QString& Name);

    /*
    Method StartNewGroup

    method StartNewGroup

    */
    inline void StartNewGroup(const QVariant& GroupIndex);

    /*
    Method _GetOccupyColumnGroupCount

    method _GetOccupyColumnTitleCount

    */
    inline int _GetOccupyColumnGroupCount();

    /*
    Method _GetOccupyColumnGroupInfo

    method _GetOccupyColumnTitleInfo

    */
    inline void _GetOccupyColumnGroupInfo(int Index, int& pGroupIndex, int& pBeginDataRowNo, int& pEndDataRowNo);

    /*
    Method _GetRowCount

    method _GetRowCount

    */
    inline int _GetRowCount();

    /*
    Method _GetRowInfo

    method _GetRowInfo

    */
    inline void _GetRowInfo(int RowNo, int& pDataNo, tagGRDetailGridRowType& pType, int& pGroupIndex);

    /*
    Method _MoveSubTitleToEnd

    method _MoveSubTitleToEnd

    */
    inline void _MoveSubTitleToEnd(grproLib::IGRColumnTitleCells* pOwnerTitles, grproLib::IGRColumnTitleCell* pSubTitle);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnContent : public QAxObject
{
public:
    IGRColumnContent(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AdjustRowHeight

    property AdjustRowHeight

    */
    inline bool AdjustRowHeight() const; //Returns the value of AdjustRowHeight
    inline void SetAdjustRowHeight(bool value); //Sets the value of the AdjustRowHeight property

    /*
    Property AlternatingBackColor

    property AlternatingBackColor

    */
    inline QColor AlternatingBackColor() const; //Returns the value of AlternatingBackColor
    inline void SetAlternatingBackColor(const QColor& value); //Sets the value of the AlternatingBackColor property

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property ContentCells

    property ContentCells

    */
    inline grproLib::IGRColumnContentCells* ContentCells() const; //Returns the value of ContentCells

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property DetailGrid

    property DetailGrid

    */
    inline grproLib::IGRDetailGrid* DetailGrid() const; //Returns the value of DetailGrid

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property GrowToNextRow

    property GrowToNextRow

    */
    inline bool GrowToNextRow() const; //Returns the value of GrowToNextRow
    inline void SetGrowToNextRow(bool value); //Sets the value of the GrowToNextRow property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property RowsPerPage

    property RowsPerPage

    */
    inline int RowsPerPage() const; //Returns the value of RowsPerPage
    inline void SetRowsPerPage(int value); //Sets the value of the RowsPerPage property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SetCellsBackColor

    SetCellsBackColor

    */
    inline void SetCellsBackColor(const QColor& BackColor);

    /*
    Method SetCellsForeColor

    SetCellsForeColor

    */
    inline void SetCellsForeColor(const QColor& ForeColor);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnSection : public QAxObject
{
public:
    IGRColumnSection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property DetailGrid

    property DetailGrid

    */
    inline grproLib::IGRDetailGrid* DetailGrid() const; //Returns the value of DetailGrid

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method SetCellsBackColor

    SetCellsBackColor

    */
    inline void SetCellsBackColor(const QColor& BackColor);

    /*
    Method SetCellsForeColor

    SetCellsForeColor

    */
    inline void SetCellsForeColor(const QColor& ForeColor);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnContentCells : public QAxObject
{
public:
    IGRColumnContentCells(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRColumnContentCell* Item(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnContentCell : public QAxObject
{
public:
    IGRColumnContentCell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Column

    property Column

    */
    inline grproLib::IGRColumn* Column() const; //Returns the value of Column

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property DataField

    property DataField

    */
    inline QString DataField() const; //Returns the value of DataField
    inline void SetDataField(const QString& value); //Sets the value of the DataField property

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property FreeCell

    property FreeCell

    */
    inline bool FreeCell() const; //Returns the value of FreeCell
    inline void SetFreeCell(bool value); //Sets the value of the FreeCell property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline grproLib::IGRColumnContent* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextAlign

    property TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnCell : public QAxObject
{
public:
    IGRColumnCell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property Column

    property Column

    */
    inline grproLib::IGRColumn* Column() const; //Returns the value of Column

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property FreeCell

    property FreeCell

    */
    inline bool FreeCell() const; //Returns the value of FreeCell
    inline void SetFreeCell(bool value); //Sets the value of the FreeCell property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextAlign

    property TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumn : public QAxObject
{
public:
    IGRColumn(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ContentCell

    property ContentCell

    */
    inline grproLib::IGRColumnContentCell* ContentCell() const; //Returns the value of ContentCell

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline grproLib::IGRDetailGrid* Parent() const; //Returns the value of Parent

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TitleCell

    property TitleCell

    */
    inline grproLib::IGRColumnTitleCell* TitleCell() const; //Returns the value of TitleCell

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnTitleCell : public QAxObject
{
public:
    IGRColumnTitleCell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property Column

    property Column

    */
    inline grproLib::IGRColumn* Column() const; //Returns the value of Column

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property EndEllipsis

    property EndEllipsis

    */
    inline bool EndEllipsis() const; //Returns the value of EndEllipsis
    inline void SetEndEllipsis(bool value); //Sets the value of the EndEllipsis property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property FreeCell

    property FreeCell

    */
    inline bool FreeCell() const; //Returns the value of FreeCell
    inline void SetFreeCell(bool value); //Sets the value of the FreeCell property

    /*
    Property GroupTitle

    property GroupTitle

    */
    inline bool GroupTitle() const; //Returns the value of GroupTitle

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline grproLib::IGRColumnTitle* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property ShowMoneyLabel

    property ShowMoneyLabel

    */
    inline bool ShowMoneyLabel() const; //Returns the value of ShowMoneyLabel
    inline void SetShowMoneyLabel(bool value); //Sets the value of the ShowMoneyLabel property

    /*
    Property ShowMoneyLine

    property ShowMoneyLine

    */
    inline bool ShowMoneyLine() const; //Returns the value of ShowMoneyLine
    inline void SetShowMoneyLine(bool value); //Sets the value of the ShowMoneyLine property

    /*
    Property ShrinkFontToFit

    property ShrinkFontToFit

    */
    inline bool ShrinkFontToFit() const; //Returns the value of ShrinkFontToFit
    inline void SetShrinkFontToFit(bool value); //Sets the value of the ShrinkFontToFit property

    /*
    Property SubTitles

    property SubTitles

    */
    inline grproLib::IGRColumnTitleCells* SubTitles() const; //Returns the value of SubTitles

    /*
    Property SupCell

    property SupCell

    */
    inline grproLib::IGRColumnTitleCell* SupCell() const; //Returns the value of SupCell

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Text

    property Text

    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextAlign

    property TextAlign

    */
    inline grproLib::tagGRTextAlign TextAlign() const; //Returns the value of TextAlign
    inline void SetTextAlign(grproLib::tagGRTextAlign value); //Sets the value of the TextAlign property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WordWrap

    property WordWrap

    */
    inline bool WordWrap() const; //Returns the value of WordWrap
    inline void SetWordWrap(bool value); //Sets the value of the WordWrap property

    /*
    Method AddSubGroupTitle

    method AddSubGroupTitle

    */
    inline grproLib::IGRColumnTitleCell* AddSubGroupTitle(const QString& Name, const QString& Title);

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method EncloseColumn

    method EncloseColumn

    */
    inline void EncloseColumn(const QVariant& ColumnIndex);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnTitle : public QAxObject
{
public:
    IGRColumnTitle(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property DetailGrid

    property DetailGrid

    */
    inline grproLib::IGRDetailGrid* DetailGrid() const; //Returns the value of DetailGrid

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property RepeatStyle

    property RepeatStyle

    */
    inline grproLib::tagGRRepeatStyle RepeatStyle() const; //Returns the value of RepeatStyle
    inline void SetRepeatStyle(grproLib::tagGRRepeatStyle value); //Sets the value of the RepeatStyle property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TitleCells

    property TitleCells

    */
    inline grproLib::IGRColumnTitleCells* TitleCells() const; //Returns the value of TitleCells

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method SetCellsBackColor

    SetCellsBackColor

    */
    inline void SetCellsBackColor(const QColor& BackColor);

    /*
    Method SetCellsForeColor

    SetCellsForeColor

    */
    inline void SetCellsForeColor(const QColor& ForeColor);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumnTitleCells : public QAxObject
{
public:
    IGRColumnTitleCells(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method AddGroup

    method AddGroup

    */
    inline grproLib::IGRColumnTitleCell* AddGroup(const QString& Name, const QString& Title);

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRColumnTitleCell* Item(const QVariant& Index);

    /*
    Method RemoveGroup

    method RemoveGroup

    */
    inline void RemoveGroup(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRColumns : public QAxObject
{
public:
    IGRColumns(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    method Add

    */
    inline grproLib::IGRColumn* Add();

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRColumn* Item(const QVariant& Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(const QVariant& Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRGroups : public QAxObject
{
public:
    IGRGroups(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    method Add

    */
    inline grproLib::IGRGroup* Add();

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRGroup* Item(const QVariant& Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(const QVariant& Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRRecordset : public QAxObject
{
public:
    IGRRecordset(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BeforePostRecordScript

    property BeforePostRecordScript

    */
    inline QString BeforePostRecordScript() const; //Returns the value of BeforePostRecordScript
    inline void SetBeforePostRecordScript(const QString& value); //Sets the value of the BeforePostRecordScript property

    /*
    Property ConnectionString

    property ConnectionString

    */
    inline QString ConnectionString() const; //Returns the value of ConnectionString
    inline void SetConnectionString(const QString& value); //Sets the value of the ConnectionString property

    /*
    Property Editable

    property Editable

    */
    inline bool Editable() const; //Returns the value of Editable
    inline void SetEditable(bool value); //Sets the value of the Editable property

    /*
    Property FetchRecordScript

    property FetchRecordScript

    */
    inline QString FetchRecordScript() const; //Returns the value of FetchRecordScript
    inline void SetFetchRecordScript(const QString& value); //Sets the value of the FetchRecordScript property

    /*
    Property Fields

    property Fields

    */
    inline grproLib::IGRFields* Fields() const; //Returns the value of Fields

    /*
    Property PageProcessRecordScript

    property PageProcessRecordScript

    */
    inline QString PageProcessRecordScript() const; //Returns the value of PageProcessRecordScript
    inline void SetPageProcessRecordScript(const QString& value); //Sets the value of the PageProcessRecordScript property

    /*
    Property ProcessRecordScript

    property ProcessRecordScript

    */
    inline QString ProcessRecordScript() const; //Returns the value of ProcessRecordScript
    inline void SetProcessRecordScript(const QString& value); //Sets the value of the ProcessRecordScript property

    /*
    Property QuerySQL

    property QuerySQL

    */
    inline QString QuerySQL() const; //Returns the value of QuerySQL
    inline void SetQuerySQL(const QString& value); //Sets the value of the QuerySQL property

    /*
    Property RecordCount

    property RecordCount

    */
    inline int RecordCount() const; //Returns the value of RecordCount

    /*
    Property RecordNo

    property RecordNo

    */
    inline int RecordNo() const; //Returns the value of RecordNo

    /*
    Property SkipQuery

    property SkipQuery

    */
    inline bool SkipQuery() const; //Returns the value of SkipQuery
    inline void SetSkipQuery(bool value); //Sets the value of the SkipQuery property

    /*
    Property SortAsc

    property SortAsc

    */
    inline bool SortAsc() const; //Returns the value of SortAsc
    inline void SetSortAsc(bool value); //Sets the value of the SortAsc property

    /*
    Property SortCaseSensitive

    property SortCaseSensitive

    */
    inline bool SortCaseSensitive() const; //Returns the value of SortCaseSensitive
    inline void SetSortCaseSensitive(bool value); //Sets the value of the SortCaseSensitive property

    /*
    Property SortFields

    property SortFields

    */
    inline QString SortFields() const; //Returns the value of SortFields
    inline void SetSortFields(const QString& value); //Sets the value of the SortFields property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Method AddField

    method AddField

    */
    inline grproLib::IGRField* AddField(const QString& Name, grproLib::tagGRFieldType FieldType);

    /*
    Method Append

    method Append

    */
    inline void Append();

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method Bof

    method Bof

    */
    inline bool Bof();

    /*
    Method Cancel

    method Cancel

    */
    inline void Cancel();

    /*
    Method Edit

    method Edit

    */
    inline void Edit();

    /*
    Method Empty

    method Empty

    */
    inline void Empty();

    /*
    Method Eof

    method Eof

    */
    inline bool Eof();

    /*
    Method First

    method First

    */
    inline void First();

    /*
    Method Last

    method Last

    */
    inline void Last();

    /*
    Method MoveBy

    method MoveBy

    */
    inline void MoveBy(int Delta);

    /*
    Method MoveTo

    method MoveTo

    */
    inline void MoveTo(int RecordNo);

    /*
    Method Next

    method Next

    */
    inline void Next();

    /*
    Method Post

    method Post

    */
    inline void Post();

    /*
    Method Prior

    method Prior

    */
    inline void Prior();

    /*
    Method RemoveAllFields

    method RemoveAllFields

    */
    inline void RemoveAllFields();

    /*
    Method Resort

    method Resort

    */
    inline bool Resort(const QString& Fields, bool Ascending, bool CaseSensitive);

    /*
    Method _KeepValue

    method _KeepValue

    */
    inline void _KeepValue();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRFields : public QAxObject
{
public:
    IGRFields(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    method Add

    */
    inline grproLib::IGRField* Add();

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRField* Item(const QVariant& Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(const QVariant& Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRField : public QAxObject
{
public:
    IGRField(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AsBoolean

    property AsBoolean

    */
    inline bool AsBoolean() const; //Returns the value of AsBoolean
    inline void SetAsBoolean(bool value); //Sets the value of the AsBoolean property

    /*
    Property AsCurrency

    property AsCurrency

    */
    inline qlonglong AsCurrency() const; //Returns the value of AsCurrency
    inline void SetAsCurrency(qlonglong value); //Sets the value of the AsCurrency property

    /*
    Property AsDateTime

    property AsDateTime

    */
    inline QDateTime AsDateTime() const; //Returns the value of AsDateTime
    inline void SetAsDateTime(const QDateTime& value); //Sets the value of the AsDateTime property

    /*
    Property AsFloat

    property AsFloat

    */
    inline double AsFloat() const; //Returns the value of AsFloat
    inline void SetAsFloat(double value); //Sets the value of the AsFloat property

    /*
    Property AsInteger

    property AsInteger

    */
    inline int AsInteger() const; //Returns the value of AsInteger
    inline void SetAsInteger(int value); //Sets the value of the AsInteger property

    /*
    Property AsString

    property AsString

    */
    inline QString AsString() const; //Returns the value of AsString
    inline void SetAsString(const QString& value); //Sets the value of the AsString property

    /*
    Property DBFieldName

    property DBFieldName

    */
    inline QString DBFieldName() const; //Returns the value of DBFieldName
    inline void SetDBFieldName(const QString& value); //Sets the value of the DBFieldName property

    /*
    Property DataBuffer

    property DataBuffer

    */
    inline int DataBuffer() const; //Returns the value of DataBuffer

    /*
    Property DataSize

    property DataSize

    */
    inline int DataSize() const; //Returns the value of DataSize

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText
    inline void SetDisplayText(const QString& value); //Sets the value of the DisplayText property

    /*
    Property FieldType

    property FieldType

    */
    inline grproLib::tagGRFieldType FieldType() const; //Returns the value of FieldType
    inline void SetFieldType(grproLib::tagGRFieldType value); //Sets the value of the FieldType property

    /*
    Property Format

    property Format

    */
    inline QString Format() const; //Returns the value of Format
    inline void SetFormat(const QString& value); //Sets the value of the Format property

    /*
    Property GetDisplayTextScript

    property GetDisplayTextScript

    */
    inline QString GetDisplayTextScript() const; //Returns the value of GetDisplayTextScript
    inline void SetGetDisplayTextScript(const QString& value); //Sets the value of the GetDisplayTextScript property

    /*
    Property IsNull

    property IsNull

    */
    inline bool IsNull() const; //Returns the value of IsNull

    /*
    Property Length

    property Length

    */
    inline int Length() const; //Returns the value of Length
    inline void SetLength(int value); //Sets the value of the Length property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property RTrimBlankChars

    property RTrimBlankChars

    */
    inline bool RTrimBlankChars() const; //Returns the value of RTrimBlankChars
    inline void SetRTrimBlankChars(bool value); //Sets the value of the RTrimBlankChars property

    /*
    Property RunningDBField

    property RunningDBField

    */
    inline QString RunningDBField() const; //Returns the value of RunningDBField

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Value

    property Value

    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method Clear

    method Clear

    */
    inline void Clear();

    /*
    Method LoadFromFile

    method LoadFromFile

    */
    inline void LoadFromFile(const QString& PathFile);

    /*
    Method LoadFromMemory

    method LoadFromMemory

    */
    inline void LoadFromMemory(uint& pBuffer, int ByteCount);

    /*
    Method _AsDoubleValue

    method _AsDoubleValue

    */
    inline double _AsDoubleValue();

    /*
    Method _CopyValueFromPool

    method _CopyValueFromPool

    */
    inline void _CopyValueFromPool(int pAddr, int& Length);

    /*
    Method _FetchValuePostInfo

    method _FetchValuePostInfo

    */
    inline void _FetchValuePostInfo(int*& pAddr, int& pSize, int& pLength);

    /*
    Method _KeepValue

    method _KeepValue

    */
    inline void _KeepValue();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _ValueChanged

    method _ValueChanged

    */
    inline bool _ValueChanged();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRCrossTab : public QAxObject
{
public:
    IGRCrossTab(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AutoPeriodText

    property AutoPeriodText

    */
    inline bool AutoPeriodText() const; //Returns the value of AutoPeriodText
    inline void SetAutoPeriodText(bool value); //Sets the value of the AutoPeriodText property

    /*
    Property BeginDateParameter

    property BeginDateParameter

    */
    inline QString BeginDateParameter() const; //Returns the value of BeginDateParameter
    inline void SetBeginDateParameter(const QString& value); //Sets the value of the BeginDateParameter property

    /*
    Property EndDateParameter

    property EndDateParameter

    */
    inline QString EndDateParameter() const; //Returns the value of EndDateParameter
    inline void SetEndDateParameter(const QString& value); //Sets the value of the EndDateParameter property

    /*
    Property GroupAutoSum

    property GroupAutoSum

    */
    inline bool GroupAutoSum() const; //Returns the value of GroupAutoSum
    inline void SetGroupAutoSum(bool value); //Sets the value of the GroupAutoSum property

    /*
    Property HCrossFields

    property HCrossFields

    */
    inline QString HCrossFields() const; //Returns the value of HCrossFields
    inline void SetHCrossFields(const QString& value); //Sets the value of the HCrossFields property

    /*
    Property HCrossPeriodType

    property HCrossPeriodType

    */
    inline grproLib::tagGRPeriodType HCrossPeriodType() const; //Returns the value of HCrossPeriodType
    inline void SetHCrossPeriodType(grproLib::tagGRPeriodType value); //Sets the value of the HCrossPeriodType property

    /*
    Property HPercentColumns

    property HPercentColumns

    */
    inline QString HPercentColumns() const; //Returns the value of HPercentColumns
    inline void SetHPercentColumns(const QString& value); //Sets the value of the HPercentColumns property

    /*
    Property HResort

    property HResort

    */
    inline bool HResort() const; //Returns the value of HResort
    inline void SetHResort(bool value); //Sets the value of the HResort property

    /*
    Property HSortAsc

    property HSortAsc

    */
    inline bool HSortAsc() const; //Returns the value of HSortAsc
    inline void SetHSortAsc(bool value); //Sets the value of the HSortAsc property

    /*
    Property HTotalAtFirst

    property HTotalAtFirst

    */
    inline bool HTotalAtFirst() const; //Returns the value of HTotalAtFirst
    inline void SetHTotalAtFirst(bool value); //Sets the value of the HTotalAtFirst property

    /*
    Property ListCols

    property ListCols

    */
    inline int ListCols() const; //Returns the value of ListCols
    inline void SetListCols(int value); //Sets the value of the ListCols property

    /*
    Property PercentFormat

    property PercentFormat

    */
    inline QString PercentFormat() const; //Returns the value of PercentFormat
    inline void SetPercentFormat(const QString& value); //Sets the value of the PercentFormat property

    /*
    Property Recordset

    property Recordset

    */
    inline grproLib::IGRRecordset* Recordset() const; //Returns the value of Recordset

    /*
    Property SubtotalCols

    property SubtotalCols

    */
    inline int SubtotalCols() const; //Returns the value of SubtotalCols
    inline void SetSubtotalCols(int value); //Sets the value of the SubtotalCols property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TotalCols

    property TotalCols

    */
    inline int TotalCols() const; //Returns the value of TotalCols
    inline void SetTotalCols(int value); //Sets the value of the TotalCols property

    /*
    Property TotalHPercentColumns

    property TotalHPercentColumns

    */
    inline QString TotalHPercentColumns() const; //Returns the value of TotalHPercentColumns
    inline void SetTotalHPercentColumns(const QString& value); //Sets the value of the TotalHPercentColumns property

    /*
    Property TotalVPercentColumns

    property TotalVPercentColumns

    */
    inline QString TotalVPercentColumns() const; //Returns the value of TotalVPercentColumns
    inline void SetTotalVPercentColumns(const QString& value); //Sets the value of the TotalVPercentColumns property

    /*
    Property VCrossFields

    property VCrossFields

    */
    inline QString VCrossFields() const; //Returns the value of VCrossFields
    inline void SetVCrossFields(const QString& value); //Sets the value of the VCrossFields property

    /*
    Property VPercentColumns

    property VPercentColumns

    */
    inline QString VPercentColumns() const; //Returns the value of VPercentColumns
    inline void SetVPercentColumns(const QString& value); //Sets the value of the VPercentColumns property

    /*
    Property VResort

    property VResort

    */
    inline bool VResort() const; //Returns the value of VResort
    inline void SetVResort(bool value); //Sets the value of the VResort property

    /*
    Property VSortAsc

    property VSortAsc

    */
    inline bool VSortAsc() const; //Returns the value of VSortAsc
    inline void SetVSortAsc(bool value); //Sets the value of the VSortAsc property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method GetCurPeriodBeginDate

    method GetCurPeriodBeginDate

    */
    inline QDateTime GetCurPeriodBeginDate();

    /*
    Method GetCurPeriodEndDate

    method GetCurPeriodEndDate

    */
    inline QDateTime GetCurPeriodEndDate();

    /*
    Method HBeginAddItem

    method HBeginAddItem

    */
    inline void HBeginAddItem();

    /*
    Method HEndAddItem

    method HEndAddItem

    */
    inline void HEndAddItem();

    /*
    Method VBeginAddItem

    method VBeginAddItem

    */
    inline void VBeginAddItem();

    /*
    Method VEndAddItem

    method VEndAddItem

    */
    inline void VEndAddItem();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRPageHeader : public QAxObject
{
public:
    IGRPageHeader(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRPageFooter : public QAxObject
{
public:
    IGRPageFooter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRReportHeader : public QAxObject
{
public:
    IGRReportHeader(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NewPage

    property NewPage

    */
    inline grproLib::tagGRNewPageStyle NewPage() const; //Returns the value of NewPage
    inline void SetNewPage(grproLib::tagGRNewPageStyle value); //Sets the value of the NewPage property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property RepeatOnPage

    property RepeatOnPage

    */
    inline bool RepeatOnPage() const; //Returns the value of RepeatOnPage
    inline void SetRepeatOnPage(bool value); //Sets the value of the RepeatOnPage property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRReportFooter : public QAxObject
{
public:
    IGRReportFooter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AppendBlankRowExclude

    property AppendBlankRowExclude

    */
    inline bool AppendBlankRowExclude() const; //Returns the value of AppendBlankRowExclude
    inline void SetAppendBlankRowExclude(bool value); //Sets the value of the AppendBlankRowExclude property

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NewPage

    property NewPage

    */
    inline grproLib::tagGRNewPageStyle NewPage() const; //Returns the value of NewPage
    inline void SetNewPage(grproLib::tagGRNewPageStyle value); //Sets the value of the NewPage property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintAtBottom

    property PrintAtBottom

    */
    inline bool PrintAtBottom() const; //Returns the value of PrintAtBottom
    inline void SetPrintAtBottom(bool value); //Sets the value of the PrintAtBottom property

    /*
    Property RepeatOnPage

    property RepeatOnPage

    */
    inline bool RepeatOnPage() const; //Returns the value of RepeatOnPage
    inline void SetRepeatOnPage(bool value); //Sets the value of the RepeatOnPage property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRParameters : public QAxObject
{
public:
    IGRParameters(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    method Add

    */
    inline grproLib::IGRParameter* Add();

    /*
    Method IndexByName

    method IndexByName

    */
    inline int IndexByName(const QString& Name);

    /*
    Method Item
    */
    inline grproLib::IGRParameter* Item(const QVariant& Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(const QVariant& Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRParameter : public QAxObject
{
public:
    IGRParameter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AsBoolean

    property AsBoolean

    */
    inline bool AsBoolean() const; //Returns the value of AsBoolean
    inline void SetAsBoolean(bool value); //Sets the value of the AsBoolean property

    /*
    Property AsDateTime

    property AsDateTime

    */
    inline QDateTime AsDateTime() const; //Returns the value of AsDateTime
    inline void SetAsDateTime(const QDateTime& value); //Sets the value of the AsDateTime property

    /*
    Property AsFloat

    property AsFloat

    */
    inline double AsFloat() const; //Returns the value of AsFloat
    inline void SetAsFloat(double value); //Sets the value of the AsFloat property

    /*
    Property AsInteger

    property AsInteger

    */
    inline int AsInteger() const; //Returns the value of AsInteger
    inline void SetAsInteger(int value); //Sets the value of the AsInteger property

    /*
    Property AsString

    property AsString

    */
    inline QString AsString() const; //Returns the value of AsString
    inline void SetAsString(const QString& value); //Sets the value of the AsString property

    /*
    Property DataType

    property DataType

    */
    inline grproLib::tagGRParameterDataType DataType() const; //Returns the value of DataType
    inline void SetDataType(grproLib::tagGRParameterDataType value); //Sets the value of the DataType property

    /*
    Property DisplayText

    property DisplayText

    */
    inline QString DisplayText() const; //Returns the value of DisplayText

    /*
    Property Format

    property Format

    */
    inline QString Format() const; //Returns the value of Format
    inline void SetFormat(const QString& value); //Sets the value of the Format property

    /*
    Property IsNull

    property IsNull

    */
    inline bool IsNull() const; //Returns the value of IsNull
    inline void SetIsNull(bool value); //Sets the value of the IsNull property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Value

    property Value

    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRSections : public QAxObject
{
public:
    IGRSections(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    method AddSection

    */
    inline grproLib::IGRSection* Add(grproLib::tagGRSectionType SectionType);

    /*
    Method Item
    */
    inline grproLib::IGRSection* Item(const QVariant& Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(const QVariant& Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRPrinter : public QAxObject
{
public:
    IGRPrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BottomMargin

    property BottomMargin

    */
    inline double BottomMargin() const; //Returns the value of BottomMargin
    inline void SetBottomMargin(double value); //Sets the value of the BottomMargin property

    /*
    Property CanCollate

    property CanCollate

    */
    inline bool CanCollate() const; //Returns the value of CanCollate

    /*
    Property CanDuplex

    property CanDuplex

    */
    inline bool CanDuplex() const; //Returns the value of CanDuplex

    /*
    Property Collate

    property Collate

    */
    inline bool Collate() const; //Returns the value of Collate
    inline void SetCollate(bool value); //Sets the value of the Collate property

    /*
    Property Copies

    property Copies

    */
    inline int Copies() const; //Returns the value of Copies
    inline void SetCopies(int value); //Sets the value of the Copies property

    /*
    Property Duplex

    property Duplex

    */
    inline grproLib::tagGRDuplexKind Duplex() const; //Returns the value of Duplex
    inline void SetDuplex(grproLib::tagGRDuplexKind value); //Sets the value of the Duplex property

    /*
    Property LeftMargin

    property LeftMargin

    */
    inline double LeftMargin() const; //Returns the value of LeftMargin
    inline void SetLeftMargin(double value); //Sets the value of the LeftMargin property

    /*
    Property Online

    property Online

    */
    inline bool Online() const; //Returns the value of Online

    /*
    Property PageCount

    property PageCount

    */
    inline int PageCount() const; //Returns the value of PageCount
    inline void SetPageCount(int value); //Sets the value of the PageCount property

    /*
    Property PaperKind

    property PaperKind

    */
    inline grproLib::tagGRPaperKind PaperKind() const; //Returns the value of PaperKind
    inline void SetPaperKind(grproLib::tagGRPaperKind value); //Sets the value of the PaperKind property

    /*
    Property PaperLength

    property PaperLength

    */
    inline double PaperLength() const; //Returns the value of PaperLength
    inline void SetPaperLength(double value); //Sets the value of the PaperLength property

    /*
    Property PaperName

    property PaperName

    */
    inline QString PaperName() const; //Returns the value of PaperName
    inline void SetPaperName(const QString& value); //Sets the value of the PaperName property

    /*
    Property PaperOrientation

    property PaperOrientation

    */
    inline grproLib::tagGRPaperOrientation PaperOrientation() const; //Returns the value of PaperOrientation
    inline void SetPaperOrientation(grproLib::tagGRPaperOrientation value); //Sets the value of the PaperOrientation property

    /*
    Property PaperSize

    property PaperSize

    */
    inline int PaperSize() const; //Returns the value of PaperSize
    inline void SetPaperSize(int value); //Sets the value of the PaperSize property

    /*
    Property PaperSource

    property PaperSource

    */
    inline grproLib::tagGRPaperSourceKind PaperSource() const; //Returns the value of PaperSource
    inline void SetPaperSource(grproLib::tagGRPaperSourceKind value); //Sets the value of the PaperSource property

    /*
    Property PaperWidth

    property PaperWidth

    */
    inline double PaperWidth() const; //Returns the value of PaperWidth
    inline void SetPaperWidth(double value); //Sets the value of the PaperWidth property

    /*
    Property PrintOffsetSaveToLocal

    property PrintOffsetSaveToLocal

    */
    inline bool PrintOffsetSaveToLocal() const; //Returns the value of PrintOffsetSaveToLocal
    inline void SetPrintOffsetSaveToLocal(bool value); //Sets the value of the PrintOffsetSaveToLocal property

    /*
    Property PrintOffsetX

    property PrintOffsetX

    */
    inline double PrintOffsetX() const; //Returns the value of PrintOffsetX
    inline void SetPrintOffsetX(double value); //Sets the value of the PrintOffsetX property

    /*
    Property PrintOffsetY

    property PrintOffsetY

    */
    inline double PrintOffsetY() const; //Returns the value of PrintOffsetY
    inline void SetPrintOffsetY(double value); //Sets the value of the PrintOffsetY property

    /*
    Property PrintPageType

    property PrintPageType

    */
    inline grproLib::tagGRPrintPageType PrintPageType() const; //Returns the value of PrintPageType
    inline void SetPrintPageType(grproLib::tagGRPrintPageType value); //Sets the value of the PrintPageType property

    /*
    Property PrintRangeType

    property PrintRangeType

    */
    inline grproLib::tagGRPrintRangeType PrintRangeType() const; //Returns the value of PrintRangeType
    inline void SetPrintRangeType(grproLib::tagGRPrintRangeType value); //Sets the value of the PrintRangeType property

    /*
    Property PrinterName

    property PrinterName

    */
    inline QString PrinterName() const; //Returns the value of PrinterName
    inline void SetPrinterName(const QString& value); //Sets the value of the PrinterName property

    /*
    Property RightMargin

    property RightMargin

    */
    inline double RightMargin() const; //Returns the value of RightMargin
    inline void SetRightMargin(double value); //Sets the value of the RightMargin property

    /*
    Property SelectionPrintPages

    property SelectionPrintPages

    */
    inline QString SelectionPrintPages() const; //Returns the value of SelectionPrintPages
    inline void SetSelectionPrintPages(const QString& value); //Sets the value of the SelectionPrintPages property

    /*
    Property SheetPages

    property SheetPages

    */
    inline grproLib::tagGRSheetPages SheetPages() const; //Returns the value of SheetPages
    inline void SetSheetPages(grproLib::tagGRSheetPages value); //Sets the value of the SheetPages property

    /*
    Property SheetPaperSize

    property SheetPaperSize

    */
    inline int SheetPaperSize() const; //Returns the value of SheetPaperSize
    inline void SetSheetPaperSize(int value); //Sets the value of the SheetPaperSize property

    /*
    Property SupportCustomPaper

    property SupportCustomPaper

    */
    inline bool SupportCustomPaper() const; //Returns the value of SupportCustomPaper

    /*
    Property TopMargin

    property TopMargin

    */
    inline double TopMargin() const; //Returns the value of TopMargin
    inline void SetTopMargin(double value); //Sets the value of the TopMargin property

    /*
    Property _CurPageNo

    property _CurPageNo

    */
    inline int _CurPageNo() const; //Returns the value of _CurPageNo
    inline void set_CurPageNo(int value); //Sets the value of the _CurPageNo property

    /*
    Property _PrinterDC

    property _PrinterDC

    */
    inline uint _PrinterDC() const; //Returns the value of _PrinterDC

    /*
    Property _PrinterHandle

    property _PrinterHandle

    */
    inline uint _PrinterHandle() const; //Returns the value of _PrinterHandle

    /*
    Method EndDocPrinter

    method EndDocPrinter

    */
    inline bool EndDocPrinter();

    /*
    Method EndPagePrinter

    method EndPagePrinter

    */
    inline bool EndPagePrinter();

    /*
    Method PageSetupDialog

    method PageSetupDialog

    */
    inline bool PageSetupDialog();

    /*
    Method PrintDialog

    method PrintDialog

    */
    inline bool PrintDialog();

    /*
    Method PrinterSetupDialog

    method PrinterSetupDialog

    */
    inline bool PrinterSetupDialog();

    /*
    Method StartDocPrinter

    method StartDocPrinter

    */
    inline bool StartDocPrinter(const QString& DocTitle);

    /*
    Method StartPagePrinter

    method StartPagePrinter

    */
    inline bool StartPagePrinter();

    /*
    Method WritePrinter

    method WritePrinter

    */
    inline bool WritePrinter(uint& pDataBuf, int DataLen);

    /*
    Method _ClosePrinter

    method _ClosePrinter

    */
    inline void _ClosePrinter();

    /*
    Method _OpenPrinter

    method _OpenPrinter

    */
    inline void _OpenPrinter();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRImageList : public QAxObject
{
public:
    IGRImageList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Method Add

    method Add

    */
    inline int Add(stdole::IPicture* pPicture);

    /*
    Method AddFromFile

    method AddFromFile

    */
    inline int AddFromFile(const QString& PathFile);

    /*
    Method AddFromMemory

    method AddFromMemory

    */
    inline int AddFromMemory(uint& pData, int ByteCount);

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method Item
    */
    inline stdole::IPicture* Item(int Index);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(int Index);

    /*
    Method RemoveAll

    method RemoveAll

    */
    inline void RemoveAll();

    /*
    Method _GRAdd
    */
    inline void _GRAdd(grproLib::IGRPicture* pPicture);

    /*
    Method _GRItem
    */
    inline grproLib::IGRPicture* _GRItem(int Index);

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRGraphics : public QAxObject
{
public:
    IGRGraphics(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Height
    */
    inline int Height() const; //Returns the value of Height

    /*
    Property Left
    */
    inline int Left() const; //Returns the value of Left

    /*
    Property Top
    */
    inline int Top() const; //Returns the value of Top

    /*
    Property Width
    */
    inline int Width() const; //Returns the value of Width

    /*
    Method Arc
    */
    inline void Arc(int cx, int cy, int r, double BeginAngleDegree, double EndAngleDegree);

    /*
    Method DrawOrientationString
    */
    inline void DrawOrientationString(const QString& String, int x, int y, int Width, int Height, grproLib::tagGRTextOrientation TextOrientation, bool WordWrap, int CharacterSpacing, int LineSpacing);

    /*
    Method DrawRotationString
    */
    inline void DrawRotationString(const QString& String, int x, int y, int Width, int Height, double TextAngle);

    /*
    Method DrawSpacedString
    */
    inline void DrawSpacedString(const QString& String, int x, int y, int Width, int Height, grproLib::tagGRTextAlign TextAlign, bool WordWrap, int CharacterSpacing, int LineSpacing);

    /*
    Method DrawString
    */
    inline void DrawString(const QString& String, int x, int y, int Width, int Height, grproLib::tagGRTextAlign TextAlign, bool WordWrap, bool EndEllipsis, bool Underline);

    /*
    Method Ellipse
    */
    inline void Ellipse(int x, int y, int Width, int Height, bool ToFill);

    /*
    Method EllipseArc
    */
    inline void EllipseArc(int Left, int Top, int Width, int Height, double BeginAngleDegree, double EndAngleDegree);

    /*
    Method EllipsePie
    */
    inline void EllipsePie(int Left, int Top, int Width, int Height, double BeginAngleDegree, double EndAngleDegree, bool ToFill);

    /*
    Method FillRect
    */
    inline void FillRect(int x, int y, int Width, int Height, const QColor& FillColor);

    /*
    Method FontClone
    */
    inline QFont FontClone();

    /*
    Method FontPointChangeTo
    */
    inline void FontPointChangeTo(double Point);

    /*
    Method FontPointRestore
    */
    inline void FontPointRestore();

    /*
    Method LineTo
    */
    inline void LineTo(int x, int y);

    /*
    Method MoveTo
    */
    inline void MoveTo(int x, int y);

    /*
    Method OutRotateString
    */
    inline void OutRotateString(const QString& String, int x, int y, double RotateDegree);

    /*
    Method OutString
    */
    inline void OutString(const QString& String, int x, int y);

    /*
    Method OutStringCalcHeight
    */
    inline int OutStringCalcHeight(const QString& String);

    /*
    Method OutStringCalcWidth
    */
    inline int OutStringCalcWidth(const QString& String);

    /*
    Method Pie
    */
    inline void Pie(int x, int y, int r, double BeginAngleDegree, double EndAngleDegree, bool ToFill);

    /*
    Method PopClipRect
    */
    inline void PopClipRect();

    /*
    Method PushClipRect
    */
    inline void PushClipRect(int x, int y, int Width, int Height);

    /*
    Method Rectangle
    */
    inline void Rectangle(int x, int y, int Width, int Height, bool ToFill);

    /*
    Method RestoreFillColor
    */
    inline void RestoreFillColor();

    /*
    Method RestoreFont
    */
    inline void RestoreFont();

    /*
    Method RestorePen
    */
    inline void RestorePen();

    /*
    Method RestoreTextColor
    */
    inline void RestoreTextColor();

    /*
    Method RoundRect
    */
    inline void RoundRect(int x, int y, int Width, int Height, int cornerx, int cornery, bool ToFill);

    /*
    Method SelectFillColor
    */
    inline void SelectFillColor(const QColor& BrushColor);

    /*
    Method SelectFont
    */
    inline void SelectFont(const QFont& pFont);

    /*
    Method SelectPen
    */
    inline void SelectPen(double PenWidth, const QColor& PenColor, grproLib::tagGRPenStyle PenStyle);

    /*
    Method SelectTextColor
    */
    inline void SelectTextColor(const QColor& TextColor);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRExportOption : public QAxObject
{
public:
    IGRExportOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2XLSOption : public QAxObject
{
public:
    IGRE2XLSOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property ColumnAsDetailGrid

    property ColumnAsDetailGrid

    */
    inline bool ColumnAsDetailGrid() const; //Returns the value of ColumnAsDetailGrid
    inline void SetColumnAsDetailGrid(bool value); //Sets the value of the ColumnAsDetailGrid property

    /*
    Property ExpandRowHeight

    property ExpandRowHeight

    */
    inline bool ExpandRowHeight() const; //Returns the value of ExpandRowHeight
    inline void SetExpandRowHeight(bool value); //Sets the value of the ExpandRowHeight property

    /*
    Property ExportPageBreak

    property ExportPageBreak

    */
    inline bool ExportPageBreak() const; //Returns the value of ExportPageBreak
    inline void SetExportPageBreak(bool value); //Sets the value of the ExportPageBreak property

    /*
    Property ExportPageHeaderFooter

    property ExportPageHeaderFooter

    */
    inline bool ExportPageHeaderFooter() const; //Returns the value of ExportPageHeaderFooter
    inline void SetExportPageHeaderFooter(bool value); //Sets the value of the ExportPageHeaderFooter property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property MinColumnWidth

    property MinColumnWidth

    */
    inline int MinColumnWidth() const; //Returns the value of MinColumnWidth
    inline void SetMinColumnWidth(int value); //Sets the value of the MinColumnWidth property

    /*
    Property MinRowHeight

    property MinRowHeight

    */
    inline int MinRowHeight() const; //Returns the value of MinRowHeight
    inline void SetMinRowHeight(int value); //Sets the value of the MinRowHeight property

    /*
    Property OnlyExportDetailGrid

    property OnlyExportDetailGrid

    */
    inline bool OnlyExportDetailGrid() const; //Returns the value of OnlyExportDetailGrid
    inline void SetOnlyExportDetailGrid(bool value); //Sets the value of the OnlyExportDetailGrid property

    /*
    Property OnlyExportPureText

    property OnlyExportPureText

    */
    inline bool OnlyExportPureText() const; //Returns the value of OnlyExportPureText
    inline void SetOnlyExportPureText(bool value); //Sets the value of the OnlyExportPureText property

    /*
    Property SameAsPrint

    property SameAsPrint

    */
    inline bool SameAsPrint() const; //Returns the value of SameAsPrint
    inline void SetSameAsPrint(bool value); //Sets the value of the SameAsPrint property

    /*
    Property SupressEmptyLines

    property SupressEmptyLines

    */
    inline bool SupressEmptyLines() const; //Returns the value of SupressEmptyLines
    inline void SetSupressEmptyLines(bool value); //Sets the value of the SupressEmptyLines property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2CellOption : public QAxObject
{
public:
    IGRE2CellOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property ColumnAsDetailGrid

    property ColumnAsDetailGrid

    */
    inline bool ColumnAsDetailGrid() const; //Returns the value of ColumnAsDetailGrid
    inline void SetColumnAsDetailGrid(bool value); //Sets the value of the ColumnAsDetailGrid property

    /*
    Property ExportPageBreak

    property ExportPageBreak

    */
    inline bool ExportPageBreak() const; //Returns the value of ExportPageBreak
    inline void SetExportPageBreak(bool value); //Sets the value of the ExportPageBreak property

    /*
    Property ExportPageHeaderFooter

    property ExportPageHeaderFooter

    */
    inline bool ExportPageHeaderFooter() const; //Returns the value of ExportPageHeaderFooter
    inline void SetExportPageHeaderFooter(bool value); //Sets the value of the ExportPageHeaderFooter property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property OnlyExportDetailGrid

    property OnlyExportDetailGrid

    */
    inline bool OnlyExportDetailGrid() const; //Returns the value of OnlyExportDetailGrid
    inline void SetOnlyExportDetailGrid(bool value); //Sets the value of the OnlyExportDetailGrid property

    /*
    Property OnlyExportPureText

    property OnlyExportPureText

    */
    inline bool OnlyExportPureText() const; //Returns the value of OnlyExportPureText
    inline void SetOnlyExportPureText(bool value); //Sets the value of the OnlyExportPureText property

    /*
    Property SameAsPrint

    property SameAsPrint

    */
    inline bool SameAsPrint() const; //Returns the value of SameAsPrint
    inline void SetSameAsPrint(bool value); //Sets the value of the SameAsPrint property

    /*
    Property SupressEmptyLines

    property SupressEmptyLines

    */
    inline bool SupressEmptyLines() const; //Returns the value of SupressEmptyLines
    inline void SetSupressEmptyLines(bool value); //Sets the value of the SupressEmptyLines property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2TXTOption : public QAxObject
{
public:
    IGRE2TXTOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property ColumnAsDetailGrid

    property ColumnAsDetailGrid

    */
    inline bool ColumnAsDetailGrid() const; //Returns the value of ColumnAsDetailGrid
    inline void SetColumnAsDetailGrid(bool value); //Sets the value of the ColumnAsDetailGrid property

    /*
    Property ExportPageBreak

    property ExportPageBreak

    */
    inline bool ExportPageBreak() const; //Returns the value of ExportPageBreak
    inline void SetExportPageBreak(bool value); //Sets the value of the ExportPageBreak property

    /*
    Property ExportPageHeaderFooter

    property ExportPageHeaderFooter

    */
    inline bool ExportPageHeaderFooter() const; //Returns the value of ExportPageHeaderFooter
    inline void SetExportPageHeaderFooter(bool value); //Sets the value of the ExportPageHeaderFooter property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property OnlyExportDetailGrid

    property OnlyExportDetailGrid

    */
    inline bool OnlyExportDetailGrid() const; //Returns the value of OnlyExportDetailGrid
    inline void SetOnlyExportDetailGrid(bool value); //Sets the value of the OnlyExportDetailGrid property

    /*
    Property OnlyExportPureText

    property OnlyExportPureText

    */
    inline bool OnlyExportPureText() const; //Returns the value of OnlyExportPureText
    inline void SetOnlyExportPureText(bool value); //Sets the value of the OnlyExportPureText property

    /*
    Property SameAsPrint

    property SameAsPrint

    */
    inline bool SameAsPrint() const; //Returns the value of SameAsPrint
    inline void SetSameAsPrint(bool value); //Sets the value of the SameAsPrint property

    /*
    Property SupressEmptyLines

    property SupressEmptyLines

    */
    inline bool SupressEmptyLines() const; //Returns the value of SupressEmptyLines
    inline void SetSupressEmptyLines(bool value); //Sets the value of the SupressEmptyLines property

    /*
    Property TextEncode

    property TextEncode

    */
    inline grproLib::tagGRTextEncodeMode TextEncode() const; //Returns the value of TextEncode
    inline void SetTextEncode(grproLib::tagGRTextEncodeMode value); //Sets the value of the TextEncode property

    /*
    Property UsingCNGraphChar

    property UsingCNGraphChar

    */
    inline bool UsingCNGraphChar() const; //Returns the value of UsingCNGraphChar
    inline void SetUsingCNGraphChar(bool value); //Sets the value of the UsingCNGraphChar property

    /*
    Property UsingTabChar

    property UsingTabChar

    */
    inline bool UsingTabChar() const; //Returns the value of UsingTabChar
    inline void SetUsingTabChar(bool value); //Sets the value of the UsingTabChar property

    /*
    Property WriteDetailGridLine

    property WriteDetailGridLine

    */
    inline bool WriteDetailGridLine() const; //Returns the value of WriteDetailGridLine
    inline void SetWriteDetailGridLine(bool value); //Sets the value of the WriteDetailGridLine property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2HTMOption : public QAxObject
{
public:
    IGRE2HTMOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property ColumnAsDetailGrid

    property ColumnAsDetailGrid

    */
    inline bool ColumnAsDetailGrid() const; //Returns the value of ColumnAsDetailGrid
    inline void SetColumnAsDetailGrid(bool value); //Sets the value of the ColumnAsDetailGrid property

    /*
    Property ExportPageBreak

    property ExportPageBreak

    */
    inline bool ExportPageBreak() const; //Returns the value of ExportPageBreak
    inline void SetExportPageBreak(bool value); //Sets the value of the ExportPageBreak property

    /*
    Property ExportPageHeaderFooter

    property ExportPageHeaderFooter

    */
    inline bool ExportPageHeaderFooter() const; //Returns the value of ExportPageHeaderFooter
    inline void SetExportPageHeaderFooter(bool value); //Sets the value of the ExportPageHeaderFooter property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property MultiPage

    property MultiPage

    */
    inline bool MultiPage() const; //Returns the value of MultiPage
    inline void SetMultiPage(bool value); //Sets the value of the MultiPage property

    /*
    Property OnlyExportDetailGrid

    property OnlyExportDetailGrid

    */
    inline bool OnlyExportDetailGrid() const; //Returns the value of OnlyExportDetailGrid
    inline void SetOnlyExportDetailGrid(bool value); //Sets the value of the OnlyExportDetailGrid property

    /*
    Property OnlyExportPureText

    property OnlyExportPureText

    */
    inline bool OnlyExportPureText() const; //Returns the value of OnlyExportPureText
    inline void SetOnlyExportPureText(bool value); //Sets the value of the OnlyExportPureText property

    /*
    Property PicturePath

    property PicturePath

    */
    inline QString PicturePath() const; //Returns the value of PicturePath
    inline void SetPicturePath(const QString& value); //Sets the value of the PicturePath property

    /*
    Property SameAsPrint

    property SameAsPrint

    */
    inline bool SameAsPrint() const; //Returns the value of SameAsPrint
    inline void SetSameAsPrint(bool value); //Sets the value of the SameAsPrint property

    /*
    Property ShowNavLink

    property ShowNavLink

    */
    inline bool ShowNavLink() const; //Returns the value of ShowNavLink
    inline void SetShowNavLink(bool value); //Sets the value of the ShowNavLink property

    /*
    Property SupressEmptyLines

    property SupressEmptyLines

    */
    inline bool SupressEmptyLines() const; //Returns the value of SupressEmptyLines
    inline void SetSupressEmptyLines(bool value); //Sets the value of the SupressEmptyLines property

    /*
    Property Title

    property Title

    */
    inline QString Title() const; //Returns the value of Title
    inline void SetTitle(const QString& value); //Sets the value of the Title property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2RTFOption : public QAxObject
{
public:
    IGRE2RTFOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property Author

    property Author

    */
    inline QString Author() const; //Returns the value of Author
    inline void SetAuthor(const QString& value); //Sets the value of the Author property

    /*
    Property ColumnAsDetailGrid

    property ColumnAsDetailGrid

    */
    inline bool ColumnAsDetailGrid() const; //Returns the value of ColumnAsDetailGrid
    inline void SetColumnAsDetailGrid(bool value); //Sets the value of the ColumnAsDetailGrid property

    /*
    Property Creator

    property Creator

    */
    inline QString Creator() const; //Returns the value of Creator
    inline void SetCreator(const QString& value); //Sets the value of the Creator property

    /*
    Property ExportPageBreak

    property ExportPageBreak

    */
    inline bool ExportPageBreak() const; //Returns the value of ExportPageBreak
    inline void SetExportPageBreak(bool value); //Sets the value of the ExportPageBreak property

    /*
    Property ExportPageHeaderFooter

    property ExportPageHeaderFooter

    */
    inline bool ExportPageHeaderFooter() const; //Returns the value of ExportPageHeaderFooter
    inline void SetExportPageHeaderFooter(bool value); //Sets the value of the ExportPageHeaderFooter property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property OnlyExportDetailGrid

    property OnlyExportDetailGrid

    */
    inline bool OnlyExportDetailGrid() const; //Returns the value of OnlyExportDetailGrid
    inline void SetOnlyExportDetailGrid(bool value); //Sets the value of the OnlyExportDetailGrid property

    /*
    Property OnlyExportPureText

    property OnlyExportPureText

    */
    inline bool OnlyExportPureText() const; //Returns the value of OnlyExportPureText
    inline void SetOnlyExportPureText(bool value); //Sets the value of the OnlyExportPureText property

    /*
    Property SameAsPrint

    property SameAsPrint

    */
    inline bool SameAsPrint() const; //Returns the value of SameAsPrint
    inline void SetSameAsPrint(bool value); //Sets the value of the SameAsPrint property

    /*
    Property SupressEmptyLines

    property SupressEmptyLines

    */
    inline bool SupressEmptyLines() const; //Returns the value of SupressEmptyLines
    inline void SetSupressEmptyLines(bool value); //Sets the value of the SupressEmptyLines property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2PDFOption : public QAxObject
{
public:
    IGRE2PDFOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AnsiTextMode

    property AnsiTextMode

    */
    inline bool AnsiTextMode() const; //Returns the value of AnsiTextMode
    inline void SetAnsiTextMode(bool value); //Sets the value of the AnsiTextMode property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property Author

    property Author

    */
    inline QString Author() const; //Returns the value of Author
    inline void SetAuthor(const QString& value); //Sets the value of the Author property

    /*
    Property Creator

    property Creator

    */
    inline QString Creator() const; //Returns the value of Creator
    inline void SetCreator(const QString& value); //Sets the value of the Creator property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property Subject

    property Subject

    */
    inline QString Subject() const; //Returns the value of Subject
    inline void SetSubject(const QString& value); //Sets the value of the Subject property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2CSVOption : public QAxObject
{
public:
    IGRE2CSVOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property ColumnAsDetailGrid

    property ColumnAsDetailGrid

    */
    inline bool ColumnAsDetailGrid() const; //Returns the value of ColumnAsDetailGrid
    inline void SetColumnAsDetailGrid(bool value); //Sets the value of the ColumnAsDetailGrid property

    /*
    Property DelimiterChar

    property DelimiterChar

    */
    inline int DelimiterChar() const; //Returns the value of DelimiterChar
    inline void SetDelimiterChar(int value); //Sets the value of the DelimiterChar property

    /*
    Property ExportPageBreak

    property ExportPageBreak

    */
    inline bool ExportPageBreak() const; //Returns the value of ExportPageBreak
    inline void SetExportPageBreak(bool value); //Sets the value of the ExportPageBreak property

    /*
    Property ExportPageHeaderFooter

    property ExportPageHeaderFooter

    */
    inline bool ExportPageHeaderFooter() const; //Returns the value of ExportPageHeaderFooter
    inline void SetExportPageHeaderFooter(bool value); //Sets the value of the ExportPageHeaderFooter property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Property OnlyExportDetailGrid

    property OnlyExportDetailGrid

    */
    inline bool OnlyExportDetailGrid() const; //Returns the value of OnlyExportDetailGrid
    inline void SetOnlyExportDetailGrid(bool value); //Sets the value of the OnlyExportDetailGrid property

    /*
    Property OnlyExportPureText

    property OnlyExportPureText

    */
    inline bool OnlyExportPureText() const; //Returns the value of OnlyExportPureText
    inline void SetOnlyExportPureText(bool value); //Sets the value of the OnlyExportPureText property

    /*
    Property QuoteText

    property QuoteText

    */
    inline QString QuoteText() const; //Returns the value of QuoteText
    inline void SetQuoteText(const QString& value); //Sets the value of the QuoteText property

    /*
    Property SameAsPrint

    property SameAsPrint

    */
    inline bool SameAsPrint() const; //Returns the value of SameAsPrint
    inline void SetSameAsPrint(bool value); //Sets the value of the SameAsPrint property

    /*
    Property SupressEmptyLines

    property SupressEmptyLines

    */
    inline bool SupressEmptyLines() const; //Returns the value of SupressEmptyLines
    inline void SetSupressEmptyLines(bool value); //Sets the value of the SupressEmptyLines property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRE2IMGOption : public QAxObject
{
public:
    IGRE2IMGOption(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AbortOpenFile

    property AbortOpenFile

    */
    inline bool AbortOpenFile() const; //Returns the value of AbortOpenFile
    inline void SetAbortOpenFile(bool value); //Sets the value of the AbortOpenFile property

    /*
    Property AbortShowOptionDlg

    property AbortShowOptionDlg

    */
    inline bool AbortShowOptionDlg() const; //Returns the value of AbortShowOptionDlg
    inline void SetAbortShowOptionDlg(bool value); //Sets the value of the AbortShowOptionDlg property

    /*
    Property AsE2CSVOption

    property AsE2CSVOption

    */
    inline grproLib::IGRE2CSVOption* AsE2CSVOption() const; //Returns the value of AsE2CSVOption

    /*
    Property AsE2HTMOption

    property AsE2HTMOption

    */
    inline grproLib::IGRE2HTMOption* AsE2HTMOption() const; //Returns the value of AsE2HTMOption

    /*
    Property AsE2IMGOption

    property AsE2IMGOption

    */
    inline grproLib::IGRE2IMGOption* AsE2IMGOption() const; //Returns the value of AsE2IMGOption

    /*
    Property AsE2PDFOption

    property AsE2PDFOption

    */
    inline grproLib::IGRE2PDFOption* AsE2PDFOption() const; //Returns the value of AsE2PDFOption

    /*
    Property AsE2RTFOption

    property AsE2RTFOption

    */
    inline grproLib::IGRE2RTFOption* AsE2RTFOption() const; //Returns the value of AsE2RTFOption

    /*
    Property AsE2TXTOption

    property AsE2TXTOption

    */
    inline grproLib::IGRE2TXTOption* AsE2TXTOption() const; //Returns the value of AsE2TXTOption

    /*
    Property AsE2XLSOption

    property AsE2XLSOption

    */
    inline grproLib::IGRE2XLSOption* AsE2XLSOption() const; //Returns the value of AsE2XLSOption

    /*
    Property DPI

    property DPI

    */
    inline int DPI() const; //Returns the value of DPI
    inline void SetDPI(int value); //Sets the value of the DPI property

    /*
    Property ExportType

    property ExportType

    */
    inline grproLib::tagGRExportType ExportType() const; //Returns the value of ExportType

    /*
    Property FileName

    property FileName

    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property ImageType

    property ImageType

    */
    inline grproLib::tagGRExportImageType ImageType() const; //Returns the value of ImageType
    inline void SetImageType(grproLib::tagGRExportImageType value); //Sets the value of the ImageType property

    /*
    Property MailExportFile

    property MailExportFile

    */
    inline bool MailExportFile() const; //Returns the value of MailExportFile
    inline void SetMailExportFile(bool value); //Sets the value of the MailExportFile property

    /*
    Property MailSubject

    property MailSubject

    */
    inline QString MailSubject() const; //Returns the value of MailSubject
    inline void SetMailSubject(const QString& value); //Sets the value of the MailSubject property

    /*
    Property MailText

    property MailText

    */
    inline QString MailText() const; //Returns the value of MailText
    inline void SetMailText(const QString& value); //Sets the value of the MailText property

    /*
    Property MailTo

    property MailTo

    */
    inline QString MailTo() const; //Returns the value of MailTo
    inline void SetMailTo(const QString& value); //Sets the value of the MailTo property

    /*
    Method ShowOptionDlg

    method ShowOptionDlg

    */
    inline bool ShowOptionDlg();

    /*
    Method _GetFileTextResID

    method _GetFileTextResID

    */
    inline void _GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRSharePrintSetupObject : public QAxObject
{
public:
    IGRSharePrintSetupObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BottomMargin

    property BottomMargin

    */
    inline double BottomMargin() const; //Returns the value of BottomMargin
    inline void SetBottomMargin(double value); //Sets the value of the BottomMargin property

    /*
    Property LeftMargin

    property LeftMargin

    */
    inline double LeftMargin() const; //Returns the value of LeftMargin
    inline void SetLeftMargin(double value); //Sets the value of the LeftMargin property

    /*
    Property PaperKind

    property PaperKind

    */
    inline grproLib::tagGRPaperKind PaperKind() const; //Returns the value of PaperKind
    inline void SetPaperKind(grproLib::tagGRPaperKind value); //Sets the value of the PaperKind property

    /*
    Property PaperLength

    property PaperLength

    */
    inline double PaperLength() const; //Returns the value of PaperLength
    inline void SetPaperLength(double value); //Sets the value of the PaperLength property

    /*
    Property PaperName

    property PaperName

    */
    inline QString PaperName() const; //Returns the value of PaperName
    inline void SetPaperName(const QString& value); //Sets the value of the PaperName property

    /*
    Property PaperOrientation

    property PaperOrientation

    */
    inline grproLib::tagGRPaperOrientation PaperOrientation() const; //Returns the value of PaperOrientation
    inline void SetPaperOrientation(grproLib::tagGRPaperOrientation value); //Sets the value of the PaperOrientation property

    /*
    Property PaperSize

    property PaperSize

    */
    inline int PaperSize() const; //Returns the value of PaperSize
    inline void SetPaperSize(int value); //Sets the value of the PaperSize property

    /*
    Property PaperSource

    property PaperSource

    */
    inline grproLib::tagGRPaperSourceKind PaperSource() const; //Returns the value of PaperSource
    inline void SetPaperSource(grproLib::tagGRPaperSourceKind value); //Sets the value of the PaperSource property

    /*
    Property PaperWidth

    property PaperWidth

    */
    inline double PaperWidth() const; //Returns the value of PaperWidth
    inline void SetPaperWidth(double value); //Sets the value of the PaperWidth property

    /*
    Property PrinterName

    property PrinterName

    */
    inline QString PrinterName() const; //Returns the value of PrinterName
    inline void SetPrinterName(const QString& value); //Sets the value of the PrinterName property

    /*
    Property RightMargin

    property RightMargin

    */
    inline double RightMargin() const; //Returns the value of RightMargin
    inline void SetRightMargin(double value); //Sets the value of the RightMargin property

    /*
    Property TopMargin

    property TopMargin

    */
    inline double TopMargin() const; //Returns the value of TopMargin
    inline void SetTopMargin(double value); //Sets the value of the TopMargin property

    /*
    Property Unit

    property Unit

    */
    inline grproLib::tagGRUnit Unit() const; //Returns the value of Unit
    inline void SetUnit(grproLib::tagGRUnit value); //Sets the value of the Unit property

    /*
    Method PageSetupDialog

    method PageSetupDialog

    */
    inline bool PageSetupDialog();

    /*
    Method PrintDialog

    method PrintDialog

    */
    inline bool PrintDialog();

    /*
    Method PrinterSetupDialog

    method PrinterSetupDialog

    */
    inline bool PrinterSetupDialog();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRLine : public QAxObject
{
public:
    IGRLine(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PenColor

    property PenColor

    */
    inline QColor PenColor() const; //Returns the value of PenColor
    inline void SetPenColor(const QColor& value); //Sets the value of the PenColor property

    /*
    Property PenStyle

    property PenStyle

    */
    inline grproLib::tagGRPenStyle PenStyle() const; //Returns the value of PenStyle
    inline void SetPenStyle(grproLib::tagGRPenStyle value); //Sets the value of the PenStyle property

    /*
    Property PenWidth

    property PenWidth

    */
    inline double PenWidth() const; //Returns the value of PenWidth
    inline void SetPenWidth(double value); //Sets the value of the PenWidth property

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property X1

    property X1

    */
    inline double X1() const; //Returns the value of X1
    inline void SetX1(double value); //Sets the value of the X1 property

    /*
    Property X2

    property X2

    */
    inline double X2() const; //Returns the value of X2
    inline void SetX2(double value); //Sets the value of the X2 property

    /*
    Property Y1

    property Y1

    */
    inline double Y1() const; //Returns the value of Y1
    inline void SetY1(double value); //Sets the value of the Y1 property

    /*
    Property Y2

    property Y2

    */
    inline double Y2() const; //Returns the value of Y2
    inline void SetY2(double value); //Sets the value of the Y2 property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRBarcode : public QAxObject
{
public:
    IGRBarcode(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignColumn

    property AlignColumn

    */
    inline QString AlignColumn() const; //Returns the value of AlignColumn
    inline void SetAlignColumn(const QString& value); //Sets the value of the AlignColumn property

    /*
    Property AlignColumnEx

    property AlignColumnEx

    */
    inline QString AlignColumnEx() const; //Returns the value of AlignColumnEx
    inline void SetAlignColumnEx(const QString& value); //Sets the value of the AlignColumnEx property

    /*
    Property AlignColumnSide

    property AlignColumnSide

    */
    inline grproLib::tagGRAlignColumnSideStyle AlignColumnSide() const; //Returns the value of AlignColumnSide
    inline void SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value); //Sets the value of the AlignColumnSide property

    /*
    Property Alignment

    property Alignment

    */
    inline grproLib::tagGRStringAlignment Alignment() const; //Returns the value of Alignment
    inline void SetAlignment(grproLib::tagGRStringAlignment value); //Sets the value of the Alignment property

    /*
    Property Anchor

    property Anchor

    */
    inline grproLib::tagGRAnchorStyle Anchor() const; //Returns the value of Anchor
    inline void SetAnchor(grproLib::tagGRAnchorStyle value); //Sets the value of the Anchor property

    /*
    Property AsBarcode

    property AsBarcode

    */
    inline grproLib::IGRBarcode* AsBarcode() const; //Returns the value of AsBarcode

    /*
    Property AsChart

    property AsChart

    */
    inline grproLib::IGRChart* AsChart() const; //Returns the value of AsChart

    /*
    Property AsFieldBox

    property AsFieldBox

    */
    inline grproLib::IGRFieldBox* AsFieldBox() const; //Returns the value of AsFieldBox

    /*
    Property AsLine

    property AsLine

    */
    inline grproLib::IGRLine* AsLine() const; //Returns the value of AsLine

    /*
    Property AsMemoBox

    property AsMemoBox

    */
    inline grproLib::IGRMemoBox* AsMemoBox() const; //Returns the value of AsMemoBox

    /*
    Property AsPictureBox

    property AsPictureBox

    */
    inline grproLib::IGRPictureBox* AsPictureBox() const; //Returns the value of AsPictureBox

    /*
    Property AsRichTextBox

    property AsRichTextBox

    */
    inline grproLib::IGRRichTextBox* AsRichTextBox() const; //Returns the value of AsRichTextBox

    /*
    Property AsShapeBox

    property AsShapeBox

    */
    inline grproLib::IGRShapeBox* AsShapeBox() const; //Returns the value of AsShapeBox

    /*
    Property AsStaticBox

    property AsStaticBox

    */
    inline grproLib::IGRStaticBox* AsStaticBox() const; //Returns the value of AsStaticBox

    /*
    Property AsSubReport

    property AsSubReport

    */
    inline grproLib::IGRSubReport* AsSubReport() const; //Returns the value of AsSubReport

    /*
    Property AsSummaryBox

    property AsSummaryBox

    */
    inline grproLib::IGRSummaryBox* AsSummaryBox() const; //Returns the value of AsSummaryBox

    /*
    Property AsSystemVarBox

    property AsSystemVarBox

    */
    inline grproLib::IGRSystemVarBox* AsSystemVarBox() const; //Returns the value of AsSystemVarBox

    /*
    Property AsTextBox

    property AsTextBox

    */
    inline grproLib::IGRTextBox* AsTextBox() const; //Returns the value of AsTextBox

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackStyle

    property BackStyle

    */
    inline grproLib::tagGRBackStyle BackStyle() const; //Returns the value of BackStyle
    inline void SetBackStyle(grproLib::tagGRBackStyle value); //Sets the value of the BackStyle property

    /*
    Property BarRatio

    property BarRatio

    */
    inline double BarRatio() const; //Returns the value of BarRatio
    inline void SetBarRatio(double value); //Sets the value of the BarRatio property

    /*
    Property BarWidth

    property BarWidth

    */
    inline double BarWidth() const; //Returns the value of BarWidth
    inline void SetBarWidth(double value); //Sets the value of the BarWidth property

    /*
    Property BarcodeType

    property BarcodeType

    */
    inline grproLib::tagGRBarcodeType BarcodeType() const; //Returns the value of BarcodeType
    inline void SetBarcodeType(grproLib::tagGRBarcodeType value); //Sets the value of the BarcodeType property

    /*
    Property BorderColor

    property BorderColor

    */
    inline QColor BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(const QColor& value); //Sets the value of the BorderColor property

    /*
    Property BorderStyles

    property BorderStyles

    */
    inline grproLib::tagGRBorderStyle BorderStyles() const; //Returns the value of BorderStyles
    inline void SetBorderStyles(grproLib::tagGRBorderStyle value); //Sets the value of the BorderStyles property

    /*
    Property BorderWidth

    property BorderWidth

    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property CaptionPosition

    property CaptionPosition

    */
    inline grproLib::tagGRBarcodeCaptionPosition CaptionPosition() const; //Returns the value of CaptionPosition
    inline void SetCaptionPosition(grproLib::tagGRBarcodeCaptionPosition value); //Sets the value of the CaptionPosition property

    /*
    Property Center

    property Center

    */
    inline grproLib::tagGRCenterStyle Center() const; //Returns the value of Center
    inline void SetCenter(grproLib::tagGRCenterStyle value); //Sets the value of the Center property

    /*
    Property CheckSum

    property CheckSum

    */
    inline bool CheckSum() const; //Returns the value of CheckSum
    inline void SetCheckSum(bool value); //Sets the value of the CheckSum property

    /*
    Property ControlType

    property ControlType

    */
    inline grproLib::tagGRControlType ControlType() const; //Returns the value of ControlType

    /*
    Property Cursor

    property Cursor

    */
    inline grproLib::tagGRDisplayCursor Cursor() const; //Returns the value of Cursor
    inline void SetCursor(grproLib::tagGRDisplayCursor value); //Sets the value of the Cursor property

    /*
    Property CustomDraw

    property CustomDraw

    */
    inline bool CustomDraw() const; //Returns the value of CustomDraw
    inline void SetCustomDraw(bool value); //Sets the value of the CustomDraw property

    /*
    Property CustomDrawScript

    property CustomDrawScript

    */
    inline QString CustomDrawScript() const; //Returns the value of CustomDrawScript
    inline void SetCustomDrawScript(const QString& value); //Sets the value of the CustomDrawScript property

    /*
    Property DataField

    property DataField

    */
    inline QString DataField() const; //Returns the value of DataField
    inline void SetDataField(const QString& value); //Sets the value of the DataField property

    /*
    Property Direction

    property Direction

    */
    inline grproLib::tagGRBarcodeDirection Direction() const; //Returns the value of Direction
    inline void SetDirection(grproLib::tagGRBarcodeDirection value); //Sets the value of the Direction property

    /*
    Property Dock

    property Dock

    */
    inline grproLib::tagGRDockStyle Dock() const; //Returns the value of Dock
    inline void SetDock(grproLib::tagGRDockStyle value); //Sets the value of the Dock property

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property ForeColor

    property ForeColor

    */
    inline QColor ForeColor() const; //Returns the value of ForeColor
    inline void SetForeColor(const QColor& value); //Sets the value of the ForeColor property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property HyperlinkAuto

    property HyperlinkAuto

    */
    inline bool HyperlinkAuto() const; //Returns the value of HyperlinkAuto
    inline void SetHyperlinkAuto(bool value); //Sets the value of the HyperlinkAuto property

    /*
    Property HyperlinkText

    property HyperlinkText

    */
    inline QString HyperlinkText() const; //Returns the value of HyperlinkText
    inline void SetHyperlinkText(const QString& value); //Sets the value of the HyperlinkText property

    /*
    Property Left

    property Left

    */
    inline double Left() const; //Returns the value of Left
    inline void SetLeft(double value); //Sets the value of the Left property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property PDF417Columns

    property PDF417Columns

    */
    inline int PDF417Columns() const; //Returns the value of PDF417Columns
    inline void SetPDF417Columns(int value); //Sets the value of the PDF417Columns property

    /*
    Property PDF417ErrorLevel

    property PDF417ErrorLevel

    */
    inline int PDF417ErrorLevel() const; //Returns the value of PDF417ErrorLevel
    inline void SetPDF417ErrorLevel(int value); //Sets the value of the PDF417ErrorLevel property

    /*
    Property PDF417Rows

    property PDF417Rows

    */
    inline int PDF417Rows() const; //Returns the value of PDF417Rows
    inline void SetPDF417Rows(int value); //Sets the value of the PDF417Rows property

    /*
    Property PDF417Simple

    property PDF417Simple

    */
    inline bool PDF417Simple() const; //Returns the value of PDF417Simple
    inline void SetPDF417Simple(bool value); //Sets the value of the PDF417Simple property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintType

    property PrintType

    */
    inline grproLib::tagGRPrintType PrintType() const; //Returns the value of PrintType
    inline void SetPrintType(grproLib::tagGRPrintType value); //Sets the value of the PrintType property

    /*
    Property QRCodeErrorLevel

    property QRCodeErrorLevel

    */
    inline int QRCodeErrorLevel() const; //Returns the value of QRCodeErrorLevel
    inline void SetQRCodeErrorLevel(int value); //Sets the value of the QRCodeErrorLevel property

    /*
    Property QRCodeMask

    property QRCodeMask

    */
    inline int QRCodeMask() const; //Returns the value of QRCodeMask
    inline void SetQRCodeMask(int value); //Sets the value of the QRCodeMask property

    /*
    Property QRCodeVersion

    property QRCodeVersion

    */
    inline int QRCodeVersion() const; //Returns the value of QRCodeVersion
    inline void SetQRCodeVersion(int value); //Sets the value of the QRCodeVersion property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Text

    property Text

    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property Top

    property top

    */
    inline double Top() const; //Returns the value of Top
    inline void SetTop(double value); //Sets the value of the Top property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width

    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property _CursorHandle

    property _CursorHandle

    */
    inline int _CursorHandle() const; //Returns the value of _CursorHandle

    /*
    Property _RealViewBackColor

    property _RealViewBackColor

    */
    inline QColor _RealViewBackColor() const; //Returns the value of _RealViewBackColor

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BringToFront

    method BringToFront

    */
    inline void BringToFront();

    /*
    Method DrawDefault

    method DrawDefault

    */
    inline void DrawDefault();

    /*
    Method LoadCursorFile

    method LoadCursor

    */
    inline void LoadCursorFile(const QString& PathFile);

    /*
    Method SendToBack

    method SendToBack

    */
    inline void SendToBack();

    /*
    Method SetBounds

    method SetBounds

    */
    inline void SetBounds(double Left, double Top, double Right, double Bottom);

    /*
    Method _Draw
    */
    inline void _Draw(int pDrawDevice, int pDrawRect);

    /*
    Method _HasCustomDrawScript
    */
    inline void _HasCustomDrawScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRGroupFooter : public QAxObject
{
public:
    IGRGroupFooter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AppendBlankRowExclude

    property AppendBlankRowExclude

    */
    inline bool AppendBlankRowExclude() const; //Returns the value of AppendBlankRowExclude
    inline void SetAppendBlankRowExclude(bool value); //Sets the value of the AppendBlankRowExclude property

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BookmarkText

    property BookmarkText

    */
    inline QString BookmarkText() const; //Returns the value of BookmarkText
    inline void SetBookmarkText(const QString& value); //Sets the value of the BookmarkText property

    /*
    Property CanGrow

    property CanGrow

    */
    inline bool CanGrow() const; //Returns the value of CanGrow
    inline void SetCanGrow(bool value); //Sets the value of the CanGrow property

    /*
    Property CanShrink

    property CanShrink

    */
    inline bool CanShrink() const; //Returns the value of CanShrink
    inline void SetCanShrink(bool value); //Sets the value of the CanShrink property

    /*
    Property Controls

    property Controls

    */
    inline grproLib::IGRControls* Controls() const; //Returns the value of Controls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property FormatScript

    property FormatScript

    */
    inline QString FormatScript() const; //Returns the value of FormatScript
    inline void SetFormatScript(const QString& value); //Sets the value of the FormatScript property

    /*
    Property Group

    property Group

    */
    inline grproLib::IGRGroup* Group() const; //Returns the value of Group

    /*
    Property HNewPageFixed

    property HNewPageFixed

    */
    inline bool HNewPageFixed() const; //Returns the value of HNewPageFixed
    inline void SetHNewPageFixed(bool value); //Sets the value of the HNewPageFixed property

    /*
    Property Height

    property Height

    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property KeepTogether

    property KeepTogether

    */
    inline bool KeepTogether() const; //Returns the value of KeepTogether
    inline void SetKeepTogether(bool value); //Sets the value of the KeepTogether property

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NewPage

    property NewPage

    */
    inline grproLib::tagGRNewPageStyle NewPage() const; //Returns the value of NewPage
    inline void SetNewPage(grproLib::tagGRNewPageStyle value); //Sets the value of the NewPage property

    /*
    Property NewPageColumn

    property NewPageColumn

    */
    inline grproLib::tagGRNewPageColumnStyle NewPageColumn() const; //Returns the value of NewPageColumn
    inline void SetNewPageColumn(grproLib::tagGRNewPageColumnStyle value); //Sets the value of the NewPageColumn property

    /*
    Property Parent

    property Parent

    */
    inline IUnknown* Parent() const; //Returns the value of Parent

    /*
    Property PrintAtBottom

    property PrintAtBottom

    */
    inline bool PrintAtBottom() const; //Returns the value of PrintAtBottom
    inline void SetPrintAtBottom(bool value); //Sets the value of the PrintAtBottom property

    /*
    Property PrintGridBorder

    property PrintGridBorder

    */
    inline bool PrintGridBorder() const; //Returns the value of PrintGridBorder
    inline void SetPrintGridBorder(bool value); //Sets the value of the PrintGridBorder property

    /*
    Property SectionType

    property SectionType

    */
    inline grproLib::tagGRSectionType SectionType() const; //Returns the value of SectionType

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property Visible

    property Visible

    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method _HasSectionFormatScript
    */
    inline void _HasSectionFormatScript();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT IGRPrintViewer : public QAxObject
{
public:
    IGRPrintViewer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BatchReport

    property BatchReport

    */
    inline grproLib::IGRObject* BatchReport() const; //Returns the value of BatchReport
    inline void SetBatchReport(grproLib::IGRObject* value); //Sets the value of the BatchReport property

    /*
    Property BorderStyle
    */
    inline grproLib::tagGRViewerBorderStyle BorderStyle() const; //Returns the value of BorderStyle

    /*
    Property ColPages

    property ColPages

    */
    inline int ColPages() const; //Returns the value of ColPages
    inline void SetColPages(int value); //Sets the value of the ColPages property

    /*
    Property CurPageNo

    property CurPageNo

    */
    inline int CurPageNo() const; //Returns the value of CurPageNo
    inline void SetCurPageNo(int value); //Sets the value of the CurPageNo property

    /*
    Property EditMode

    property EditMode

    */
    inline grproLib::tagGRPreviewEditMode EditMode() const; //Returns the value of EditMode
    inline void SetEditMode(grproLib::tagGRPreviewEditMode value); //Sets the value of the EditMode property

    /*
    Property GenerateStyle

    property GenerateStyle

    */
    inline grproLib::tagGRPrintGenerateStyle GenerateStyle() const; //Returns the value of GenerateStyle
    inline void SetGenerateStyle(grproLib::tagGRPrintGenerateStyle value); //Sets the value of the GenerateStyle property

    /*
    Property PageCount

    property PageCount

    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property Report

    property Report

    */
    inline grproLib::IGridppReport* Report() const; //Returns the value of Report
    inline void SetReport(grproLib::IGridppReport* value); //Sets the value of the Report property

    /*
    Property RowPages

    property RowPages

    */
    inline int RowPages() const; //Returns the value of RowPages
    inline void SetRowPages(int value); //Sets the value of the RowPages property

    /*
    Property Running

    property Running

    */
    inline bool Running() const; //Returns the value of Running

    /*
    Property Searchable

    property Searchable

    */
    inline bool Searchable() const; //Returns the value of Searchable
    inline void SetSearchable(bool value); //Sets the value of the Searchable property

    /*
    Property ShowBookmark

    property ShowBookmark

    */
    inline bool ShowBookmark() const; //Returns the value of ShowBookmark
    inline void SetShowBookmark(bool value); //Sets the value of the ShowBookmark property

    /*
    Property ShowMarginCorner

    property ShowMarginCorner

    */
    inline bool ShowMarginCorner() const; //Returns the value of ShowMarginCorner
    inline void SetShowMarginCorner(bool value); //Sets the value of the ShowMarginCorner property

    /*
    Property ShowRuler

    property ShowRuler

    */
    inline bool ShowRuler() const; //Returns the value of ShowRuler
    inline void SetShowRuler(bool value); //Sets the value of the ShowRuler property

    /*
    Property ShowToolbar

    property ShowToolbar

    */
    inline bool ShowToolbar() const; //Returns the value of ShowToolbar
    inline void SetShowToolbar(bool value); //Sets the value of the ShowToolbar property

    /*
    Property ViewMode

    property ViewMode

    */
    inline grproLib::tagGRPrintViewMode ViewMode() const; //Returns the value of ViewMode
    inline void SetViewMode(grproLib::tagGRPrintViewMode value); //Sets the value of the ViewMode property

    /*
    Property ZoomPercent

    property ZoomPercent

    */
    inline int ZoomPercent() const; //Returns the value of ZoomPercent
    inline void SetZoomPercent(int value); //Sets the value of the ZoomPercent property

    /*
    Method AddToolbarControl

    method AddToolbarControl

    */
    inline void AddToolbarControl(grproLib::tagGRToolControlType ControlType);

    /*
    Method AddToolbarCustomButton

    method AddToolbarCustomButton

    */
    inline void AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText);

    /*
    Method FirstPage

    method FirstPage

    */
    inline void FirstPage();

    /*
    Method LastPage

    method LastPage

    */
    inline void LastPage();

    /*
    Method LoadFromDocumentFile

    method LoadFromDocumentFile

    */
    inline void LoadFromDocumentFile(const QString& FileName);

    /*
    Method NextPage

    method NextPage

    */
    inline void NextPage();

    /*
    Method Print

    method Print

    */
    inline void Print(bool ShowPrintDialog);

    /*
    Method PriorPage

    method PriorPage

    */
    inline void PriorPage();

    /*
    Method QuickRefresh

    method QuickRefresh

    */
    inline void QuickRefresh();

    /*
    Method Refresh

    method Refresh

    */
    inline void Refresh();

    /*
    Method RemoveToolbarControl

    method RemoveToolbarControl

    */
    inline void RemoveToolbarControl(grproLib::tagGRToolControlType ControlType);

    /*
    Method ResetToolbarContent

    method ResetToolbarContent

    */
    inline void ResetToolbarContent();

    /*
    Method Search

    method Search

    */
    inline bool Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg);

    /*
    Method SearchAgain

    method SearchAgain

    */
    inline bool SearchAgain(bool ShowMsg);

    /*
    Method SetBorderStyle
    */
    inline void SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle);

    /*
    Method Start

    method Start

    */
    inline void Start();

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

    /*
    Method UpdateLanguage

    method UpdateLanguage

    */
    inline void UpdateLanguage();

    /*
    Method UpdateToolbar

    method UpdateToolbar

    */
    inline void UpdateToolbar();

    /*
    Method ZoomIn

    method ZoomIn

    */
    inline void ZoomIn();

    /*
    Method ZoomOut

    method ZoomOut

    */
    inline void ZoomOut();

    /*
    Method ZoomToFit

    method ZoomToFit

    */
    inline void ZoomToFit();

    /*
    Method ZoomToHeight

    method ZoomToHeight

    */
    inline void ZoomToHeight();

    /*
    Method ZoomToWidth

    method ZoomToWidth

    */
    inline void ZoomToWidth();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IGRDisplayViewerEvents

class GRPROLIB_EXPORT IGRDisplayViewer : public QAxObject
{
public:
    IGRDisplayViewer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlwaysShowHScrollBar

    property AlwaysShowHScrollBar

    */
    inline bool AlwaysShowHScrollBar() const; //Returns the value of AlwaysShowHScrollBar
    inline void SetAlwaysShowHScrollBar(bool value); //Sets the value of the AlwaysShowHScrollBar property

    /*
    Property AlwaysShowSelection

    property AlwaysShowSelection

    */
    inline bool AlwaysShowSelection() const; //Returns the value of AlwaysShowSelection
    inline void SetAlwaysShowSelection(bool value); //Sets the value of the AlwaysShowSelection property

    /*
    Property AlwaysShowVScrollBar

    property AlwaysShowVScrollBar

    */
    inline bool AlwaysShowVScrollBar() const; //Returns the value of AlwaysShowVScrollBar
    inline void SetAlwaysShowVScrollBar(bool value); //Sets the value of the AlwaysShowVScrollBar property

    /*
    Property BackgroundColor

    property BackgroundColor

    */
    inline QColor BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(const QColor& value); //Sets the value of the BackgroundColor property

    /*
    Property BatchFinished

    property BatchFinished

    */
    inline bool BatchFinished() const; //Returns the value of BatchFinished
    inline void SetBatchFinished(bool value); //Sets the value of the BatchFinished property

    /*
    Property BatchGetRecord

    property BatchGetRecord

    */
    inline bool BatchGetRecord() const; //Returns the value of BatchGetRecord
    inline void SetBatchGetRecord(bool value); //Sets the value of the BatchGetRecord property

    /*
    Property BatchNo

    property BatchNo

    */
    inline int BatchNo() const; //Returns the value of BatchNo

    /*
    Property BatchStartRecNo

    property BatchStartRecNo

    */
    inline int BatchStartRecNo() const; //Returns the value of BatchStartRecNo

    /*
    Property BatchWantRecords

    property BatchWantRecords

    */
    inline int BatchWantRecords() const; //Returns the value of BatchWantRecords
    inline void SetBatchWantRecords(int value); //Sets the value of the BatchWantRecords property

    /*
    Property BorderStyle
    */
    inline grproLib::tagGRViewerBorderStyle BorderStyle() const; //Returns the value of BorderStyle

    /*
    Property BottomGap

    property BottomGap

    */
    inline int BottomGap() const; //Returns the value of BottomGap
    inline void SetBottomGap(int value); //Sets the value of the BottomGap property

    /*
    Property ColumnMove

    property ColumnMove

    */
    inline bool ColumnMove() const; //Returns the value of ColumnMove
    inline void SetColumnMove(bool value); //Sets the value of the ColumnMove property

    /*
    Property ColumnResize

    property ColumnResize

    */
    inline bool ColumnResize() const; //Returns the value of ColumnResize
    inline void SetColumnResize(bool value); //Sets the value of the ColumnResize property

    /*
    Property CurPageNo

    property CurPageNo

    */
    inline int CurPageNo() const; //Returns the value of CurPageNo
    inline void SetCurPageNo(int value); //Sets the value of the CurPageNo property

    /*
    Property GridCenterView

    property GridCenterView

    */
    inline bool GridCenterView() const; //Returns the value of GridCenterView
    inline void SetGridCenterView(bool value); //Sets the value of the GridCenterView property

    /*
    Property GridTitle3D

    property GridTitle3D

    */
    inline bool GridTitle3D() const; //Returns the value of GridTitle3D
    inline void SetGridTitle3D(bool value); //Sets the value of the GridTitle3D property

    /*
    Property HScrollPos

    property HScrollPos

    */
    inline int HScrollPos() const; //Returns the value of HScrollPos
    inline void SetHScrollPos(int value); //Sets the value of the HScrollPos property

    /*
    Property LeftGap

    property LeftGap

    */
    inline int LeftGap() const; //Returns the value of LeftGap
    inline void SetLeftGap(int value); //Sets the value of the LeftGap property

    /*
    Property PageCount

    property PageCount

    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property Report

    property Report

    */
    inline grproLib::IGridppReport* Report() const; //Returns the value of Report
    inline void SetReport(grproLib::IGridppReport* value); //Sets the value of the Report property

    /*
    Property ResizeToFit

    property ResizeToFit

    */
    inline bool ResizeToFit() const; //Returns the value of ResizeToFit
    inline void SetResizeToFit(bool value); //Sets the value of the ResizeToFit property

    /*
    Property ResortCaseSensitive

    property ResortCaseSensitive

    */
    inline bool ResortCaseSensitive() const; //Returns the value of ResortCaseSensitive
    inline void SetResortCaseSensitive(bool value); //Sets the value of the ResortCaseSensitive property

    /*
    Property ResortDefaultAsc

    property ResortDefaultAsc

    */
    inline bool ResortDefaultAsc() const; //Returns the value of ResortDefaultAsc
    inline void SetResortDefaultAsc(bool value); //Sets the value of the ResortDefaultAsc property

    /*
    Property Resortable

    property Resortable

    */
    inline bool Resortable() const; //Returns the value of Resortable
    inline void SetResortable(bool value); //Sets the value of the Resortable property

    /*
    Property RightGap

    property RightGap

    */
    inline int RightGap() const; //Returns the value of RightGap
    inline void SetRightGap(int value); //Sets the value of the RightGap property

    /*
    Property RowCount

    property RowCount

    */
    inline int RowCount() const; //Returns the value of RowCount

    /*
    Property RowSelection

    property RowSelection

    */
    inline bool RowSelection() const; //Returns the value of RowSelection
    inline void SetRowSelection(bool value); //Sets the value of the RowSelection property

    /*
    Property RowsPerPage

    property RowsPerPage

    */
    inline int RowsPerPage() const; //Returns the value of RowsPerPage
    inline void SetRowsPerPage(int value); //Sets the value of the RowsPerPage property

    /*
    Property Running

    property Running

    */
    inline bool Running() const; //Returns the value of Running

    /*
    Property Searchable

    property Searchable

    */
    inline bool Searchable() const; //Returns the value of Searchable
    inline void SetSearchable(bool value); //Sets the value of the Searchable property

    /*
    Property SelColumnName

    property SelColumnName

    */
    inline QString SelColumnName() const; //Returns the value of SelColumnName
    inline void SetSelColumnName(const QString& value); //Sets the value of the SelColumnName property

    /*
    Property SelColumnNo

    property SelColumnNo

    */
    inline int SelColumnNo() const; //Returns the value of SelColumnNo
    inline void SetSelColumnNo(int value); //Sets the value of the SelColumnNo property

    /*
    Property SelRowNo

    property SelRowNo

    */
    inline int SelRowNo() const; //Returns the value of SelRowNo
    inline void SetSelRowNo(int value); //Sets the value of the SelRowNo property

    /*
    Property SelectionBackColor

    property SelectionBackColor

    */
    inline QColor SelectionBackColor() const; //Returns the value of SelectionBackColor
    inline void SetSelectionBackColor(const QColor& value); //Sets the value of the SelectionBackColor property

    /*
    Property SelectionFollowScroll

    property SelectionFollowScroll

    */
    inline bool SelectionFollowScroll() const; //Returns the value of SelectionFollowScroll
    inline void SetSelectionFollowScroll(bool value); //Sets the value of the SelectionFollowScroll property

    /*
    Property SelectionForeColor

    property SelectionForeColor

    */
    inline QColor SelectionForeColor() const; //Returns the value of SelectionForeColor
    inline void SetSelectionForeColor(const QColor& value); //Sets the value of the SelectionForeColor property

    /*
    Property ShowFooter

    property ShowFooter

    */
    inline bool ShowFooter() const; //Returns the value of ShowFooter
    inline void SetShowFooter(bool value); //Sets the value of the ShowFooter property

    /*
    Property ShowHeader

    property ShowHeader

    */
    inline bool ShowHeader() const; //Returns the value of ShowHeader
    inline void SetShowHeader(bool value); //Sets the value of the ShowHeader property

    /*
    Property ShowPreviewLine

    property ShowPreviewLine

    */
    inline bool ShowPreviewLine() const; //Returns the value of ShowPreviewLine
    inline void SetShowPreviewLine(bool value); //Sets the value of the ShowPreviewLine property

    /*
    Property ShowToolbar

    property ShowToolbar

    */
    inline bool ShowToolbar() const; //Returns the value of ShowToolbar
    inline void SetShowToolbar(bool value); //Sets the value of the ShowToolbar property

    /*
    Property SortColumns

    property SortColumns

    */
    inline QString SortColumns() const; //Returns the value of SortColumns
    inline void SetSortColumns(const QString& value); //Sets the value of the SortColumns property

    /*
    Property ToPostColumnLayout

    property ToPostColumnLayout

    */
    inline bool ToPostColumnLayout() const; //Returns the value of ToPostColumnLayout
    inline void SetToPostColumnLayout(bool value); //Sets the value of the ToPostColumnLayout property

    /*
    Property TopGap

    property TopGap

    */
    inline int TopGap() const; //Returns the value of TopGap
    inline void SetTopGap(int value); //Sets the value of the TopGap property

    /*
    Property TotalRecord

    property TotalRecord

    */
    inline int TotalRecord() const; //Returns the value of TotalRecord
    inline void SetTotalRecord(int value); //Sets the value of the TotalRecord property

    /*
    Property VScrollPos

    property VScrollPos

    */
    inline int VScrollPos() const; //Returns the value of VScrollPos
    inline void SetVScrollPos(int value); //Sets the value of the VScrollPos property

    /*
    Method AddToolbarControl

    method AddToolbarControl

    */
    inline void AddToolbarControl(grproLib::tagGRToolControlType2 ControlType);

    /*
    Method AddToolbarCustomButton

    method AddToolbarCustomButton

    */
    inline void AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText);

    /*
    Method FirstPage

    method FirstPage

    */
    inline void FirstPage();

    /*
    Method GetColumnVisible

    method GetColumnVisible

    */
    inline bool GetColumnVisible(const QString& ColumnName);

    /*
    Method GetContentCellFromPos

    method GetContentCellFromPos

    */
    inline grproLib::IGRColumnContentCell* GetContentCellFromPos(int xPos, int yPos);

    /*
    Method GetControlFromPos

    method GetControlFromPos

    */
    inline grproLib::IGRControl* GetControlFromPos(int xPos, int yPos);

    /*
    Method GetSectionFromPos

    method GetSectionFromPos

    */
    inline grproLib::IGRSection* GetSectionFromPos(int xPos, int yPos);

    /*
    Method GetSelRowCellText

    method GetSelRowCellText

    */
    inline QString GetSelRowCellText(int ColumnIndex);

    /*
    Method GetTitleCellFromPos

    method GetTitleCellFromPos

    */
    inline grproLib::IGRColumnTitleCell* GetTitleCellFromPos(int xPos, int yPos);

    /*
    Method LastPage

    method LastPage

    */
    inline void LastPage();

    /*
    Method LockUpdate

    method LockUpdate

    */
    inline void LockUpdate();

    /*
    Method NextPage

    method NextPage

    */
    inline void NextPage();

    /*
    Method PostColumnLayout

    method PostColumnLayout

    */
    inline void PostColumnLayout();

    /*
    Method PriorPage

    method PriorPage

    */
    inline void PriorPage();

    /*
    Method QuickRefresh

    method QuickRefresh

    */
    inline void QuickRefresh();

    /*
    Method Refresh

    method Refresh

    */
    inline void Refresh();

    /*
    Method RemoveToolbarControl

    method RemoveToolbarControl

    */
    inline void RemoveToolbarControl(grproLib::tagGRToolControlType2 ControlType);

    /*
    Method ResetToolbarContent

    method ResetToolbarContent

    */
    inline void ResetToolbarContent();

    /*
    Method ResizeColumnToFit

    method ResizeColumnToFit

    */
    inline void ResizeColumnToFit();

    /*
    Method ResizeColumnToFitPage

    method ResizeColumnToFitPage

    */
    inline void ResizeColumnToFitPage();

    /*
    Method ResizeColumnToFitText

    method ResizeColumnToFitText

    */
    inline void ResizeColumnToFitText();

    /*
    Method Search

    method Search

    */
    inline bool Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg);

    /*
    Method SearchAgain

    method SearchAgain

    */
    inline bool SearchAgain(bool ShowMsg);

    /*
    Method SetBorderStyle
    */
    inline void SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle);

    /*
    Method SetColumnVisible

    method SetColumnVisible

    */
    inline void SetColumnVisible(const QString& ColumnName, bool Visible);

    /*
    Method ShowColumnVisibleDlg

    method ShowColumnVisibleDlg

    */
    inline void ShowColumnVisibleDlg();

    /*
    Method Start

    method Start

    */
    inline void Start();

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

    /*
    Method UnlockUpdate

    method UnlockUpdate

    */
    inline void UnlockUpdate();

    /*
    Method UpdateColumnView

    method UpdateColumnView

    */
    inline void UpdateColumnView();

    /*
    Method UpdateControl

    method UpdateControl

    */
    inline void UpdateControl(grproLib::IGRControl* pControl);

    /*
    Method UpdateLanguage

    method UpdateLanguage

    */
    inline void UpdateLanguage();

    /*
    Method UpdateSelCell

    method UpdateSelCell

    */
    inline void UpdateSelCell();

    /*
    Method UpdateSelRow

    method UpdateSelRow

    */
    inline void UpdateSelRow();

    /*
    Method UpdateToolbar

    method UpdateToolbar

    */
    inline void UpdateToolbar();

    /*
    Method UpdateViewer

    method UpdateViewer

    */
    inline void UpdateViewer();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IGRPrintViewerEvents

// Actual coclasses
class GRPROLIB_EXPORT GridppReport : public QAxObject
{
public:
    GridppReport(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{13c28ad0-f195-4319-b7d7-a1bdaa329fb8}");
    }

    GridppReport(IGridppReport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignToGrid

    property AlignToGrid

    */
    inline bool AlignToGrid() const; //Returns the value of AlignToGrid
    inline void SetAlignToGrid(bool value); //Sets the value of the AlignToGrid property

    /*
    Property BackColor

    property BackColor

    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property BackImage

    property BackImage

    */
    inline stdole::IPicture* BackImage() const; //Returns the value of BackImage
    inline void SetBackImage(stdole::IPicture* value); //Sets the value of the BackImage property

    /*
    Property BackImageFile

    property BackImageFile

    */
    inline QString BackImageFile() const; //Returns the value of BackImageFile
    inline void SetBackImageFile(const QString& value); //Sets the value of the BackImageFile property

    /*
    Property BackImagePreview

    property BackImagePreview

    */
    inline bool BackImagePreview() const; //Returns the value of BackImagePreview
    inline void SetBackImagePreview(bool value); //Sets the value of the BackImagePreview property

    /*
    Property BackImagePrint

    property BackImagePrint

    */
    inline bool BackImagePrint() const; //Returns the value of BackImagePrint
    inline void SetBackImagePrint(bool value); //Sets the value of the BackImagePrint property

    /*
    Property BeforeSortScript

    property BeforeSortScript

    */
    inline QString BeforeSortScript() const; //Returns the value of BeforeSortScript
    inline void SetBeforeSortScript(const QString& value); //Sets the value of the BeforeSortScript property

    /*
    Property ConnectionString

    property ConnectionString

    */
    inline QString ConnectionString() const; //Returns the value of ConnectionString
    inline void SetConnectionString(const QString& value); //Sets the value of the ConnectionString property

    /*
    Property ContinuePrint

    property ContinuePrint

    */
    inline bool ContinuePrint() const; //Returns the value of ContinuePrint
    inline void SetContinuePrint(bool value); //Sets the value of the ContinuePrint property

    /*
    Property DesignBottomMargin

    property DesignBottomMargin

    */
    inline double DesignBottomMargin() const; //Returns the value of DesignBottomMargin
    inline void SetDesignBottomMargin(double value); //Sets the value of the DesignBottomMargin property

    /*
    Property DesignLeftMargin

    property DesignLeftMargin

    */
    inline double DesignLeftMargin() const; //Returns the value of DesignLeftMargin
    inline void SetDesignLeftMargin(double value); //Sets the value of the DesignLeftMargin property

    /*
    Property DesignPaperKind

    property DesignPaperKind

    */
    inline grproLib::tagGRPaperKind DesignPaperKind() const; //Returns the value of DesignPaperKind
    inline void SetDesignPaperKind(grproLib::tagGRPaperKind value); //Sets the value of the DesignPaperKind property

    /*
    Property DesignPaperLength

    property DesignPaperLength

    */
    inline double DesignPaperLength() const; //Returns the value of DesignPaperLength
    inline void SetDesignPaperLength(double value); //Sets the value of the DesignPaperLength property

    /*
    Property DesignPaperName

    property DesignPaperName

    */
    inline QString DesignPaperName() const; //Returns the value of DesignPaperName
    inline void SetDesignPaperName(const QString& value); //Sets the value of the DesignPaperName property

    /*
    Property DesignPaperOrientation

    property DesignPaperOrientation

    */
    inline grproLib::tagGRPaperOrientation DesignPaperOrientation() const; //Returns the value of DesignPaperOrientation
    inline void SetDesignPaperOrientation(grproLib::tagGRPaperOrientation value); //Sets the value of the DesignPaperOrientation property

    /*
    Property DesignPaperSize

    property DesignPaperSize

    */
    inline int DesignPaperSize() const; //Returns the value of DesignPaperSize
    inline void SetDesignPaperSize(int value); //Sets the value of the DesignPaperSize property

    /*
    Property DesignPaperSource

    property DesignPaperSource

    */
    inline grproLib::tagGRPaperSourceKind DesignPaperSource() const; //Returns the value of DesignPaperSource
    inline void SetDesignPaperSource(grproLib::tagGRPaperSourceKind value); //Sets the value of the DesignPaperSource property

    /*
    Property DesignPaperWidth

    property DesignPaperWidth

    */
    inline double DesignPaperWidth() const; //Returns the value of DesignPaperWidth
    inline void SetDesignPaperWidth(double value); //Sets the value of the DesignPaperWidth property

    /*
    Property DesignPrintCollate

    property DesignPrintCollate

    */
    inline grproLib::tagGRCollateKind DesignPrintCollate() const; //Returns the value of DesignPrintCollate
    inline void SetDesignPrintCollate(grproLib::tagGRCollateKind value); //Sets the value of the DesignPrintCollate property

    /*
    Property DesignPrintDuplex

    property DesignPrintDuplex

    */
    inline grproLib::tagGRDuplexKind DesignPrintDuplex() const; //Returns the value of DesignPrintDuplex
    inline void SetDesignPrintDuplex(grproLib::tagGRDuplexKind value); //Sets the value of the DesignPrintDuplex property

    /*
    Property DesignRightMargin

    property DesignRightMargin

    */
    inline double DesignRightMargin() const; //Returns the value of DesignRightMargin
    inline void SetDesignRightMargin(double value); //Sets the value of the DesignRightMargin property

    /*
    Property DesignTopMargin

    property DesignTopMargin

    */
    inline double DesignTopMargin() const; //Returns the value of DesignTopMargin
    inline void SetDesignTopMargin(double value); //Sets the value of the DesignTopMargin property

    /*
    Property DetailGrid

    property DetailGrid

    */
    inline grproLib::IGRDetailGrid* DetailGrid() const; //Returns the value of DetailGrid

    /*
    Property DisplayMode

    property DisplayMode

    */
    inline grproLib::tagGRReportDisplayMode DisplayMode() const; //Returns the value of DisplayMode

    /*
    Property ExportBeginScript

    property ExportBeginScript

    */
    inline QString ExportBeginScript() const; //Returns the value of ExportBeginScript
    inline void SetExportBeginScript(const QString& value); //Sets the value of the ExportBeginScript property

    /*
    Property FirstPass

    property FirstPass

    */
    inline bool FirstPass() const; //Returns the value of FirstPass

    /*
    Property FloatControls

    property FloatControls

    */
    inline grproLib::IGRControls* FloatControls() const; //Returns the value of FloatControls

    /*
    Property Font

    property Font

    */
    inline grproLib::IGRFont* Font() const; //Returns the value of Font

    /*
    Property Graphics

    property Graphics

    */
    inline grproLib::IGRGraphics* Graphics() const; //Returns the value of Graphics

    /*
    Property GridColsPerUnit

    property GridColsPerUnit

    */
    inline int GridColsPerUnit() const; //Returns the value of GridColsPerUnit
    inline void SetGridColsPerUnit(int value); //Sets the value of the GridColsPerUnit property

    /*
    Property GridRowsPerUnit

    property GridRowsPerUnit

    */
    inline int GridRowsPerUnit() const; //Returns the value of GridRowsPerUnit
    inline void SetGridRowsPerUnit(int value); //Sets the value of the GridRowsPerUnit property

    /*
    Property HasFloatControl

    property HasFloatControl

    */
    inline bool HasFloatControl() const; //Returns the value of HasFloatControl

    /*
    Property ImageList

    property ImageList

    */
    inline grproLib::IGRImageList* ImageList() const; //Returns the value of ImageList

    /*
    Property InitializeScript

    property InitializeScript

    */
    inline QString InitializeScript() const; //Returns the value of InitializeScript
    inline void SetInitializeScript(const QString& value); //Sets the value of the InitializeScript property

    /*
    Property IsBlank

    property IsBlank

    */
    inline bool IsBlank() const; //Returns the value of IsBlank

    /*
    Property Language

    property Language

    */
    inline int Language() const; //Returns the value of Language
    inline void SetLanguage(int value); //Sets the value of the Language property

    /*
    Property MaxGenPages

    property MaxGenPages

    */
    inline int MaxGenPages() const; //Returns the value of MaxGenPages
    inline void SetMaxGenPages(int value); //Sets the value of the MaxGenPages property

    /*
    Property MirrorMargins

    property MirrorMargins

    */
    inline bool MirrorMargins() const; //Returns the value of MirrorMargins
    inline void SetMirrorMargins(bool value); //Sets the value of the MirrorMargins property

    /*
    Property MonoPrint

    property MonoPrint

    */
    inline bool MonoPrint() const; //Returns the value of MonoPrint
    inline void SetMonoPrint(bool value); //Sets the value of the MonoPrint property

    /*
    Property PageBlankHeight

    property PageBlankHeight

    */
    inline double PageBlankHeight() const; //Returns the value of PageBlankHeight

    /*
    Property PageDivideCount

    property PageDivideCount

    */
    inline int PageDivideCount() const; //Returns the value of PageDivideCount
    inline void SetPageDivideCount(int value); //Sets the value of the PageDivideCount property

    /*
    Property PageDivideLine

    property PageDivideLine

    */
    inline bool PageDivideLine() const; //Returns the value of PageDivideLine
    inline void SetPageDivideLine(bool value); //Sets the value of the PageDivideLine property

    /*
    Property PageDivideSpacing

    property PageDivideSpacing

    */
    inline double PageDivideSpacing() const; //Returns the value of PageDivideSpacing
    inline void SetPageDivideSpacing(double value); //Sets the value of the PageDivideSpacing property

    /*
    Property PageEndScript

    property PageEndScript

    */
    inline QString PageEndScript() const; //Returns the value of PageEndScript
    inline void SetPageEndScript(const QString& value); //Sets the value of the PageEndScript property

    /*
    Property PageFooter

    property PageFooter

    */
    inline grproLib::IGRPageFooter* PageFooter() const; //Returns the value of PageFooter

    /*
    Property PageHeader

    property PageHeader

    */
    inline grproLib::IGRPageHeader* PageHeader() const; //Returns the value of PageHeader

    /*
    Property PageStartScript

    property PageStartScript

    */
    inline QString PageStartScript() const; //Returns the value of PageStartScript
    inline void SetPageStartScript(const QString& value); //Sets the value of the PageStartScript property

    /*
    Property Parameters

    property Parameters

    */
    inline grproLib::IGRParameters* Parameters() const; //Returns the value of Parameters

    /*
    Property ParentReport

    property ParentReport

    */
    inline grproLib::IGridppReport* ParentReport() const; //Returns the value of ParentReport

    /*
    Property PrintAsDesignPaper

    property PrintAsDesignPaper

    */
    inline bool PrintAsDesignPaper() const; //Returns the value of PrintAsDesignPaper
    inline void SetPrintAsDesignPaper(bool value); //Sets the value of the PrintAsDesignPaper property

    /*
    Property PrintToStretch

    property PrintToStretch

    */
    inline bool PrintToStretch() const; //Returns the value of PrintToStretch
    inline void SetPrintToStretch(bool value); //Sets the value of the PrintToStretch property

    /*
    Property Printer

    property Printer

    */
    inline grproLib::IGRPrinter* Printer() const; //Returns the value of Printer

    /*
    Property ProcessBeginScript

    property ProcessBeginScript

    */
    inline QString ProcessBeginScript() const; //Returns the value of ProcessBeginScript
    inline void SetProcessBeginScript(const QString& value); //Sets the value of the ProcessBeginScript property

    /*
    Property ProcessEndScript

    property ProcessEndScript

    */
    inline QString ProcessEndScript() const; //Returns the value of ProcessEndScript
    inline void SetProcessEndScript(const QString& value); //Sets the value of the ProcessEndScript property

    /*
    Property QuerySQL

    property QuerySQL

    */
    inline QString QuerySQL() const; //Returns the value of QuerySQL
    inline void SetQuerySQL(const QString& value); //Sets the value of the QuerySQL property

    /*
    Property ReportFooterCount

    property ReportFooterCount

    */
    inline int ReportFooterCount() const; //Returns the value of ReportFooterCount

    /*
    Property ReportHeaderCount

    property ReportHeaderCount

    */
    inline int ReportHeaderCount() const; //Returns the value of ReportHeaderCount

    /*
    Property Running

    property Running

    */
    inline bool Running() const; //Returns the value of Running

    /*
    Property RunningDetailGrid

    property RunningDetailGrid

    */
    inline grproLib::IGRDetailGrid* RunningDetailGrid() const; //Returns the value of RunningDetailGrid

    /*
    Property ScriptType

    property ScriptType

    */
    inline grproLib::tagGRScriptType ScriptType() const; //Returns the value of ScriptType
    inline void SetScriptType(grproLib::tagGRScriptType value); //Sets the value of the ScriptType property

    /*
    Property Sections

    property Sections

    */
    inline grproLib::IGRSections* Sections() const; //Returns the value of Sections

    /*
    Property SharePrintSetupObject

    property SharePrintSetupObject

    */
    inline grproLib::IGRSharePrintSetupObject* SharePrintSetupObject() const; //Returns the value of SharePrintSetupObject

    /*
    Property SharePrintSetupOptions

    property SharePrintSetupOptions

    */
    inline int SharePrintSetupOptions() const; //Returns the value of SharePrintSetupOptions
    inline void SetSharePrintSetupOptions(int value); //Sets the value of the SharePrintSetupOptions property

    /*
    Property ShowGrid

    property ShowGrid

    */
    inline bool ShowGrid() const; //Returns the value of ShowGrid
    inline void SetShowGrid(bool value); //Sets the value of the ShowGrid property

    /*
    Property ShowMoneyDigit

    property ShowMoneyDigit

    */
    inline int ShowMoneyDigit() const; //Returns the value of ShowMoneyDigit
    inline void SetShowMoneyDigit(int value); //Sets the value of the ShowMoneyDigit property

    /*
    Property ShowMoneyLineColor

    property ShowMoneyLineColor

    */
    inline QColor ShowMoneyLineColor() const; //Returns the value of ShowMoneyLineColor
    inline void SetShowMoneyLineColor(const QColor& value); //Sets the value of the ShowMoneyLineColor property

    /*
    Property ShowMoneySepLineColor

    property ShowMoneySepLineColor

    */
    inline QColor ShowMoneySepLineColor() const; //Returns the value of ShowMoneySepLineColor
    inline void SetShowMoneySepLineColor(const QColor& value); //Sets the value of the ShowMoneySepLineColor property

    /*
    Property ShowMoneyWidth

    property ShowMoneyWidth

    */
    inline double ShowMoneyWidth() const; //Returns the value of ShowMoneyWidth
    inline void SetShowMoneyWidth(double value); //Sets the value of the ShowMoneyWidth property

    /*
    Property ShowPreviewWndScript

    property ShowPreviewWndScript

    */
    inline QString ShowPreviewWndScript() const; //Returns the value of ShowPreviewWndScript
    inline void SetShowPreviewWndScript(const QString& value); //Sets the value of the ShowPreviewWndScript property

    /*
    Property ShowProgressUI

    property ShowProgressUI

    */
    inline bool ShowProgressUI() const; //Returns the value of ShowProgressUI
    inline void SetShowProgressUI(bool value); //Sets the value of the ShowProgressUI property

    /*
    Property SkipQuery

    property SkipQuery

    */
    inline bool SkipQuery() const; //Returns the value of SkipQuery
    inline void SetSkipQuery(bool value); //Sets the value of the SkipQuery property

    /*
    Property StorageFormat

    property StorageFormat

    */
    inline grproLib::tagGRStorageFormat StorageFormat() const; //Returns the value of StorageFormat
    inline void SetStorageFormat(grproLib::tagGRStorageFormat value); //Sets the value of the StorageFormat property

    /*
    Property SummaryAccept

    property SummaryAccept

    */
    inline bool SummaryAccept() const; //Returns the value of SummaryAccept
    inline void SetSummaryAccept(bool value); //Sets the value of the SummaryAccept property

    /*
    Property Tag

    property Tag

    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextEncode

    property TextEncode

    */
    inline grproLib::tagGRTextEncodeMode TextEncode() const; //Returns the value of TextEncode
    inline void SetTextEncode(grproLib::tagGRTextEncodeMode value); //Sets the value of the TextEncode property

    /*
    Property Title

    property Title

    */
    inline QString Title() const; //Returns the value of Title
    inline void SetTitle(const QString& value); //Sets the value of the Title property

    /*
    Property Unit

    property Unit

    */
    inline grproLib::tagGRUnit Unit() const; //Returns the value of Unit
    inline void SetUnit(grproLib::tagGRUnit value); //Sets the value of the Unit property

    /*
    Property Version

    property Version

    */
    inline QString Version() const; //Returns the value of Version

    /*
    Property Watermark

    property Watermark

    */
    inline stdole::IPicture* Watermark() const; //Returns the value of Watermark
    inline void SetWatermark(stdole::IPicture* value); //Sets the value of the Watermark property

    /*
    Property WatermarkAlignment

    property WatermarkAlignment

    */
    inline grproLib::tagGRPictureAlignment WatermarkAlignment() const; //Returns the value of WatermarkAlignment
    inline void SetWatermarkAlignment(grproLib::tagGRPictureAlignment value); //Sets the value of the WatermarkAlignment property

    /*
    Property WatermarkSizeMode

    property WatermarkSizeMode

    */
    inline grproLib::tagGRPictureSizeMode WatermarkSizeMode() const; //Returns the value of WatermarkSizeMode
    inline void SetWatermarkSizeMode(grproLib::tagGRPictureSizeMode value); //Sets the value of the WatermarkSizeMode property

    /*
    Property _GRBackImage
    */
    inline grproLib::IGRPicture* _GRBackImage() const; //Returns the value of _GRBackImage
    inline void set_GRBackImage(grproLib::IGRPicture* value); //Sets the value of the _GRBackImage property

    /*
    Property _GRWatermark
    */
    inline grproLib::IGRPicture* _GRWatermark() const; //Returns the value of _GRWatermark
    inline void set_GRWatermark(grproLib::IGRPicture* value); //Sets the value of the _GRWatermark property

    /*
    Property _ResHinst

    property _ResHinst

    */
    inline int _ResHinst() const; //Returns the value of _ResHinst

    /*
    Method AbortPrint

    method AbortPrint

    */
    inline void AbortPrint();

    /*
    Method About

    method About

    */
    inline void About();

    /*
    Method AddParameter

    method AddParameter

    */
    inline grproLib::IGRParameter* AddParameter(const QString& Name, grproLib::tagGRParameterDataType DataType);

    /*
    Method Assign

    method Assign

    */
    inline void Assign(IDispatch* Object);

    /*
    Method BeginLoopPrint

    method BeginLoopPrint

    */
    inline bool BeginLoopPrint(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog);

    /*
    Method CalcTextOut

    method CalcTextOut

    */
    inline QString CalcTextOut(double Width, double Height, const QString& Text, grproLib::IGRFont* Font, bool WordWrap);

    /*
    Method CancelRecordset

    method CancelRecordset

    */
    inline void CancelRecordset();

    /*
    Method Clear

    method Clear

    */
    inline void Clear();

    /*
    Method ColumnByName

    method ColumnByName

    */
    inline grproLib::IGRColumn* ColumnByName(const QString& Name);

    /*
    Method ControlByName

    method ControlByName

    */
    inline grproLib::IGRControl* ControlByName(const QString& Name);

    /*
    Method CreateBatchReport

    method CreateBatchReport

    */
    inline grproLib::IGRObject* CreateBatchReport();

    /*
    Method DeleteDetailGrid

    method DeleteDetailGrid

    */
    inline void DeleteDetailGrid();

    /*
    Method DeletePageFooter

    method DeletePageFooter

    */
    inline void DeletePageFooter();

    /*
    Method DeletePageHeader

    method DeletePageHeader

    */
    inline void DeletePageHeader();

    /*
    Method DeleteReportFooter

    method DeleteReportFooter

    */
    inline void DeleteReportFooter(const QVariant& Index);

    /*
    Method DeleteReportHeader

    method DeleteReportHeader

    */
    inline void DeleteReportHeader(const QVariant& Index);

    /*
    Method EndLoopPrint

    method EndLoopPrint

    */
    inline void EndLoopPrint();

    /*
    Method Export

    method Export

    */
    inline bool Export(bool DoneOpen);

    /*
    Method ExportDirect

    method ExportDirect

    */
    inline bool ExportDirect(grproLib::tagGRExportType ExportType, const QString& FileName, bool ShowOptionDlg, bool DoneOpen);

    /*
    Method ExtractXMLFromURL

    method ExtractXMLFromURL

    */
    inline QString ExtractXMLFromURL(const QString& URL);

    /*
    Method FieldByDBName

    method FieldByDBName

    */
    inline grproLib::IGRField* FieldByDBName(const QString& Name);

    /*
    Method FieldByName

    method FieldByName

    */
    inline grproLib::IGRField* FieldByName(const QString& Name);

    /*
    Method FindFirstControl

    method FindFirstControl

    */
    inline grproLib::IGRControl* FindFirstControl();

    /*
    Method FindNextControl

    method FindNextControl

    */
    inline grproLib::IGRControl* FindNextControl();

    /*
    Method ForceNewPage

    method ForceNewPage

    */
    inline void ForceNewPage();

    /*
    Method GenerateDocumentFile

    method GenerateDocumentFile

    */
    inline void GenerateDocumentFile(const QString& FileName);

    /*
    Method GetSkin

    method GetSkin

    */
    inline void GetSkin(uint& BackColorRed, uint& BackColorGreen, uint& BackColorBlue, int& Style);

    /*
    Method InsertDetailGrid

    method InsertDetailGrid

    */
    inline grproLib::IGRDetailGrid* InsertDetailGrid();

    /*
    Method InsertPageFooter

    method InsertPageFooter

    */
    inline grproLib::IGRPageFooter* InsertPageFooter();

    /*
    Method InsertPageHeader

    method InsertPageHeader

    */
    inline grproLib::IGRPageHeader* InsertPageHeader();

    /*
    Method InsertReportFooter

    method InsertReportFooter

    */
    inline grproLib::IGRReportFooter* InsertReportFooter();

    /*
    Method InsertReportHeader

    method InsertReportHeader

    */
    inline grproLib::IGRReportHeader* InsertReportHeader();

    /*
    Method LoadBackImageFromFile

    method LoadBackImageFromFile

    */
    inline void LoadBackImageFromFile(const QString& PathFile);

    /*
    Method LoadBackImageFromMemory

    method LoadBackImageFromMemory

    */
    inline void LoadBackImageFromMemory(uint& pBuffer, int BytesCount);

    /*
    Method LoadDataFromURL

    method LoadDataFromURL

    */
    inline bool LoadDataFromURL(const QString& URL);

    /*
    Method LoadDataFromXML

    method LoadDataFromXML

    */
    inline bool LoadDataFromXML(const QString& XMLData);

    /*
    Method LoadFromFile

    method LoadFromFile

    */
    inline bool LoadFromFile(const QString& FileName);

    /*
    Method LoadFromMemory

    method LoadFromMemory

    */
    inline bool LoadFromMemory(uint& pData, int ByteCount);

    /*
    Method LoadFromStr

    method LoadFromStr

    */
    inline bool LoadFromStr(const QString& Data);

    /*
    Method LoadFromURL

    method LoadFromURL

    */
    inline bool LoadFromURL(const QString& URL);

    /*
    Method LoadFromVariant

    method LoadFromVariant

    */
    inline bool LoadFromVariant(const QVariant& Buf);

    /*
    Method LoadWatermarkFromFile

    method LoadWatermarkFromFile

    */
    inline void LoadWatermarkFromFile(const QString& PathFile);

    /*
    Method LoadWatermarkFromMemory

    method LoadWatermarkFromMemory

    */
    inline void LoadWatermarkFromMemory(uint& pBuffer, int BytesCount);

    /*
    Method LoopPrint

    method LoopPrint

    */
    inline void LoopPrint();

    /*
    Method ParameterByName

    method ParameterByName

    */
    inline grproLib::IGRParameter* ParameterByName(const QString& Name);

    /*
    Method PixelsToUnit

    method PixelsToUnit

    */
    inline double PixelsToUnit(int Pixels);

    /*
    Method PrepareExport

    method PrepareExport

    */
    inline grproLib::IGRExportOption* PrepareExport(grproLib::tagGRExportType ExportType);

    /*
    Method PrepareRecordset

    method PrepareRecordset

    */
    inline bool PrepareRecordset();

    /*
    Method Print

    method Print

    */
    inline void Print(bool ShowPrintDialog);

    /*
    Method PrintEx

    method PrintEx

    */
    inline void PrintEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog);

    /*
    Method PrintPreview

    method PrintPreview

    */
    inline void PrintPreview(bool ShowModal);

    /*
    Method PrintPreviewEx

    method PrintPreviewEx

    */
    inline void PrintPreviewEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowModal, bool MaximizeWindow);

    /*
    Method Register

    method Register

    */
    inline bool Register(const QString& SerialNo);

    /*
    Method ReportFooter

    property ReportFooter

    */
    inline grproLib::IGRReportFooter* ReportFooter(const QVariant& Index);

    /*
    Method ReportHeader

    property ReportHeader

    */
    inline grproLib::IGRReportHeader* ReportHeader(const QVariant& Index);

    /*
    Method SaveToFile

    method SaveToFile

    */
    inline bool SaveToFile(const QString& FileName);

    /*
    Method SaveToMemory

    method SaveToMemory

    */
    inline bool SaveToMemory(int*& ppData, int& pBytesCount);

    /*
    Method SaveToStr

    method SaveToStr

    */
    inline QString SaveToStr();

    /*
    Method SaveToURL

    method SaveToURL

    */
    inline bool SaveToURL(const QString& URL);

    /*
    Method SaveToVariant

    method SaveToVariant

    */
    inline QVariant SaveToVariant();

    /*
    Method SetSkin

    method SetSkin

    */
    inline void SetSkin(uint BackColorRed, uint BackColorGreen, uint BackColorBlue, int Style);

    /*
    Method SharePrintSetupDisableAllOptions

    method SharePrintSetupDisableAllOptions

    */
    inline void SharePrintSetupDisableAllOptions();

    /*
    Method SharePrintSetupEnableAllOptions

    method SharePrintSetupEnableAllOptions

    */
    inline void SharePrintSetupEnableAllOptions();

    /*
    Method SharePrintSetupGetOptionEnabled

    method SharePrintSetupGetOptionEnabled

    */
    inline bool SharePrintSetupGetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option);

    /*
    Method SharePrintSetupSetOptionEnabled

    method SharePrintSetupSetOptionEnabled

    */
    inline void SharePrintSetupSetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option, bool Enabled);

    /*
    Method SystemVarValue

    method SystemVarValue

    */
    inline int SystemVarValue(grproLib::tagGRSystemVar SystemVar);

    /*
    Method UnitToPixels

    method PixelsToUnit

    */
    inline int UnitToPixels(double UnitValue);

    /*
    Method UnprepareExport

    method UnprepareExport

    */
    inline void UnprepareExport();

    /*
    Method _CreatePicture
    */
    inline grproLib::IGRPicture* _CreatePicture();

    /*
    Method _CreateProxyReport

    method _CreateProxyReport

    */
    inline grproLib::IGridppReport* _CreateProxyReport();

    /*
    Method _DestroyProxyReport

    method _DestroyProxyReport

    */
    inline void _DestroyProxyReport();

    /*
    Method _ObjLoad

    method _ObjLoad

    */
    inline void _ObjLoad();

    /*
    Method _ObjLoadBegin

    method _ObjLoadBegin

    */
    inline void _ObjLoadBegin(uint& pData, uint BytesCount);

    /*
    Method _ObjLoadEnd

    method _ObjLoadEnd

    */
    inline void _ObjLoadEnd();

    /*
    Method _ObjLoadEof

    method _ObjLoadEof

    */
    inline bool _ObjLoadEof();

    /*
    Method _ObjSave

    method _ObjSave

    */
    inline void _ObjSave();

    /*
    Method _ObjSaveBegin

    method _ObjSaveBegin

    */
    inline void _ObjSaveBegin();

    /*
    Method _ObjSaveEnd

    method _ObjSaveEnd

    */
    inline void _ObjSaveEnd(int*& ppData, uint& pBytesCount);

    /*
    Method _RefreshPrinter

    method _RefreshPrinter

    */
    inline void _RefreshPrinter();

    /*
    Method _SystemImage

    property _SystemImage

    */
    inline int _SystemImage(grproLib::tagGRSystemImage SystemImage);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT GRDisplayViewer : public QAxWidget
{
public:
    GRDisplayViewer(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{613f3ae0-d4eb-4f9f-b750-576c09700351}");
    }

    GRDisplayViewer(IGRDisplayViewer *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlwaysShowHScrollBar

    property AlwaysShowHScrollBar

    */
    inline bool AlwaysShowHScrollBar() const; //Returns the value of AlwaysShowHScrollBar
    inline void SetAlwaysShowHScrollBar(bool value); //Sets the value of the AlwaysShowHScrollBar property

    /*
    Property AlwaysShowSelection

    property AlwaysShowSelection

    */
    inline bool AlwaysShowSelection() const; //Returns the value of AlwaysShowSelection
    inline void SetAlwaysShowSelection(bool value); //Sets the value of the AlwaysShowSelection property

    /*
    Property AlwaysShowVScrollBar

    property AlwaysShowVScrollBar

    */
    inline bool AlwaysShowVScrollBar() const; //Returns the value of AlwaysShowVScrollBar
    inline void SetAlwaysShowVScrollBar(bool value); //Sets the value of the AlwaysShowVScrollBar property

    /*
    Property BackgroundColor

    property BackgroundColor

    */
    inline QColor BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(const QColor& value); //Sets the value of the BackgroundColor property

    /*
    Property BatchFinished

    property BatchFinished

    */
    inline bool BatchFinished() const; //Returns the value of BatchFinished
    inline void SetBatchFinished(bool value); //Sets the value of the BatchFinished property

    /*
    Property BatchGetRecord

    property BatchGetRecord

    */
    inline bool BatchGetRecord() const; //Returns the value of BatchGetRecord
    inline void SetBatchGetRecord(bool value); //Sets the value of the BatchGetRecord property

    /*
    Property BatchNo

    property BatchNo

    */
    inline int BatchNo() const; //Returns the value of BatchNo

    /*
    Property BatchStartRecNo

    property BatchStartRecNo

    */
    inline int BatchStartRecNo() const; //Returns the value of BatchStartRecNo

    /*
    Property BatchWantRecords

    property BatchWantRecords

    */
    inline int BatchWantRecords() const; //Returns the value of BatchWantRecords
    inline void SetBatchWantRecords(int value); //Sets the value of the BatchWantRecords property

    /*
    Property BorderStyle
    */
    inline grproLib::tagGRViewerBorderStyle BorderStyle() const; //Returns the value of BorderStyle

    /*
    Property BottomGap

    property BottomGap

    */
    inline int BottomGap() const; //Returns the value of BottomGap
    inline void SetBottomGap(int value); //Sets the value of the BottomGap property

    /*
    Property ColumnMove

    property ColumnMove

    */
    inline bool ColumnMove() const; //Returns the value of ColumnMove
    inline void SetColumnMove(bool value); //Sets the value of the ColumnMove property

    /*
    Property ColumnResize

    property ColumnResize

    */
    inline bool ColumnResize() const; //Returns the value of ColumnResize
    inline void SetColumnResize(bool value); //Sets the value of the ColumnResize property

    /*
    Property CurPageNo

    property CurPageNo

    */
    inline int CurPageNo() const; //Returns the value of CurPageNo
    inline void SetCurPageNo(int value); //Sets the value of the CurPageNo property

    /*
    Property GridCenterView

    property GridCenterView

    */
    inline bool GridCenterView() const; //Returns the value of GridCenterView
    inline void SetGridCenterView(bool value); //Sets the value of the GridCenterView property

    /*
    Property GridTitle3D

    property GridTitle3D

    */
    inline bool GridTitle3D() const; //Returns the value of GridTitle3D
    inline void SetGridTitle3D(bool value); //Sets the value of the GridTitle3D property

    /*
    Property HScrollPos

    property HScrollPos

    */
    inline int HScrollPos() const; //Returns the value of HScrollPos
    inline void SetHScrollPos(int value); //Sets the value of the HScrollPos property

    /*
    Property LeftGap

    property LeftGap

    */
    inline int LeftGap() const; //Returns the value of LeftGap
    inline void SetLeftGap(int value); //Sets the value of the LeftGap property

    /*
    Property PageCount

    property PageCount

    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property Report

    property Report

    */
    inline grproLib::IGridppReport* Report() const; //Returns the value of Report
    inline void SetReport(grproLib::IGridppReport* value); //Sets the value of the Report property

    /*
    Property ResizeToFit

    property ResizeToFit

    */
    inline bool ResizeToFit() const; //Returns the value of ResizeToFit
    inline void SetResizeToFit(bool value); //Sets the value of the ResizeToFit property

    /*
    Property ResortCaseSensitive

    property ResortCaseSensitive

    */
    inline bool ResortCaseSensitive() const; //Returns the value of ResortCaseSensitive
    inline void SetResortCaseSensitive(bool value); //Sets the value of the ResortCaseSensitive property

    /*
    Property ResortDefaultAsc

    property ResortDefaultAsc

    */
    inline bool ResortDefaultAsc() const; //Returns the value of ResortDefaultAsc
    inline void SetResortDefaultAsc(bool value); //Sets the value of the ResortDefaultAsc property

    /*
    Property Resortable

    property Resortable

    */
    inline bool Resortable() const; //Returns the value of Resortable
    inline void SetResortable(bool value); //Sets the value of the Resortable property

    /*
    Property RightGap

    property RightGap

    */
    inline int RightGap() const; //Returns the value of RightGap
    inline void SetRightGap(int value); //Sets the value of the RightGap property

    /*
    Property RowCount

    property RowCount

    */
    inline int RowCount() const; //Returns the value of RowCount

    /*
    Property RowSelection

    property RowSelection

    */
    inline bool RowSelection() const; //Returns the value of RowSelection
    inline void SetRowSelection(bool value); //Sets the value of the RowSelection property

    /*
    Property RowsPerPage

    property RowsPerPage

    */
    inline int RowsPerPage() const; //Returns the value of RowsPerPage
    inline void SetRowsPerPage(int value); //Sets the value of the RowsPerPage property

    /*
    Property Running

    property Running

    */
    inline bool Running() const; //Returns the value of Running

    /*
    Property Searchable

    property Searchable

    */
    inline bool Searchable() const; //Returns the value of Searchable
    inline void SetSearchable(bool value); //Sets the value of the Searchable property

    /*
    Property SelColumnName

    property SelColumnName

    */
    inline QString SelColumnName() const; //Returns the value of SelColumnName
    inline void SetSelColumnName(const QString& value); //Sets the value of the SelColumnName property

    /*
    Property SelColumnNo

    property SelColumnNo

    */
    inline int SelColumnNo() const; //Returns the value of SelColumnNo
    inline void SetSelColumnNo(int value); //Sets the value of the SelColumnNo property

    /*
    Property SelRowNo

    property SelRowNo

    */
    inline int SelRowNo() const; //Returns the value of SelRowNo
    inline void SetSelRowNo(int value); //Sets the value of the SelRowNo property

    /*
    Property SelectionBackColor

    property SelectionBackColor

    */
    inline QColor SelectionBackColor() const; //Returns the value of SelectionBackColor
    inline void SetSelectionBackColor(const QColor& value); //Sets the value of the SelectionBackColor property

    /*
    Property SelectionFollowScroll

    property SelectionFollowScroll

    */
    inline bool SelectionFollowScroll() const; //Returns the value of SelectionFollowScroll
    inline void SetSelectionFollowScroll(bool value); //Sets the value of the SelectionFollowScroll property

    /*
    Property SelectionForeColor

    property SelectionForeColor

    */
    inline QColor SelectionForeColor() const; //Returns the value of SelectionForeColor
    inline void SetSelectionForeColor(const QColor& value); //Sets the value of the SelectionForeColor property

    /*
    Property ShowFooter

    property ShowFooter

    */
    inline bool ShowFooter() const; //Returns the value of ShowFooter
    inline void SetShowFooter(bool value); //Sets the value of the ShowFooter property

    /*
    Property ShowHeader

    property ShowHeader

    */
    inline bool ShowHeader() const; //Returns the value of ShowHeader
    inline void SetShowHeader(bool value); //Sets the value of the ShowHeader property

    /*
    Property ShowPreviewLine

    property ShowPreviewLine

    */
    inline bool ShowPreviewLine() const; //Returns the value of ShowPreviewLine
    inline void SetShowPreviewLine(bool value); //Sets the value of the ShowPreviewLine property

    /*
    Property ShowToolbar

    property ShowToolbar

    */
    inline bool ShowToolbar() const; //Returns the value of ShowToolbar
    inline void SetShowToolbar(bool value); //Sets the value of the ShowToolbar property

    /*
    Property SortColumns

    property SortColumns

    */
    inline QString SortColumns() const; //Returns the value of SortColumns
    inline void SetSortColumns(const QString& value); //Sets the value of the SortColumns property

    /*
    Property ToPostColumnLayout

    property ToPostColumnLayout

    */
    inline bool ToPostColumnLayout() const; //Returns the value of ToPostColumnLayout
    inline void SetToPostColumnLayout(bool value); //Sets the value of the ToPostColumnLayout property

    /*
    Property TopGap

    property TopGap

    */
    inline int TopGap() const; //Returns the value of TopGap
    inline void SetTopGap(int value); //Sets the value of the TopGap property

    /*
    Property TotalRecord

    property TotalRecord

    */
    inline int TotalRecord() const; //Returns the value of TotalRecord
    inline void SetTotalRecord(int value); //Sets the value of the TotalRecord property

    /*
    Property VScrollPos

    property VScrollPos

    */
    inline int VScrollPos() const; //Returns the value of VScrollPos
    inline void SetVScrollPos(int value); //Sets the value of the VScrollPos property

    /*
    Method AddToolbarControl

    method AddToolbarControl

    */
    inline void AddToolbarControl(grproLib::tagGRToolControlType2 ControlType);

    /*
    Method AddToolbarCustomButton

    method AddToolbarCustomButton

    */
    inline void AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText);

    /*
    Method FirstPage

    method FirstPage

    */
    inline void FirstPage();

    /*
    Method GetColumnVisible

    method GetColumnVisible

    */
    inline bool GetColumnVisible(const QString& ColumnName);

    /*
    Method GetContentCellFromPos

    method GetContentCellFromPos

    */
    inline grproLib::IGRColumnContentCell* GetContentCellFromPos(int xPos, int yPos);

    /*
    Method GetControlFromPos

    method GetControlFromPos

    */
    inline grproLib::IGRControl* GetControlFromPos(int xPos, int yPos);

    /*
    Method GetSectionFromPos

    method GetSectionFromPos

    */
    inline grproLib::IGRSection* GetSectionFromPos(int xPos, int yPos);

    /*
    Method GetSelRowCellText

    method GetSelRowCellText

    */
    inline QString GetSelRowCellText(int ColumnIndex);

    /*
    Method GetTitleCellFromPos

    method GetTitleCellFromPos

    */
    inline grproLib::IGRColumnTitleCell* GetTitleCellFromPos(int xPos, int yPos);

    /*
    Method LastPage

    method LastPage

    */
    inline void LastPage();

    /*
    Method LockUpdate

    method LockUpdate

    */
    inline void LockUpdate();

    /*
    Method NextPage

    method NextPage

    */
    inline void NextPage();

    /*
    Method PostColumnLayout

    method PostColumnLayout

    */
    inline void PostColumnLayout();

    /*
    Method PriorPage

    method PriorPage

    */
    inline void PriorPage();

    /*
    Method QuickRefresh

    method QuickRefresh

    */
    inline void QuickRefresh();

    /*
    Method Refresh

    method Refresh

    */
    inline void Refresh();

    /*
    Method RemoveToolbarControl

    method RemoveToolbarControl

    */
    inline void RemoveToolbarControl(grproLib::tagGRToolControlType2 ControlType);

    /*
    Method ResetToolbarContent

    method ResetToolbarContent

    */
    inline void ResetToolbarContent();

    /*
    Method ResizeColumnToFit

    method ResizeColumnToFit

    */
    inline void ResizeColumnToFit();

    /*
    Method ResizeColumnToFitPage

    method ResizeColumnToFitPage

    */
    inline void ResizeColumnToFitPage();

    /*
    Method ResizeColumnToFitText

    method ResizeColumnToFitText

    */
    inline void ResizeColumnToFitText();

    /*
    Method Search

    method Search

    */
    inline bool Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg);

    /*
    Method SearchAgain

    method SearchAgain

    */
    inline bool SearchAgain(bool ShowMsg);

    /*
    Method SetBorderStyle
    */
    inline void SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle);

    /*
    Method SetColumnVisible

    method SetColumnVisible

    */
    inline void SetColumnVisible(const QString& ColumnName, bool Visible);

    /*
    Method ShowColumnVisibleDlg

    method ShowColumnVisibleDlg

    */
    inline void ShowColumnVisibleDlg();

    /*
    Method Start

    method Start

    */
    inline void Start();

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

    /*
    Method UnlockUpdate

    method UnlockUpdate

    */
    inline void UnlockUpdate();

    /*
    Method UpdateColumnView

    method UpdateColumnView

    */
    inline void UpdateColumnView();

    /*
    Method UpdateControl

    method UpdateControl

    */
    inline void UpdateControl(grproLib::IGRControl* pControl);

    /*
    Method UpdateLanguage

    method UpdateLanguage

    */
    inline void UpdateLanguage();

    /*
    Method UpdateSelCell

    method UpdateSelCell

    */
    inline void UpdateSelCell();

    /*
    Method UpdateSelRow

    method UpdateSelRow

    */
    inline void UpdateSelRow();

    /*
    Method UpdateToolbar

    method UpdateToolbar

    */
    inline void UpdateToolbar();

    /*
    Method UpdateViewer

    method UpdateViewer

    */
    inline void UpdateViewer();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT GRDisplayViewerProps : public QAxObject
{
public:
    GRDisplayViewerProps(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{9d74b4b2-7e9b-48ed-be28-d3531c2df170}");
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT GRPrintViewer : public QAxWidget
{
public:
    GRPrintViewer(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{e497f563-e14c-48ec-87fa-e9c514d3bc0c}");
    }

    GRPrintViewer(IGRPrintViewer *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BatchReport

    property BatchReport

    */
    inline grproLib::IGRObject* BatchReport() const; //Returns the value of BatchReport
    inline void SetBatchReport(grproLib::IGRObject* value); //Sets the value of the BatchReport property

    /*
    Property BorderStyle
    */
    inline grproLib::tagGRViewerBorderStyle BorderStyle() const; //Returns the value of BorderStyle

    /*
    Property ColPages

    property ColPages

    */
    inline int ColPages() const; //Returns the value of ColPages
    inline void SetColPages(int value); //Sets the value of the ColPages property

    /*
    Property CurPageNo

    property CurPageNo

    */
    inline int CurPageNo() const; //Returns the value of CurPageNo
    inline void SetCurPageNo(int value); //Sets the value of the CurPageNo property

    /*
    Property EditMode

    property EditMode

    */
    inline grproLib::tagGRPreviewEditMode EditMode() const; //Returns the value of EditMode
    inline void SetEditMode(grproLib::tagGRPreviewEditMode value); //Sets the value of the EditMode property

    /*
    Property GenerateStyle

    property GenerateStyle

    */
    inline grproLib::tagGRPrintGenerateStyle GenerateStyle() const; //Returns the value of GenerateStyle
    inline void SetGenerateStyle(grproLib::tagGRPrintGenerateStyle value); //Sets the value of the GenerateStyle property

    /*
    Property PageCount

    property PageCount

    */
    inline int PageCount() const; //Returns the value of PageCount

    /*
    Property Report

    property Report

    */
    inline grproLib::IGridppReport* Report() const; //Returns the value of Report
    inline void SetReport(grproLib::IGridppReport* value); //Sets the value of the Report property

    /*
    Property RowPages

    property RowPages

    */
    inline int RowPages() const; //Returns the value of RowPages
    inline void SetRowPages(int value); //Sets the value of the RowPages property

    /*
    Property Running

    property Running

    */
    inline bool Running() const; //Returns the value of Running

    /*
    Property Searchable

    property Searchable

    */
    inline bool Searchable() const; //Returns the value of Searchable
    inline void SetSearchable(bool value); //Sets the value of the Searchable property

    /*
    Property ShowBookmark

    property ShowBookmark

    */
    inline bool ShowBookmark() const; //Returns the value of ShowBookmark
    inline void SetShowBookmark(bool value); //Sets the value of the ShowBookmark property

    /*
    Property ShowMarginCorner

    property ShowMarginCorner

    */
    inline bool ShowMarginCorner() const; //Returns the value of ShowMarginCorner
    inline void SetShowMarginCorner(bool value); //Sets the value of the ShowMarginCorner property

    /*
    Property ShowRuler

    property ShowRuler

    */
    inline bool ShowRuler() const; //Returns the value of ShowRuler
    inline void SetShowRuler(bool value); //Sets the value of the ShowRuler property

    /*
    Property ShowToolbar

    property ShowToolbar

    */
    inline bool ShowToolbar() const; //Returns the value of ShowToolbar
    inline void SetShowToolbar(bool value); //Sets the value of the ShowToolbar property

    /*
    Property ViewMode

    property ViewMode

    */
    inline grproLib::tagGRPrintViewMode ViewMode() const; //Returns the value of ViewMode
    inline void SetViewMode(grproLib::tagGRPrintViewMode value); //Sets the value of the ViewMode property

    /*
    Property ZoomPercent

    property ZoomPercent

    */
    inline int ZoomPercent() const; //Returns the value of ZoomPercent
    inline void SetZoomPercent(int value); //Sets the value of the ZoomPercent property

    /*
    Method AddToolbarControl

    method AddToolbarControl

    */
    inline void AddToolbarControl(grproLib::tagGRToolControlType ControlType);

    /*
    Method AddToolbarCustomButton

    method AddToolbarCustomButton

    */
    inline void AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText);

    /*
    Method FirstPage

    method FirstPage

    */
    inline void FirstPage();

    /*
    Method LastPage

    method LastPage

    */
    inline void LastPage();

    /*
    Method LoadFromDocumentFile

    method LoadFromDocumentFile

    */
    inline void LoadFromDocumentFile(const QString& FileName);

    /*
    Method NextPage

    method NextPage

    */
    inline void NextPage();

    /*
    Method Print

    method Print

    */
    inline void Print(bool ShowPrintDialog);

    /*
    Method PriorPage

    method PriorPage

    */
    inline void PriorPage();

    /*
    Method QuickRefresh

    method QuickRefresh

    */
    inline void QuickRefresh();

    /*
    Method Refresh

    method Refresh

    */
    inline void Refresh();

    /*
    Method RemoveToolbarControl

    method RemoveToolbarControl

    */
    inline void RemoveToolbarControl(grproLib::tagGRToolControlType ControlType);

    /*
    Method ResetToolbarContent

    method ResetToolbarContent

    */
    inline void ResetToolbarContent();

    /*
    Method Search

    method Search

    */
    inline bool Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg);

    /*
    Method SearchAgain

    method SearchAgain

    */
    inline bool SearchAgain(bool ShowMsg);

    /*
    Method SetBorderStyle
    */
    inline void SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle);

    /*
    Method Start

    method Start

    */
    inline void Start();

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

    /*
    Method UpdateLanguage

    method UpdateLanguage

    */
    inline void UpdateLanguage();

    /*
    Method UpdateToolbar

    method UpdateToolbar

    */
    inline void UpdateToolbar();

    /*
    Method ZoomIn

    method ZoomIn

    */
    inline void ZoomIn();

    /*
    Method ZoomOut

    method ZoomOut

    */
    inline void ZoomOut();

    /*
    Method ZoomToFit

    method ZoomToFit

    */
    inline void ZoomToFit();

    /*
    Method ZoomToHeight

    method ZoomToHeight

    */
    inline void ZoomToHeight();

    /*
    Method ZoomToWidth

    method ZoomToWidth

    */
    inline void ZoomToWidth();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class GRPROLIB_EXPORT GRPrintViewerProps : public QAxObject
{
public:
    GRPrintViewerProps(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{ca1fa286-552a-4299-a3d8-89593eccb553}");
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_GRPROLIB_NOINLINES
inline QString IGRGroup::ByFields() const
{
    QVariant qax_result = property("ByFields");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroup::SetByFields(const QString& value){ setProperty("ByFields", QVariant(value)); }

inline grproLib::IGRGroupFooter* IGRGroup::Footer() const
{
    grproLib::IGRGroupFooter* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGroupFooter*>("IGRGroupFooter*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGroupFooter>("IGRGroupFooter", qax_pointer);
    QVariant qax_result = property("Footer");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGroupFooter**)qax_result.constData();
}

inline QString IGRGroup::GroupBeginScript() const
{
    QVariant qax_result = property("GroupBeginScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroup::SetGroupBeginScript(const QString& value){ setProperty("GroupBeginScript", QVariant(value)); }

inline QString IGRGroup::GroupEndScript() const
{
    QVariant qax_result = property("GroupEndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroup::SetGroupEndScript(const QString& value){ setProperty("GroupEndScript", QVariant(value)); }

inline grproLib::IGRGroupHeader* IGRGroup::Header() const
{
    grproLib::IGRGroupHeader* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGroupHeader*>("IGRGroupHeader*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGroupHeader>("IGRGroupHeader", qax_pointer);
    QVariant qax_result = property("Header");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGroupHeader**)qax_result.constData();
}

inline QString IGRGroup::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroup::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline bool IGRGroup::PageGroup() const
{
    QVariant qax_result = property("PageGroup");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroup::SetPageGroup(bool value){ setProperty("PageGroup", QVariant(value)); }

inline grproLib::IGRDetailGrid* IGRGroup::Parent() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline QString IGRGroup::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroup::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::IGRRecordset* IGRGroup::_Dataset() const
{
    grproLib::IGRRecordset* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRecordset*>("IGRRecordset*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRecordset>("IGRRecordset", qax_pointer);
    QVariant qax_result = property("_Dataset");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRecordset**)qax_result.constData();
}

inline void IGRGroup::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRGroup::_BeginOneGroup()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IGRGroup::_EndOneGroup()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IGRGroup::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IGRGroup::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRGroup::_ProcessGroupRecord()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline QString IGRObject::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRObject::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline void IGRObject::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRObject::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRObject::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline QColor IGRGroupHeader::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRGroupHeader::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRGroupHeader::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupHeader::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRGroupHeader::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRGroupHeader::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRGroupHeader::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRGroupHeader::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRGroupHeader::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupHeader::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline grproLib::IGRGroup* IGRGroupHeader::Group() const
{
    grproLib::IGRGroup* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGroup*>("IGRGroup*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGroup>("IGRGroup", qax_pointer);
    QVariant qax_result = property("Group");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGroup**)qax_result.constData();
}

inline grproLib::tagGRGrpKpTogetherStyle IGRGroupHeader::GroupKeepTogether() const
{
    QVariant qax_result = property("GroupKeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRGrpKpTogetherStyle*)qax_result.constData();
}
inline void IGRGroupHeader::SetGroupKeepTogether(grproLib::tagGRGrpKpTogetherStyle value){ setProperty("GroupKeepTogether", QVariant(value)); }

inline bool IGRGroupHeader::HNewPageFixed() const
{
    QVariant qax_result = property("HNewPageFixed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetHNewPageFixed(bool value){ setProperty("HNewPageFixed", QVariant(value)); }

inline double IGRGroupHeader::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRGroupHeader::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRGroupHeader::IncludeFooter() const
{
    QVariant qax_result = property("IncludeFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetIncludeFooter(bool value){ setProperty("IncludeFooter", QVariant(value)); }

inline bool IGRGroupHeader::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRGroupHeader::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupHeader::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::tagGRNewPageStyle IGRGroupHeader::NewPage() const
{
    QVariant qax_result = property("NewPage");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageStyle*)qax_result.constData();
}
inline void IGRGroupHeader::SetNewPage(grproLib::tagGRNewPageStyle value){ setProperty("NewPage", QVariant(value)); }

inline grproLib::tagGRNewPageColumnStyle IGRGroupHeader::NewPageColumn() const
{
    QVariant qax_result = property("NewPageColumn");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageColumnStyle*)qax_result.constData();
}
inline void IGRGroupHeader::SetNewPageColumn(grproLib::tagGRNewPageColumnStyle value){ setProperty("NewPageColumn", QVariant(value)); }

inline QString IGRGroupHeader::OccupiedColumns() const
{
    QVariant qax_result = property("OccupiedColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupHeader::SetOccupiedColumns(const QString& value){ setProperty("OccupiedColumns", QVariant(value)); }

inline bool IGRGroupHeader::OccupyColumn() const
{
    QVariant qax_result = property("OccupyColumn");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetOccupyColumn(bool value){ setProperty("OccupyColumn", QVariant(value)); }

inline IUnknown* IGRGroupHeader::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IGRGroupHeader::PrintGridBorder() const
{
    QVariant qax_result = property("PrintGridBorder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetPrintGridBorder(bool value){ setProperty("PrintGridBorder", QVariant(value)); }

inline bool IGRGroupHeader::RepeatOnPage() const
{
    QVariant qax_result = property("RepeatOnPage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetRepeatOnPage(bool value){ setProperty("RepeatOnPage", QVariant(value)); }

inline bool IGRGroupHeader::SameAsColumn() const
{
    QVariant qax_result = property("SameAsColumn");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetSameAsColumn(bool value){ setProperty("SameAsColumn", QVariant(value)); }

inline grproLib::tagGRSectionType IGRGroupHeader::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRGroupHeader::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupHeader::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGROCGroupHeaderVAlign IGRGroupHeader::VAlign() const
{
    QVariant qax_result = property("VAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGROCGroupHeaderVAlign*)qax_result.constData();
}
inline void IGRGroupHeader::SetVAlign(grproLib::tagGROCGroupHeaderVAlign value){ setProperty("VAlign", QVariant(value)); }

inline bool IGRGroupHeader::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupHeader::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRGroupHeader::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRGroupHeader::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IGRGroupHeader::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IGRGroupHeader::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}


inline QColor IGRGroupSection::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRGroupSection::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRGroupSection::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupSection::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRGroupSection::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupSection::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRGroupSection::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupSection::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRGroupSection::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRGroupSection::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRGroupSection::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupSection::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline grproLib::IGRGroup* IGRGroupSection::Group() const
{
    grproLib::IGRGroup* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGroup*>("IGRGroup*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGroup>("IGRGroup", qax_pointer);
    QVariant qax_result = property("Group");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGroup**)qax_result.constData();
}

inline bool IGRGroupSection::HNewPageFixed() const
{
    QVariant qax_result = property("HNewPageFixed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupSection::SetHNewPageFixed(bool value){ setProperty("HNewPageFixed", QVariant(value)); }

inline double IGRGroupSection::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRGroupSection::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRGroupSection::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupSection::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRGroupSection::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupSection::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::tagGRNewPageStyle IGRGroupSection::NewPage() const
{
    QVariant qax_result = property("NewPage");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageStyle*)qax_result.constData();
}
inline void IGRGroupSection::SetNewPage(grproLib::tagGRNewPageStyle value){ setProperty("NewPage", QVariant(value)); }

inline IUnknown* IGRGroupSection::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IGRGroupSection::PrintGridBorder() const
{
    QVariant qax_result = property("PrintGridBorder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupSection::SetPrintGridBorder(bool value){ setProperty("PrintGridBorder", QVariant(value)); }

inline grproLib::tagGRSectionType IGRGroupSection::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRGroupSection::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupSection::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRGroupSection::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupSection::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRGroupSection::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRGroupSection::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRGroupSection::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IGRGroupSection::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}


inline QColor IGRSection::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSection::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRSection::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSection::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRSection::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSection::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRSection::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSection::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRSection::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRSection::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRSection::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSection::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRSection::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSection::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IGRSection::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSection::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRSection::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRSectionType IGRSection::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRSection::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSection::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRSection::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSection::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRSection::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRSection::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRSection::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRSection::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline bool IGRFont::Bold() const
{
    QVariant qax_result = property("Bold");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFont::SetBold(bool value){ setProperty("Bold", QVariant(value)); }

inline int IGRFont::Charset() const
{
    QVariant qax_result = property("Charset");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRFont::SetCharset(int value){ setProperty("Charset", QVariant(value)); }

inline bool IGRFont::Italic() const
{
    QVariant qax_result = property("Italic");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFont::SetItalic(bool value){ setProperty("Italic", QVariant(value)); }

inline QString IGRFont::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFont::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QFont IGRFont::OleFont() const
{
    QVariant qax_result = property("OleFont");
    Q_ASSERT(qax_result.isValid());
    return *(QFont*)qax_result.constData();
}
inline void IGRFont::SetOleFont(const QFont& value){ setProperty("OleFont", QVariant(value)); }

inline double IGRFont::Point() const
{
    QVariant qax_result = property("Point");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRFont::SetPoint(double value){ setProperty("Point", QVariant(value)); }

inline bool IGRFont::Strikethrough() const
{
    QVariant qax_result = property("Strikethrough");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFont::SetStrikethrough(bool value){ setProperty("Strikethrough", QVariant(value)); }

inline bool IGRFont::Underline() const
{
    QVariant qax_result = property("Underline");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFont::SetUnderline(bool value){ setProperty("Underline", QVariant(value)); }

inline QFont IGRFont::UsingOleFont() const
{
    QVariant qax_result = property("UsingOleFont");
    Q_ASSERT(qax_result.isValid());
    return *(QFont*)qax_result.constData();
}

inline int IGRFont::Weight() const
{
    QVariant qax_result = property("Weight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRFont::SetWeight(int value){ setProperty("Weight", QVariant(value)); }


inline int IGRControls::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRControls::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRControl* IGRControls::Add(grproLib::tagGRControlType ControlType)
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRControls::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline grproLib::IGRControl* IGRControls::Item(const QVariant& Index)
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRControls::Remove(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRControls::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRControls::SetItemOrder(const QVariant& Index, int OrderNo)
{
    void *_a[] = {0, (void*)&Index, (void*)&OrderNo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline QString IGRControl::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRControl::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRControl::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRControl::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRControl::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRControl::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRControl::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRControl::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRControl::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRControl::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRControl::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRControl::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRControl::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRControl::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRControl::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRControl::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRControl::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRControl::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRControl::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRControl::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRControl::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRControl::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRControl::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRControl::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRControl::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRControl::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRControl::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRControl::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRControl::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRControl::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRControl::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRControl::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRControl::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRControl::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRControl::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRControl::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRControl::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRControl::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRControl::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRControl::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRControl::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRControl::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline grproLib::IGRFont* IGRControl::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRControl::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRControl::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRControl::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRControl::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRControl::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRControl::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRControl::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRControl::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRControl::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRControl::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRControl::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRControl::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRControl::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRControl::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRControl::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline QString IGRControl::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRControl::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline double IGRControl::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRControl::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRControl::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRControl::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRControl::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRControl::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int IGRControl::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRControl::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRControl::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRControl::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRControl::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRControl::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRControl::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRControl::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRControl::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void IGRControl::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void IGRControl::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IGRControl::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}


inline QString IGRTextBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRTextBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRTextBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRTextBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRTextBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRTextBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRTextBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRTextBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRTextBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRTextBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRTextBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRTextBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRTextBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRTextBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRTextBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRTextBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRTextBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRTextBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRTextBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRTextBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRTextBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRTextBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRTextBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRTextBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRTextBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRTextBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRTextBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRTextBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRTextBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRTextBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRTextBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRTextBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRTextBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRTextBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRTextBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRTextBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRTextBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRTextBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRTextBox::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRTextBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRTextBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline bool IGRTextBox::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRTextBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRTextBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRTextBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline QString IGRTextBox::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline double IGRTextBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRTextBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRTextBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRTextBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRTextBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRTextBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRTextBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRTextBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRTextBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRTextBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRTextBox::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRTextBox::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRTextBox::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline QString IGRTextBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRTextBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRTextBox::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRTextBox::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline double IGRTextBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRTextBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRTextBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRTextBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRTextBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline bool IGRTextBox::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRTextBox::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRTextBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRTextBox::_ExportXlsFormat() const
{
    QVariant qax_result = property("_ExportXlsFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IGRTextBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRTextBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRTextBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRTextBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRTextBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRTextBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRTextBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRTextBox::_CalcFullViewWidth(int& NewWidth)
{
    void *_a[] = {0, (void*)&NewWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRTextBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGRTextBox::_FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType)
{
    void *_a[] = {0, (void*)&pValue, (void*)&pFormatText, (void*)&pDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRTextBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IGRTextBox::_HasGetDisplayTextScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRTextBox::_HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight)
{
    void *_a[] = {0, (void*)&ContentWidth, (void*)&HopeWidth, (void*)&HopeHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IGRTextBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRTextBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline QString IGRChart::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRChart::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRChart::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRChart::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRChart::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRChart::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRChart::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRChart::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRChart::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRChart::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRChart::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRChart::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRChart::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRChart::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRChart::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRChart::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRChart::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRChart::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRChart::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRChart::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRChart::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRChart::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRChart::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline bool IGRChart::BarSingleSeriesColor() const
{
    QVariant qax_result = property("BarSingleSeriesColor");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetBarSingleSeriesColor(bool value){ setProperty("BarSingleSeriesColor", QVariant(value)); }

inline int IGRChart::BarWidthPercent() const
{
    QVariant qax_result = property("BarWidthPercent");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetBarWidthPercent(int value){ setProperty("BarWidthPercent", QVariant(value)); }

inline QColor IGRChart::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRChart::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRChart::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRChart::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRChart::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline double IGRChart::BubbleScalePerCm() const
{
    QVariant qax_result = property("BubbleScalePerCm");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetBubbleScalePerCm(double value){ setProperty("BubbleScalePerCm", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRChart::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRChart::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline bool IGRChart::Chart3D() const
{
    QVariant qax_result = property("Chart3D");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetChart3D(bool value){ setProperty("Chart3D", QVariant(value)); }

inline grproLib::tagGRChartType IGRChart::ChartType() const
{
    QVariant qax_result = property("ChartType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRChartType*)qax_result.constData();
}
inline void IGRChart::SetChartType(grproLib::tagGRChartType value){ setProperty("ChartType", QVariant(value)); }

inline grproLib::tagGRControlType IGRChart::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline QColor IGRChart::CoordLineColor() const
{
    QVariant qax_result = property("CoordLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRChart::SetCoordLineColor(const QColor& value){ setProperty("CoordLineColor", QVariant(value)); }

inline bool IGRChart::CoordLineVisible() const
{
    QVariant qax_result = property("CoordLineVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetCoordLineVisible(bool value){ setProperty("CoordLineVisible", QVariant(value)); }

inline grproLib::tagGRDisplayCursor IGRChart::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRChart::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRChart::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRChart::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRChart::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRChart::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline int IGRChart::FillColorCount() const
{
    QVariant qax_result = property("FillColorCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline grproLib::IGRFont* IGRChart::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRChart::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRChart::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline int IGRChart::GroupCount() const
{
    QVariant qax_result = property("GroupCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetGroupCount(int value){ setProperty("GroupCount", QVariant(value)); }

inline double IGRChart::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRChart::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRChart::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRChart::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline grproLib::tagGRDisplayCursor IGRChart::LegendCursor() const
{
    QVariant qax_result = property("LegendCursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRChart::SetLegendCursor(grproLib::tagGRDisplayCursor value){ setProperty("LegendCursor", QVariant(value)); }

inline bool IGRChart::LegendShowSum() const
{
    QVariant qax_result = property("LegendShowSum");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetLegendShowSum(bool value){ setProperty("LegendShowSum", QVariant(value)); }

inline bool IGRChart::LegendValueVisible() const
{
    QVariant qax_result = property("LegendValueVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetLegendValueVisible(bool value){ setProperty("LegendValueVisible", QVariant(value)); }

inline bool IGRChart::LegendVisible() const
{
    QVariant qax_result = property("LegendVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetLegendVisible(bool value){ setProperty("LegendVisible", QVariant(value)); }

inline int IGRChart::LineWeight() const
{
    QVariant qax_result = property("LineWeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetLineWeight(int value){ setProperty("LineWeight", QVariant(value)); }

inline int IGRChart::MarginGap() const
{
    QVariant qax_result = property("MarginGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetMarginGap(int value){ setProperty("MarginGap", QVariant(value)); }

inline QString IGRChart::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRChart::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IGRChart::PointWeight() const
{
    QVariant qax_result = property("PointWeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetPointWeight(int value){ setProperty("PointWeight", QVariant(value)); }

inline grproLib::tagGRPrintType IGRChart::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRChart::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline int IGRChart::SeriesCount() const
{
    QVariant qax_result = property("SeriesCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetSeriesCount(int value){ setProperty("SeriesCount", QVariant(value)); }

inline grproLib::tagGRDisplayCursor IGRChart::SeriesCursor() const
{
    QVariant qax_result = property("SeriesCursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRChart::SetSeriesCursor(grproLib::tagGRDisplayCursor value){ setProperty("SeriesCursor", QVariant(value)); }

inline QString IGRChart::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IGRChart::Title() const
{
    QVariant qax_result = property("Title");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetTitle(const QString& value){ setProperty("Title", QVariant(value)); }

inline grproLib::IGRFont* IGRChart::TitleFont() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("TitleFont");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline double IGRChart::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRChart::ValueAsPercent() const
{
    QVariant qax_result = property("ValueAsPercent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetValueAsPercent(bool value){ setProperty("ValueAsPercent", QVariant(value)); }

inline QString IGRChart::ValueFormat() const
{
    QVariant qax_result = property("ValueFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetValueFormat(const QString& value){ setProperty("ValueFormat", QVariant(value)); }

inline bool IGRChart::ValueVisible() const
{
    QVariant qax_result = property("ValueVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetValueVisible(bool value){ setProperty("ValueVisible", QVariant(value)); }

inline bool IGRChart::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRChart::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline QString IGRChart::XAxisLabel() const
{
    QVariant qax_result = property("XAxisLabel");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetXAxisLabel(const QString& value){ setProperty("XAxisLabel", QVariant(value)); }

inline double IGRChart::XAxisMaximum() const
{
    QVariant qax_result = property("XAxisMaximum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetXAxisMaximum(double value){ setProperty("XAxisMaximum", QVariant(value)); }

inline double IGRChart::XAxisMinimum() const
{
    QVariant qax_result = property("XAxisMinimum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetXAxisMinimum(double value){ setProperty("XAxisMinimum", QVariant(value)); }

inline double IGRChart::XAxisSpace() const
{
    QVariant qax_result = property("XAxisSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetXAxisSpace(double value){ setProperty("XAxisSpace", QVariant(value)); }

inline int IGRChart::XAxisTextAngle() const
{
    QVariant qax_result = property("XAxisTextAngle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRChart::SetXAxisTextAngle(int value){ setProperty("XAxisTextAngle", QVariant(value)); }

inline int IGRChart::XAxisTextCount() const
{
    QVariant qax_result = property("XAxisTextCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRChart::XAxisTextFormat() const
{
    QVariant qax_result = property("XAxisTextFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetXAxisTextFormat(const QString& value){ setProperty("XAxisTextFormat", QVariant(value)); }

inline bool IGRChart::XAxisTextVisible() const
{
    QVariant qax_result = property("XAxisTextVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetXAxisTextVisible(bool value){ setProperty("XAxisTextVisible", QVariant(value)); }

inline bool IGRChart::XAxisVisible() const
{
    QVariant qax_result = property("XAxisVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetXAxisVisible(bool value){ setProperty("XAxisVisible", QVariant(value)); }

inline QString IGRChart::YAxisLabel() const
{
    QVariant qax_result = property("YAxisLabel");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetYAxisLabel(const QString& value){ setProperty("YAxisLabel", QVariant(value)); }

inline double IGRChart::YAxisMaximum() const
{
    QVariant qax_result = property("YAxisMaximum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetYAxisMaximum(double value){ setProperty("YAxisMaximum", QVariant(value)); }

inline double IGRChart::YAxisMinimum() const
{
    QVariant qax_result = property("YAxisMinimum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetYAxisMinimum(double value){ setProperty("YAxisMinimum", QVariant(value)); }

inline double IGRChart::YAxisSpace() const
{
    QVariant qax_result = property("YAxisSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRChart::SetYAxisSpace(double value){ setProperty("YAxisSpace", QVariant(value)); }

inline int IGRChart::YAxisTextCount() const
{
    QVariant qax_result = property("YAxisTextCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRChart::YAxisTextFormat() const
{
    QVariant qax_result = property("YAxisTextFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetYAxisTextFormat(const QString& value){ setProperty("YAxisTextFormat", QVariant(value)); }

inline bool IGRChart::YAxisTextVisible() const
{
    QVariant qax_result = property("YAxisTextVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetYAxisTextVisible(bool value){ setProperty("YAxisTextVisible", QVariant(value)); }

inline bool IGRChart::YAxisVisible() const
{
    QVariant qax_result = property("YAxisVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRChart::SetYAxisVisible(bool value){ setProperty("YAxisVisible", QVariant(value)); }

inline QString IGRChart::ZValueFormat() const
{
    QVariant qax_result = property("ZValueFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRChart::SetZValueFormat(const QString& value){ setProperty("ZValueFormat", QVariant(value)); }

inline int IGRChart::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRChart::_LegendCursorHandle() const
{
    QVariant qax_result = property("_LegendCursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRChart::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline int IGRChart::_SeriesCursorHandle() const
{
    QVariant qax_result = property("_SeriesCursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IGRChart::AddFillColor(const QColor& FillColor)
{
    void *_a[] = {0, (void*)&FillColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRChart::AddXAxisText(double PosVal, const QString& Text)
{
    void *_a[] = {0, (void*)&PosVal, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRChart::AddXYValue(int SeriesIndex, double XVal, double YVal)
{
    void *_a[] = {0, (void*)&SeriesIndex, (void*)&XVal, (void*)&YVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRChart::AddXYZValue(int SeriesIndex, double XVal, double YVal, double ZVal)
{
    void *_a[] = {0, (void*)&SeriesIndex, (void*)&XVal, (void*)&YVal, (void*)&ZVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRChart::AddYAxisText(double PosVal, const QString& Text)
{
    void *_a[] = {0, (void*)&PosVal, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRChart::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRChart::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRChart::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IGRChart::EmptyFillColors()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IGRChart::EmptyXAxisText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IGRChart::EmptyXYValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRChart::EmptyXYZValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRChart::EmptyYAxisText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline QColor IGRChart::FillColor(int Index)
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void IGRChart::GetXYValue(int SeriesIndex, int Index, double& pXVal, double& pYVal)
{
    void *_a[] = {0, (void*)&SeriesIndex, (void*)&Index, (void*)&pXVal, (void*)&pYVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRChart::GetXYZValue(int SeriesIndex, int Index, double& pXVal, double& pYVal, double& pZVal)
{
    void *_a[] = {0, (void*)&SeriesIndex, (void*)&Index, (void*)&pXVal, (void*)&pYVal, (void*)&pZVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline QString IGRChart::GroupLabel(int GroupIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&GroupIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void IGRChart::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline bool IGRChart::LoadDataFromXML(const QString& XML, bool FirstSeries, bool AutoSeries, bool AutoGroup)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XML, (void*)&FirstSeries, (void*)&AutoSeries, (void*)&AutoGroup};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool IGRChart::LoadXYDataFromXML(const QString& XML, bool AutoSeries)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XML, (void*)&AutoSeries};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IGRChart::LoadXYZDataFromXML(const QString& XML, bool AutoSeries)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XML, (void*)&AutoSeries};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IGRChart::PrepareSnapShot()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IGRChart::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline QString IGRChart::SeriesLabel(int SeriesIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SeriesIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IGRChart::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IGRChart::SetGroupLabel(int GroupIndex, const QString& rhs)
{
    void *_a[] = {0, (void*)&GroupIndex, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRChart::SetSeriesLabel(int SeriesIndex, const QString& rhs)
{
    void *_a[] = {0, (void*)&SeriesIndex, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void IGRChart::SetValue(int SeriesIndex, int GroupIndex, double rhs)
{
    void *_a[] = {0, (void*)&SeriesIndex, (void*)&GroupIndex, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void IGRChart::SnapShot()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline double IGRChart::Value(int SeriesIndex, int GroupIndex)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SeriesIndex, (void*)&GroupIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline QString IGRChart::XAxisText(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline int IGRChart::XYValueCount(int SeriesIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SeriesIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline int IGRChart::XYZValueCount(int SeriesIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SeriesIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline QString IGRChart::YAxisText(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline void IGRChart::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void IGRChart::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void IGRChart::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline void IGRChart::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
}


inline QString IGRStaticBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRStaticBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRStaticBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRStaticBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRStaticBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRStaticBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRStaticBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRStaticBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRStaticBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRStaticBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRStaticBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRStaticBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRStaticBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRStaticBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRStaticBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRStaticBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRStaticBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRStaticBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRStaticBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRStaticBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRStaticBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRStaticBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRStaticBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRStaticBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRStaticBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRStaticBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRStaticBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRStaticBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRStaticBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRStaticBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRStaticBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRStaticBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRStaticBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRStaticBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRStaticBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRStaticBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRStaticBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRStaticBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRStaticBox::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRStaticBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRStaticBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline bool IGRStaticBox::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRStaticBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRStaticBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRStaticBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline QString IGRStaticBox::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline double IGRStaticBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRStaticBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRStaticBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRStaticBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRStaticBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRStaticBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRStaticBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString IGRStaticBox::Parameter() const
{
    QVariant qax_result = property("Parameter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetParameter(const QString& value){ setProperty("Parameter", QVariant(value)); }

inline IUnknown* IGRStaticBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRStaticBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRStaticBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRStaticBox::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRStaticBox::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRStaticBox::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline QString IGRStaticBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IGRStaticBox::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRStaticBox::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRStaticBox::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRStaticBox::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline double IGRStaticBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRStaticBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRStaticBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRStaticBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRStaticBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline bool IGRStaticBox::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRStaticBox::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRStaticBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRStaticBox::_ExportXlsFormat() const
{
    QVariant qax_result = property("_ExportXlsFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IGRStaticBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRStaticBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRStaticBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRStaticBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRStaticBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRStaticBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRStaticBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRStaticBox::_CalcFullViewWidth(int& NewWidth)
{
    void *_a[] = {0, (void*)&NewWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRStaticBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IGRStaticBox::_FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType)
{
    void *_a[] = {0, (void*)&pValue, (void*)&pFormatText, (void*)&pDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRStaticBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IGRStaticBox::_HasGetDisplayTextScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRStaticBox::_HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight)
{
    void *_a[] = {0, (void*)&ContentWidth, (void*)&HopeWidth, (void*)&HopeHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRStaticBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IGRStaticBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}


inline QString IGRShapeBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRShapeBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRShapeBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRShapeBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRShapeBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRShapeBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRShapeBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRShapeBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRShapeBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRShapeBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRShapeBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRShapeBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRShapeBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRShapeBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRShapeBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRShapeBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRShapeBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRShapeBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRShapeBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRShapeBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRShapeBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRShapeBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRShapeBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRShapeBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRShapeBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRShapeBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRShapeBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRShapeBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRShapeBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline int IGRShapeBox::CornerDx() const
{
    QVariant qax_result = property("CornerDx");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRShapeBox::SetCornerDx(int value){ setProperty("CornerDx", QVariant(value)); }

inline int IGRShapeBox::CornerDy() const
{
    QVariant qax_result = property("CornerDy");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRShapeBox::SetCornerDy(int value){ setProperty("CornerDy", QVariant(value)); }

inline grproLib::tagGRDisplayCursor IGRShapeBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRShapeBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRShapeBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRShapeBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRShapeBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRShapeBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRShapeBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline QColor IGRShapeBox::FillColor() const
{
    QVariant qax_result = property("FillColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRShapeBox::SetFillColor(const QColor& value){ setProperty("FillColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRShapeBox::FillStyle() const
{
    QVariant qax_result = property("FillStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetFillStyle(grproLib::tagGRBackStyle value){ setProperty("FillStyle", QVariant(value)); }

inline grproLib::IGRFont* IGRShapeBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRShapeBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRShapeBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRShapeBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRShapeBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRShapeBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRShapeBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRShapeBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRShapeBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRShapeBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRShapeBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline grproLib::tagGRLineType IGRShapeBox::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRLineType*)qax_result.constData();
}
inline void IGRShapeBox::SetLineType(grproLib::tagGRLineType value){ setProperty("LineType", QVariant(value)); }

inline QString IGRShapeBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRShapeBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRShapeBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QColor IGRShapeBox::PenColor() const
{
    QVariant qax_result = property("PenColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRShapeBox::SetPenColor(const QColor& value){ setProperty("PenColor", QVariant(value)); }

inline grproLib::tagGRPenStyle IGRShapeBox::PenStyle() const
{
    QVariant qax_result = property("PenStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPenStyle*)qax_result.constData();
}
inline void IGRShapeBox::SetPenStyle(grproLib::tagGRPenStyle value){ setProperty("PenStyle", QVariant(value)); }

inline double IGRShapeBox::PenWidth() const
{
    QVariant qax_result = property("PenWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRShapeBox::SetPenWidth(double value){ setProperty("PenWidth", QVariant(value)); }

inline grproLib::tagGRPrintType IGRShapeBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRShapeBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline grproLib::tagGRShapeBoxType IGRShapeBox::ShapeType() const
{
    QVariant qax_result = property("ShapeType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRShapeBoxType*)qax_result.constData();
}
inline void IGRShapeBox::SetShapeType(grproLib::tagGRShapeBoxType value){ setProperty("ShapeType", QVariant(value)); }

inline QString IGRShapeBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRShapeBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline double IGRShapeBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRShapeBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRShapeBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRShapeBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRShapeBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRShapeBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int IGRShapeBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRShapeBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRShapeBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRShapeBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRShapeBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRShapeBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRShapeBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRShapeBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRShapeBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IGRShapeBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRShapeBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGRShapeBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}


inline QString IGRSystemVarBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRSystemVarBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRSystemVarBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRSystemVarBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRSystemVarBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRSystemVarBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRSystemVarBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRSystemVarBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRSystemVarBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRSystemVarBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRSystemVarBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRSystemVarBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRSystemVarBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRSystemVarBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRSystemVarBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRSystemVarBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRSystemVarBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRSystemVarBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRSystemVarBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRSystemVarBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSystemVarBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRSystemVarBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRSystemVarBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRSystemVarBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSystemVarBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRSystemVarBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRSystemVarBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRSystemVarBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSystemVarBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRSystemVarBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRSystemVarBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRSystemVarBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRSystemVarBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRSystemVarBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRSystemVarBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRSystemVarBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRSystemVarBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRSystemVarBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRSystemVarBox::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRSystemVarBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRSystemVarBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline bool IGRSystemVarBox::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRSystemVarBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRSystemVarBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSystemVarBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline QString IGRSystemVarBox::Format() const
{
    QVariant qax_result = property("Format");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetFormat(const QString& value){ setProperty("Format", QVariant(value)); }

inline QString IGRSystemVarBox::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline double IGRSystemVarBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSystemVarBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRSystemVarBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRSystemVarBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRSystemVarBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSystemVarBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRSystemVarBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRSystemVarBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRSystemVarBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRSystemVarBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRSystemVarBox::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRSystemVarBox::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRSystemVarBox::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline grproLib::tagGRSystemVar IGRSystemVarBox::SystemVar() const
{
    QVariant qax_result = property("SystemVar");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSystemVar*)qax_result.constData();
}
inline void IGRSystemVarBox::SetSystemVar(grproLib::tagGRSystemVar value){ setProperty("SystemVar", QVariant(value)); }

inline QString IGRSystemVarBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSystemVarBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRSystemVarBox::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRSystemVarBox::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline double IGRSystemVarBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSystemVarBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRSystemVarBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRSystemVarBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSystemVarBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline bool IGRSystemVarBox::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSystemVarBox::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRSystemVarBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRSystemVarBox::_ExportXlsFormat() const
{
    QVariant qax_result = property("_ExportXlsFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IGRSystemVarBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRSystemVarBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRSystemVarBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRSystemVarBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRSystemVarBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRSystemVarBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRSystemVarBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRSystemVarBox::_CalcFullViewWidth(int& NewWidth)
{
    void *_a[] = {0, (void*)&NewWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRSystemVarBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IGRSystemVarBox::_FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType)
{
    void *_a[] = {0, (void*)&pValue, (void*)&pFormatText, (void*)&pDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRSystemVarBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IGRSystemVarBox::_HasGetDisplayTextScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRSystemVarBox::_HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight)
{
    void *_a[] = {0, (void*)&ContentWidth, (void*)&HopeWidth, (void*)&HopeHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRSystemVarBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IGRSystemVarBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}


inline QString IGRFieldBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRFieldBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRFieldBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRFieldBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRFieldBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRFieldBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRFieldBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRFieldBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRFieldBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRFieldBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRFieldBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRFieldBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRFieldBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRFieldBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRFieldBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRFieldBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRFieldBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRFieldBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRFieldBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRFieldBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRFieldBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRFieldBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRFieldBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRFieldBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRFieldBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRFieldBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRFieldBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRFieldBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRFieldBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRFieldBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRFieldBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRFieldBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRFieldBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRFieldBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRFieldBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRFieldBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRFieldBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRFieldBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRFieldBox::DataField() const
{
    QVariant qax_result = property("DataField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetDataField(const QString& value){ setProperty("DataField", QVariant(value)); }

inline QString IGRFieldBox::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRFieldBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRFieldBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline bool IGRFieldBox::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRFieldBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRFieldBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRFieldBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline QString IGRFieldBox::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline double IGRFieldBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRFieldBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRFieldBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRFieldBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRFieldBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRFieldBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRFieldBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRFieldBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRFieldBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRFieldBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRFieldBox::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRFieldBox::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRFieldBox::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline QString IGRFieldBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRFieldBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRFieldBox::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRFieldBox::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline double IGRFieldBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRFieldBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRFieldBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRFieldBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRFieldBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline bool IGRFieldBox::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRFieldBox::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRFieldBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRFieldBox::_ExportXlsFormat() const
{
    QVariant qax_result = property("_ExportXlsFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IGRFieldBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRFieldBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRFieldBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRFieldBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRFieldBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRFieldBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRFieldBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRFieldBox::_CalcFullViewWidth(int& NewWidth)
{
    void *_a[] = {0, (void*)&NewWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGRFieldBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRFieldBox::_FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType)
{
    void *_a[] = {0, (void*)&pValue, (void*)&pFormatText, (void*)&pDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IGRFieldBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRFieldBox::_HasGetDisplayTextScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IGRFieldBox::_HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight)
{
    void *_a[] = {0, (void*)&ContentWidth, (void*)&HopeWidth, (void*)&HopeHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRFieldBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRFieldBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}


inline QString IGRSummaryBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRSummaryBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRSummaryBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRSummaryBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRSummaryBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRSummaryBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRSummaryBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRSummaryBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRSummaryBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRSummaryBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRSummaryBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRSummaryBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRSummaryBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRSummaryBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRSummaryBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRSummaryBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRSummaryBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRSummaryBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRSummaryBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRSummaryBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSummaryBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRSummaryBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRSummaryBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRSummaryBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSummaryBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRSummaryBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRSummaryBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRSummaryBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSummaryBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRSummaryBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRSummaryBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRSummaryBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRSummaryBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline QString IGRSummaryBox::ConditionScript() const
{
    QVariant qax_result = property("ConditionScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetConditionScript(const QString& value){ setProperty("ConditionScript", QVariant(value)); }

inline grproLib::tagGRControlType IGRSummaryBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRSummaryBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRSummaryBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRSummaryBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRSummaryBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRSummaryBox::DataField() const
{
    QVariant qax_result = property("DataField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetDataField(const QString& value){ setProperty("DataField", QVariant(value)); }

inline QString IGRSummaryBox::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRSummaryBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRSummaryBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline bool IGRSummaryBox::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRSummaryBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRSummaryBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSummaryBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline QString IGRSummaryBox::Format() const
{
    QVariant qax_result = property("Format");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetFormat(const QString& value){ setProperty("Format", QVariant(value)); }

inline QString IGRSummaryBox::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline double IGRSummaryBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSummaryBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRSummaryBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRSummaryBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRSummaryBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSummaryBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRSummaryBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRSummaryBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRSummaryBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRSummaryBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline int IGRSummaryBox::RankNo() const
{
    QVariant qax_result = property("RankNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRSummaryBox::SetRankNo(int value){ setProperty("RankNo", QVariant(value)); }

inline bool IGRSummaryBox::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRSummaryBox::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRSummaryBox::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline grproLib::tagGRSummaryFun IGRSummaryBox::SummaryFun() const
{
    QVariant qax_result = property("SummaryFun");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSummaryFun*)qax_result.constData();
}
inline void IGRSummaryBox::SetSummaryFun(grproLib::tagGRSummaryFun value){ setProperty("SummaryFun", QVariant(value)); }

inline QString IGRSummaryBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSummaryBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRSummaryBox::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRSummaryBox::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline double IGRSummaryBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSummaryBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline double IGRSummaryBox::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSummaryBox::SetValue(double value){ setProperty("Value", QVariant(value)); }

inline bool IGRSummaryBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRSummaryBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSummaryBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline bool IGRSummaryBox::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSummaryBox::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRSummaryBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRSummaryBox::_ExportXlsFormat() const
{
    QVariant qax_result = property("_ExportXlsFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IGRSummaryBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRSummaryBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRSummaryBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRSummaryBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRSummaryBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRSummaryBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRSummaryBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRSummaryBox::_CalcFullViewWidth(int& NewWidth)
{
    void *_a[] = {0, (void*)&NewWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRSummaryBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRSummaryBox::_FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType)
{
    void *_a[] = {0, (void*)&pValue, (void*)&pFormatText, (void*)&pDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IGRSummaryBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void IGRSummaryBox::_HasGetDisplayTextScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void IGRSummaryBox::_HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight)
{
    void *_a[] = {0, (void*)&ContentWidth, (void*)&HopeWidth, (void*)&HopeHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IGRSummaryBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IGRSummaryBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}


inline QString IGRPictureBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRPictureBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRPictureBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRPictureBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRPictureAlignment IGRPictureBox::Alignment() const
{
    QVariant qax_result = property("Alignment");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPictureAlignment*)qax_result.constData();
}
inline void IGRPictureBox::SetAlignment(grproLib::tagGRPictureAlignment value){ setProperty("Alignment", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRPictureBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRPictureBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRPictureBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRPictureBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRPictureBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRPictureBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRPictureBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRPictureBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRPictureBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRPictureBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRPictureBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRPictureBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRPictureBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRPictureBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRPictureBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRPictureBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRPictureBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRPictureBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRPictureBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRPictureBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRPictureBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRPictureBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRPictureBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRPictureBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPictureBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRPictureBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRPictureBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRPictureBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRPictureBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRPictureBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRPictureBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPictureBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRPictureBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRPictureBox::DataField() const
{
    QVariant qax_result = property("DataField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetDataField(const QString& value){ setProperty("DataField", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRPictureBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRPictureBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline grproLib::IGRFont* IGRPictureBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRPictureBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRPictureBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRPictureBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPictureBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRPictureBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPictureBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRPictureBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline QString IGRPictureBox::ImageFile() const
{
    QVariant qax_result = property("ImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetImageFile(const QString& value){ setProperty("ImageFile", QVariant(value)); }

inline int IGRPictureBox::ImageIndex() const
{
    QVariant qax_result = property("ImageIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPictureBox::SetImageIndex(int value){ setProperty("ImageIndex", QVariant(value)); }

inline double IGRPictureBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPictureBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRPictureBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRPictureBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline stdole::IPicture* IGRPictureBox::Picture() const
{
#ifdef QAX_DUMPCPP_STDOLE_H
    stdole::IPicture* qax_pointer = 0;
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_pointer);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_pointer);
    QVariant qax_result = property("Picture");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(stdole::IPicture**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void IGRPictureBox::SetPicture(stdole::IPicture* value){
//    int typeId = qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &value);
//    setProperty("Picture", QVariant(typeId, &value));
}

inline grproLib::tagGRPrintType IGRPictureBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRPictureBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline double IGRPictureBox::RotateAngle() const
{
    QVariant qax_result = property("RotateAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPictureBox::SetRotateAngle(double value){ setProperty("RotateAngle", QVariant(value)); }

inline grproLib::tagGRPictureSizeMode IGRPictureBox::SizeMode() const
{
    QVariant qax_result = property("SizeMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPictureSizeMode*)qax_result.constData();
}
inline void IGRPictureBox::SetSizeMode(grproLib::tagGRPictureSizeMode value){ setProperty("SizeMode", QVariant(value)); }

inline QString IGRPictureBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPictureBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline double IGRPictureBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPictureBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRPictureBox::Transparent() const
{
    QVariant qax_result = property("Transparent");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPictureBox::SetTransparent(bool value){ setProperty("Transparent", QVariant(value)); }

inline bool IGRPictureBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPictureBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRPictureBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPictureBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int IGRPictureBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline grproLib::IGRPicture* IGRPictureBox::_GRPicture() const
{
    grproLib::IGRPicture* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_pointer);
    QVariant qax_result = property("_GRPicture");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPicture**)qax_result.constData();
}
inline void IGRPictureBox::set_GRPicture(grproLib::IGRPicture* value){
    int typeId = qRegisterMetaType<grproLib::IGRPicture*>("grproLib::IGRPicture*", &value);
    setProperty("_GRPicture", QVariant(typeId, &value));
}

inline QColor IGRPictureBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRPictureBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRPictureBox::AttachSystemImage(grproLib::tagGRSystemImage SystemImage)
{
    void *_a[] = {0, (void*)&SystemImage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRPictureBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRPictureBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRPictureBox::LoadBmpPicture(stdole::IPicture* newVal)
{
    void *_a[] = {0, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRPictureBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRPictureBox::LoadFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRPictureBox::LoadFromMemory(uint& pBuffer, int BytesCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IGRPictureBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IGRPictureBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IGRPictureBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRPictureBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IGRPictureBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRPictureBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline stdole::IPicture* IGRPictureBox::_RuntimePicture(bool& pIsBmp)
{
    stdole::IPicture* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_result);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_result);
#endif
    void *_a[] = {(void*)&qax_result, (void*)&pIsBmp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}


inline int IGRPicture::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline stdole::IPicture* IGRPicture::OlePicture() const
{
#ifdef QAX_DUMPCPP_STDOLE_H
    stdole::IPicture* qax_pointer = 0;
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_pointer);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_pointer);
    QVariant qax_result = property("OlePicture");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(stdole::IPicture**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void IGRPicture::SetOlePicture(stdole::IPicture* value){
//    int typeId = qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &value);
//    setProperty("OlePicture", QVariant(typeId, &value));
}

inline int IGRPicture::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRPicture::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IGRPicture::LoadFromMemory(uint& pData, int ByteCount)
{
    void *_a[] = {0, (void*)&pData, (void*)&ByteCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRPicture::Render(int hdc, int Left, int Top, int Width, int Height, grproLib::tagGRPictureAlignment PictureAlignment, grproLib::tagGRPictureSizeMode PictureSizeMode, uint BackColor, bool FillBack, bool Transparent)
{
    void *_a[] = {0, (void*)&hdc, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&PictureAlignment, (void*)&PictureSizeMode, (void*)&BackColor, (void*)&FillBack, (void*)&Transparent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRPicture::SaveToMemory(int*& ppData, int& pBytesCount)
{
    void *_a[] = {0, (void*)&ppData, (void*)&pBytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline QString IGRRichTextBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRRichTextBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRRichTextBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRRichTextBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRRichTextBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRRichTextBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRRichTextBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRRichTextBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRRichTextBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRRichTextBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRRichTextBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRRichTextBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRRichTextBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRRichTextBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRRichTextBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRRichTextBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRRichTextBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRRichTextBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRRichTextBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRRichTextBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRRichTextBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRRichTextBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRRichTextBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRRichTextBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRRichTextBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRRichTextBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRRichTextBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRRichTextBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRRichTextBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRRichTextBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRichTextBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRRichTextBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRichTextBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRRichTextBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRRichTextBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRRichTextBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRRichTextBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRRichTextBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRRichTextBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRichTextBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRRichTextBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRRichTextBox::DataField() const
{
    QVariant qax_result = property("DataField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetDataField(const QString& value){ setProperty("DataField", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRRichTextBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRRichTextBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline grproLib::IGRFont* IGRRichTextBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRRichTextBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRRichTextBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRRichTextBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRRichTextBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRRichTextBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRichTextBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRRichTextBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRRichTextBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRRichTextBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRRichTextBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRRichTextBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRRichTextBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRRichTextBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline QString IGRRichTextBox::RTF() const
{
    QVariant qax_result = property("RTF");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetRTF(const QString& value){ setProperty("RTF", QVariant(value)); }

inline QString IGRRichTextBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRichTextBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline double IGRRichTextBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRRichTextBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRRichTextBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRichTextBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRRichTextBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRRichTextBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int IGRRichTextBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRRichTextBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRRichTextBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRRichTextBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRRichTextBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRRichTextBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRRichTextBox::LoadFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRRichTextBox::LoadFromMemory(uint& pBuffer, int BytesCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRRichTextBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRRichTextBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IGRRichTextBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IGRRichTextBox::_FetchExportText(QString& pExportText)
{
    void *_a[] = {0, (void*)&pExportText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void IGRRichTextBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IGRRichTextBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IGRRichTextBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRRichTextBox::_Prepare()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}


inline QString IGRMemoBox::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRMemoBox::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRMemoBox::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRMemoBox::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRMemoBox::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRMemoBox::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRMemoBox::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRMemoBox::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRMemoBox::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRMemoBox::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRMemoBox::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRMemoBox::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRMemoBox::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRMemoBox::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRMemoBox::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRMemoBox::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRMemoBox::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRMemoBox::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRMemoBox::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRMemoBox::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRMemoBox::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRMemoBox::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRMemoBox::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRMemoBox::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRMemoBox::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRMemoBox::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRMemoBox::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRMemoBox::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRMemoBox::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRMemoBox::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRMemoBox::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRMemoBox::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRMemoBox::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline int IGRMemoBox::CharacterSpacing() const
{
    QVariant qax_result = property("CharacterSpacing");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRMemoBox::SetCharacterSpacing(int value){ setProperty("CharacterSpacing", QVariant(value)); }

inline grproLib::tagGRControlType IGRMemoBox::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRMemoBox::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRMemoBox::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRMemoBox::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRMemoBox::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRMemoBox::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRMemoBox::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRMemoBox::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline bool IGRMemoBox::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline QString IGRMemoBox::FlowTo() const
{
    QVariant qax_result = property("FlowTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetFlowTo(const QString& value){ setProperty("FlowTo", QVariant(value)); }

inline grproLib::IGRFont* IGRMemoBox::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRMemoBox::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRMemoBox::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline QString IGRMemoBox::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline double IGRMemoBox::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRMemoBox::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRMemoBox::HtmlTags() const
{
    QVariant qax_result = property("HtmlTags");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetHtmlTags(bool value){ setProperty("HtmlTags", QVariant(value)); }

inline bool IGRMemoBox::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRMemoBox::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRMemoBox::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRMemoBox::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline int IGRMemoBox::LineSpacing() const
{
    QVariant qax_result = property("LineSpacing");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRMemoBox::SetLineSpacing(int value){ setProperty("LineSpacing", QVariant(value)); }

inline QString IGRMemoBox::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRMemoBox::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRMemoBox::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRMemoBox::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRMemoBox::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRMemoBox::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRMemoBox::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline QString IGRMemoBox::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IGRMemoBox::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRMemoBox::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRMemoBox::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRMemoBox::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline int IGRMemoBox::TextAngle() const
{
    QVariant qax_result = property("TextAngle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRMemoBox::SetTextAngle(int value){ setProperty("TextAngle", QVariant(value)); }

inline grproLib::tagGRTextOrientation IGRMemoBox::TextOrientation() const
{
    QVariant qax_result = property("TextOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextOrientation*)qax_result.constData();
}
inline void IGRMemoBox::SetTextOrientation(grproLib::tagGRTextOrientation value){ setProperty("TextOrientation", QVariant(value)); }

inline double IGRMemoBox::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRMemoBox::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRMemoBox::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRMemoBox::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRMemoBox::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline bool IGRMemoBox::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRMemoBox::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRMemoBox::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRMemoBox::_ExportXlsFormat() const
{
    QVariant qax_result = property("_ExportXlsFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IGRMemoBox::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRMemoBox::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRMemoBox::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRMemoBox::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRMemoBox::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRMemoBox::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRMemoBox::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRMemoBox::_CalcFullViewWidth(int& NewWidth)
{
    void *_a[] = {0, (void*)&NewWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRMemoBox::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IGRMemoBox::_FetchExportData(double& pValue, QString& pFormatText, tagGRFieldType& pDataType)
{
    void *_a[] = {0, (void*)&pValue, (void*)&pFormatText, (void*)&pDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void IGRMemoBox::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void IGRMemoBox::_HasGetDisplayTextScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IGRMemoBox::_HopeSize(int ContentWidth, int& HopeWidth, int& HopeHeight)
{
    void *_a[] = {0, (void*)&ContentWidth, (void*)&HopeWidth, (void*)&HopeHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IGRMemoBox::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void IGRMemoBox::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}


inline QString IGRSubReport::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRSubReport::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRSubReport::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRSubReport::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRSubReport::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRSubReport::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRSubReport::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRSubReport::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRSubReport::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRSubReport::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRSubReport::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRSubReport::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRSubReport::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRSubReport::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRSubReport::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRSubReport::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRSubReport::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRSubReport::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRSubReport::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRSubReport::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSubReport::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRSubReport::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRSubReport::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRSubReport::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSubReport::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRSubReport::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRSubReport::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRSubReport::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSubReport::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRSubReport::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRSubReport::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRSubReport::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRSubReport::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRSubReport::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRSubReport::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRSubReport::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRSubReport::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRSubReport::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRSubReport::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRSubReport::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline grproLib::IGRFont* IGRSubReport::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRSubReport::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRSubReport::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRSubReport::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSubReport::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRSubReport::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRSubReport::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRSubReport::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSubReport::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRSubReport::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRSubReport::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IGRSubReport::ParentPageSettings() const
{
    QVariant qax_result = property("ParentPageSettings");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetParentPageSettings(bool value){ setProperty("ParentPageSettings", QVariant(value)); }

inline grproLib::tagGRPrintType IGRSubReport::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRSubReport::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline grproLib::IGridppReport* IGRSubReport::Report() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}
inline void IGRSubReport::SetReport(grproLib::IGridppReport* value){
    int typeId = qRegisterMetaType<grproLib::IGridppReport*>("grproLib::IGridppReport*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline QString IGRSubReport::ReportFile() const
{
    QVariant qax_result = property("ReportFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetReportFile(const QString& value){ setProperty("ReportFile", QVariant(value)); }

inline bool IGRSubReport::ResetPageNumber() const
{
    QVariant qax_result = property("ResetPageNumber");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetResetPageNumber(bool value){ setProperty("ResetPageNumber", QVariant(value)); }

inline QString IGRSubReport::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSubReport::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRSubReport::ToNewExcelSheet() const
{
    QVariant qax_result = property("ToNewExcelSheet");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetToNewExcelSheet(bool value){ setProperty("ToNewExcelSheet", QVariant(value)); }

inline double IGRSubReport::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSubReport::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRSubReport::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRSubReport::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRSubReport::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSubReport::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int IGRSubReport::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRSubReport::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRSubReport::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRSubReport::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRSubReport::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRSubReport::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRSubReport::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRSubReport::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRSubReport::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void IGRSubReport::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IGRSubReport::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IGRSubReport::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRSubReport::_ResetSaveFlag()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}


inline bool IGridppReport::AlignToGrid() const
{
    QVariant qax_result = property("AlignToGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetAlignToGrid(bool value){ setProperty("AlignToGrid", QVariant(value)); }

inline QColor IGridppReport::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGridppReport::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline stdole::IPicture* IGridppReport::BackImage() const
{
#ifdef QAX_DUMPCPP_STDOLE_H
    stdole::IPicture* qax_pointer = 0;
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_pointer);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_pointer);
    QVariant qax_result = property("BackImage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(stdole::IPicture**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void IGridppReport::SetBackImage(stdole::IPicture* value){
//    int typeId = qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &value);
//    setProperty("BackImage", QVariant(typeId, &value));
}

inline QString IGridppReport::BackImageFile() const
{
    QVariant qax_result = property("BackImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetBackImageFile(const QString& value){ setProperty("BackImageFile", QVariant(value)); }

inline bool IGridppReport::BackImagePreview() const
{
    QVariant qax_result = property("BackImagePreview");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetBackImagePreview(bool value){ setProperty("BackImagePreview", QVariant(value)); }

inline bool IGridppReport::BackImagePrint() const
{
    QVariant qax_result = property("BackImagePrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetBackImagePrint(bool value){ setProperty("BackImagePrint", QVariant(value)); }

inline QString IGridppReport::BeforeSortScript() const
{
    QVariant qax_result = property("BeforeSortScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetBeforeSortScript(const QString& value){ setProperty("BeforeSortScript", QVariant(value)); }

inline QString IGridppReport::ConnectionString() const
{
    QVariant qax_result = property("ConnectionString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetConnectionString(const QString& value){ setProperty("ConnectionString", QVariant(value)); }

inline bool IGridppReport::ContinuePrint() const
{
    QVariant qax_result = property("ContinuePrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetContinuePrint(bool value){ setProperty("ContinuePrint", QVariant(value)); }

inline double IGridppReport::DesignBottomMargin() const
{
    QVariant qax_result = property("DesignBottomMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetDesignBottomMargin(double value){ setProperty("DesignBottomMargin", QVariant(value)); }

inline double IGridppReport::DesignLeftMargin() const
{
    QVariant qax_result = property("DesignLeftMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetDesignLeftMargin(double value){ setProperty("DesignLeftMargin", QVariant(value)); }

inline grproLib::tagGRPaperKind IGridppReport::DesignPaperKind() const
{
    QVariant qax_result = property("DesignPaperKind");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperKind*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperKind(grproLib::tagGRPaperKind value){ setProperty("DesignPaperKind", QVariant(value)); }

inline double IGridppReport::DesignPaperLength() const
{
    QVariant qax_result = property("DesignPaperLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperLength(double value){ setProperty("DesignPaperLength", QVariant(value)); }

inline QString IGridppReport::DesignPaperName() const
{
    QVariant qax_result = property("DesignPaperName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperName(const QString& value){ setProperty("DesignPaperName", QVariant(value)); }

inline grproLib::tagGRPaperOrientation IGridppReport::DesignPaperOrientation() const
{
    QVariant qax_result = property("DesignPaperOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperOrientation*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperOrientation(grproLib::tagGRPaperOrientation value){ setProperty("DesignPaperOrientation", QVariant(value)); }

inline int IGridppReport::DesignPaperSize() const
{
    QVariant qax_result = property("DesignPaperSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperSize(int value){ setProperty("DesignPaperSize", QVariant(value)); }

inline grproLib::tagGRPaperSourceKind IGridppReport::DesignPaperSource() const
{
    QVariant qax_result = property("DesignPaperSource");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperSourceKind*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperSource(grproLib::tagGRPaperSourceKind value){ setProperty("DesignPaperSource", QVariant(value)); }

inline double IGridppReport::DesignPaperWidth() const
{
    QVariant qax_result = property("DesignPaperWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetDesignPaperWidth(double value){ setProperty("DesignPaperWidth", QVariant(value)); }

inline grproLib::tagGRCollateKind IGridppReport::DesignPrintCollate() const
{
    QVariant qax_result = property("DesignPrintCollate");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCollateKind*)qax_result.constData();
}
inline void IGridppReport::SetDesignPrintCollate(grproLib::tagGRCollateKind value){ setProperty("DesignPrintCollate", QVariant(value)); }

inline grproLib::tagGRDuplexKind IGridppReport::DesignPrintDuplex() const
{
    QVariant qax_result = property("DesignPrintDuplex");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDuplexKind*)qax_result.constData();
}
inline void IGridppReport::SetDesignPrintDuplex(grproLib::tagGRDuplexKind value){ setProperty("DesignPrintDuplex", QVariant(value)); }

inline double IGridppReport::DesignRightMargin() const
{
    QVariant qax_result = property("DesignRightMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetDesignRightMargin(double value){ setProperty("DesignRightMargin", QVariant(value)); }

inline double IGridppReport::DesignTopMargin() const
{
    QVariant qax_result = property("DesignTopMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetDesignTopMargin(double value){ setProperty("DesignTopMargin", QVariant(value)); }

inline grproLib::IGRDetailGrid* IGridppReport::DetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("DetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::tagGRReportDisplayMode IGridppReport::DisplayMode() const
{
    QVariant qax_result = property("DisplayMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRReportDisplayMode*)qax_result.constData();
}

inline QString IGridppReport::ExportBeginScript() const
{
    QVariant qax_result = property("ExportBeginScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetExportBeginScript(const QString& value){ setProperty("ExportBeginScript", QVariant(value)); }

inline bool IGridppReport::FirstPass() const
{
    QVariant qax_result = property("FirstPass");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline grproLib::IGRControls* IGridppReport::FloatControls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("FloatControls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGridppReport::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline grproLib::IGRGraphics* IGridppReport::Graphics() const
{
    grproLib::IGRGraphics* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGraphics*>("IGRGraphics*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGraphics>("IGRGraphics", qax_pointer);
    QVariant qax_result = property("Graphics");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGraphics**)qax_result.constData();
}

inline int IGridppReport::GridColsPerUnit() const
{
    QVariant qax_result = property("GridColsPerUnit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetGridColsPerUnit(int value){ setProperty("GridColsPerUnit", QVariant(value)); }

inline int IGridppReport::GridRowsPerUnit() const
{
    QVariant qax_result = property("GridRowsPerUnit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetGridRowsPerUnit(int value){ setProperty("GridRowsPerUnit", QVariant(value)); }

inline bool IGridppReport::HasFloatControl() const
{
    QVariant qax_result = property("HasFloatControl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline grproLib::IGRImageList* IGridppReport::ImageList() const
{
    grproLib::IGRImageList* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRImageList*>("IGRImageList*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRImageList>("IGRImageList", qax_pointer);
    QVariant qax_result = property("ImageList");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRImageList**)qax_result.constData();
}

inline QString IGridppReport::InitializeScript() const
{
    QVariant qax_result = property("InitializeScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetInitializeScript(const QString& value){ setProperty("InitializeScript", QVariant(value)); }

inline bool IGridppReport::IsBlank() const
{
    QVariant qax_result = property("IsBlank");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IGridppReport::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetLanguage(int value){ setProperty("Language", QVariant(value)); }

inline int IGridppReport::MaxGenPages() const
{
    QVariant qax_result = property("MaxGenPages");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetMaxGenPages(int value){ setProperty("MaxGenPages", QVariant(value)); }

inline bool IGridppReport::MirrorMargins() const
{
    QVariant qax_result = property("MirrorMargins");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetMirrorMargins(bool value){ setProperty("MirrorMargins", QVariant(value)); }

inline bool IGridppReport::MonoPrint() const
{
    QVariant qax_result = property("MonoPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetMonoPrint(bool value){ setProperty("MonoPrint", QVariant(value)); }

inline double IGridppReport::PageBlankHeight() const
{
    QVariant qax_result = property("PageBlankHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int IGridppReport::PageDivideCount() const
{
    QVariant qax_result = property("PageDivideCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetPageDivideCount(int value){ setProperty("PageDivideCount", QVariant(value)); }

inline bool IGridppReport::PageDivideLine() const
{
    QVariant qax_result = property("PageDivideLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetPageDivideLine(bool value){ setProperty("PageDivideLine", QVariant(value)); }

inline double IGridppReport::PageDivideSpacing() const
{
    QVariant qax_result = property("PageDivideSpacing");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetPageDivideSpacing(double value){ setProperty("PageDivideSpacing", QVariant(value)); }

inline QString IGridppReport::PageEndScript() const
{
    QVariant qax_result = property("PageEndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetPageEndScript(const QString& value){ setProperty("PageEndScript", QVariant(value)); }

inline grproLib::IGRPageFooter* IGridppReport::PageFooter() const
{
    grproLib::IGRPageFooter* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPageFooter*>("IGRPageFooter*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPageFooter>("IGRPageFooter", qax_pointer);
    QVariant qax_result = property("PageFooter");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPageFooter**)qax_result.constData();
}

inline grproLib::IGRPageHeader* IGridppReport::PageHeader() const
{
    grproLib::IGRPageHeader* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPageHeader*>("IGRPageHeader*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPageHeader>("IGRPageHeader", qax_pointer);
    QVariant qax_result = property("PageHeader");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPageHeader**)qax_result.constData();
}

inline QString IGridppReport::PageStartScript() const
{
    QVariant qax_result = property("PageStartScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetPageStartScript(const QString& value){ setProperty("PageStartScript", QVariant(value)); }

inline grproLib::IGRParameters* IGridppReport::Parameters() const
{
    grproLib::IGRParameters* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRParameters*>("IGRParameters*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRParameters>("IGRParameters", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRParameters**)qax_result.constData();
}

inline grproLib::IGridppReport* IGridppReport::ParentReport() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("ParentReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}

inline bool IGridppReport::PrintAsDesignPaper() const
{
    QVariant qax_result = property("PrintAsDesignPaper");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetPrintAsDesignPaper(bool value){ setProperty("PrintAsDesignPaper", QVariant(value)); }

inline bool IGridppReport::PrintToStretch() const
{
    QVariant qax_result = property("PrintToStretch");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetPrintToStretch(bool value){ setProperty("PrintToStretch", QVariant(value)); }

inline grproLib::IGRPrinter* IGridppReport::Printer() const
{
    grproLib::IGRPrinter* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPrinter*>("IGRPrinter*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPrinter>("IGRPrinter", qax_pointer);
    QVariant qax_result = property("Printer");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPrinter**)qax_result.constData();
}

inline QString IGridppReport::ProcessBeginScript() const
{
    QVariant qax_result = property("ProcessBeginScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetProcessBeginScript(const QString& value){ setProperty("ProcessBeginScript", QVariant(value)); }

inline QString IGridppReport::ProcessEndScript() const
{
    QVariant qax_result = property("ProcessEndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetProcessEndScript(const QString& value){ setProperty("ProcessEndScript", QVariant(value)); }

inline QString IGridppReport::QuerySQL() const
{
    QVariant qax_result = property("QuerySQL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetQuerySQL(const QString& value){ setProperty("QuerySQL", QVariant(value)); }

inline int IGridppReport::ReportFooterCount() const
{
    QVariant qax_result = property("ReportFooterCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGridppReport::ReportHeaderCount() const
{
    QVariant qax_result = property("ReportHeaderCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IGridppReport::Running() const
{
    QVariant qax_result = property("Running");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline grproLib::IGRDetailGrid* IGridppReport::RunningDetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("RunningDetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::tagGRScriptType IGridppReport::ScriptType() const
{
    QVariant qax_result = property("ScriptType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRScriptType*)qax_result.constData();
}
inline void IGridppReport::SetScriptType(grproLib::tagGRScriptType value){ setProperty("ScriptType", QVariant(value)); }

inline grproLib::IGRSections* IGridppReport::Sections() const
{
    grproLib::IGRSections* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSections*>("IGRSections*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSections>("IGRSections", qax_pointer);
    QVariant qax_result = property("Sections");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSections**)qax_result.constData();
}

inline grproLib::IGRSharePrintSetupObject* IGridppReport::SharePrintSetupObject() const
{
    grproLib::IGRSharePrintSetupObject* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSharePrintSetupObject*>("IGRSharePrintSetupObject*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSharePrintSetupObject>("IGRSharePrintSetupObject", qax_pointer);
    QVariant qax_result = property("SharePrintSetupObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSharePrintSetupObject**)qax_result.constData();
}

inline int IGridppReport::SharePrintSetupOptions() const
{
    QVariant qax_result = property("SharePrintSetupOptions");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetSharePrintSetupOptions(int value){ setProperty("SharePrintSetupOptions", QVariant(value)); }

inline bool IGridppReport::ShowGrid() const
{
    QVariant qax_result = property("ShowGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetShowGrid(bool value){ setProperty("ShowGrid", QVariant(value)); }

inline int IGridppReport::ShowMoneyDigit() const
{
    QVariant qax_result = property("ShowMoneyDigit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGridppReport::SetShowMoneyDigit(int value){ setProperty("ShowMoneyDigit", QVariant(value)); }

inline QColor IGridppReport::ShowMoneyLineColor() const
{
    QVariant qax_result = property("ShowMoneyLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGridppReport::SetShowMoneyLineColor(const QColor& value){ setProperty("ShowMoneyLineColor", QVariant(value)); }

inline QColor IGridppReport::ShowMoneySepLineColor() const
{
    QVariant qax_result = property("ShowMoneySepLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGridppReport::SetShowMoneySepLineColor(const QColor& value){ setProperty("ShowMoneySepLineColor", QVariant(value)); }

inline double IGridppReport::ShowMoneyWidth() const
{
    QVariant qax_result = property("ShowMoneyWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGridppReport::SetShowMoneyWidth(double value){ setProperty("ShowMoneyWidth", QVariant(value)); }

inline QString IGridppReport::ShowPreviewWndScript() const
{
    QVariant qax_result = property("ShowPreviewWndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetShowPreviewWndScript(const QString& value){ setProperty("ShowPreviewWndScript", QVariant(value)); }

inline bool IGridppReport::ShowProgressUI() const
{
    QVariant qax_result = property("ShowProgressUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetShowProgressUI(bool value){ setProperty("ShowProgressUI", QVariant(value)); }

inline bool IGridppReport::SkipQuery() const
{
    QVariant qax_result = property("SkipQuery");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetSkipQuery(bool value){ setProperty("SkipQuery", QVariant(value)); }

inline grproLib::tagGRStorageFormat IGridppReport::StorageFormat() const
{
    QVariant qax_result = property("StorageFormat");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRStorageFormat*)qax_result.constData();
}
inline void IGridppReport::SetStorageFormat(grproLib::tagGRStorageFormat value){ setProperty("StorageFormat", QVariant(value)); }

inline bool IGridppReport::SummaryAccept() const
{
    QVariant qax_result = property("SummaryAccept");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGridppReport::SetSummaryAccept(bool value){ setProperty("SummaryAccept", QVariant(value)); }

inline QString IGridppReport::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextEncodeMode IGridppReport::TextEncode() const
{
    QVariant qax_result = property("TextEncode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextEncodeMode*)qax_result.constData();
}
inline void IGridppReport::SetTextEncode(grproLib::tagGRTextEncodeMode value){ setProperty("TextEncode", QVariant(value)); }

inline QString IGridppReport::Title() const
{
    QVariant qax_result = property("Title");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGridppReport::SetTitle(const QString& value){ setProperty("Title", QVariant(value)); }

inline grproLib::tagGRUnit IGridppReport::Unit() const
{
    QVariant qax_result = property("Unit");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRUnit*)qax_result.constData();
}
inline void IGridppReport::SetUnit(grproLib::tagGRUnit value){ setProperty("Unit", QVariant(value)); }

inline QString IGridppReport::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline stdole::IPicture* IGridppReport::Watermark() const
{
#ifdef QAX_DUMPCPP_STDOLE_H
    stdole::IPicture* qax_pointer = 0;
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_pointer);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_pointer);
    QVariant qax_result = property("Watermark");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(stdole::IPicture**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void IGridppReport::SetWatermark(stdole::IPicture* value){
//    int typeId = qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &value);
//    setProperty("Watermark", QVariant(typeId, &value));
}

inline grproLib::tagGRPictureAlignment IGridppReport::WatermarkAlignment() const
{
    QVariant qax_result = property("WatermarkAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPictureAlignment*)qax_result.constData();
}
inline void IGridppReport::SetWatermarkAlignment(grproLib::tagGRPictureAlignment value){ setProperty("WatermarkAlignment", QVariant(value)); }

inline grproLib::tagGRPictureSizeMode IGridppReport::WatermarkSizeMode() const
{
    QVariant qax_result = property("WatermarkSizeMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPictureSizeMode*)qax_result.constData();
}
inline void IGridppReport::SetWatermarkSizeMode(grproLib::tagGRPictureSizeMode value){ setProperty("WatermarkSizeMode", QVariant(value)); }

inline grproLib::IGRPicture* IGridppReport::_GRBackImage() const
{
    grproLib::IGRPicture* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_pointer);
    QVariant qax_result = property("_GRBackImage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPicture**)qax_result.constData();
}
inline void IGridppReport::set_GRBackImage(grproLib::IGRPicture* value){
    int typeId = qRegisterMetaType<grproLib::IGRPicture*>("grproLib::IGRPicture*", &value);
    setProperty("_GRBackImage", QVariant(typeId, &value));
}

inline grproLib::IGRPicture* IGridppReport::_GRWatermark() const
{
    grproLib::IGRPicture* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_pointer);
    QVariant qax_result = property("_GRWatermark");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPicture**)qax_result.constData();
}
inline void IGridppReport::set_GRWatermark(grproLib::IGRPicture* value){
    int typeId = qRegisterMetaType<grproLib::IGRPicture*>("grproLib::IGRPicture*", &value);
    setProperty("_GRWatermark", QVariant(typeId, &value));
}

inline int IGridppReport::_ResHinst() const
{
    QVariant qax_result = property("_ResHinst");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IGridppReport::AbortPrint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGridppReport::About()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline grproLib::IGRParameter* IGridppReport::AddParameter(const QString& Name, grproLib::tagGRParameterDataType DataType)
{
    grproLib::IGRParameter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRParameter*>("IGRParameter*", &qax_result);
    qRegisterMetaType<grproLib::IGRParameter>("IGRParameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&DataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGridppReport::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline bool IGridppReport::BeginLoopPrint(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&GenerateStyle, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IGridppReport::CalcTextOut(double Width, double Height, const QString& Text, grproLib::IGRFont* Font, bool WordWrap)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Width, (void*)&Height, (void*)&Text, (void*)&Font, (void*)&WordWrap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IGridppReport::CancelRecordset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGridppReport::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline grproLib::IGRColumn* IGridppReport::ColumnByName(const QString& Name)
{
    grproLib::IGRColumn* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline grproLib::IGRControl* IGridppReport::ControlByName(const QString& Name)
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline grproLib::IGRObject* IGridppReport::CreateBatchReport()
{
    grproLib::IGRObject* qax_result = 0;
    qRegisterMetaType<grproLib::IGRObject*>("IGRObject*", &qax_result);
    qRegisterMetaType<grproLib::IGRObject>("IGRObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void IGridppReport::DeleteDetailGrid()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGridppReport::DeletePageFooter()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IGridppReport::DeletePageHeader()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGridppReport::DeleteReportFooter(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGridppReport::DeleteReportHeader(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IGridppReport::EndLoopPrint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline bool IGridppReport::Export(bool DoneOpen)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DoneOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IGridppReport::ExportDirect(grproLib::tagGRExportType ExportType, const QString& FileName, bool ShowOptionDlg, bool DoneOpen)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ExportType, (void*)&FileName, (void*)&ShowOptionDlg, (void*)&DoneOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString IGridppReport::ExtractXMLFromURL(const QString& URL)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline grproLib::IGRField* IGridppReport::FieldByDBName(const QString& Name)
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline grproLib::IGRField* IGridppReport::FieldByName(const QString& Name)
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline grproLib::IGRControl* IGridppReport::FindFirstControl()
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline grproLib::IGRControl* IGridppReport::FindNextControl()
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IGridppReport::ForceNewPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IGridppReport::GenerateDocumentFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IGridppReport::GetSkin(uint& BackColorRed, uint& BackColorGreen, uint& BackColorBlue, int& Style)
{
    void *_a[] = {0, (void*)&BackColorRed, (void*)&BackColorGreen, (void*)&BackColorBlue, (void*)&Style};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline grproLib::IGRDetailGrid* IGridppReport::InsertDetailGrid()
{
    grproLib::IGRDetailGrid* qax_result = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_result);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline grproLib::IGRPageFooter* IGridppReport::InsertPageFooter()
{
    grproLib::IGRPageFooter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPageFooter*>("IGRPageFooter*", &qax_result);
    qRegisterMetaType<grproLib::IGRPageFooter>("IGRPageFooter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline grproLib::IGRPageHeader* IGridppReport::InsertPageHeader()
{
    grproLib::IGRPageHeader* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPageHeader*>("IGRPageHeader*", &qax_result);
    qRegisterMetaType<grproLib::IGRPageHeader>("IGRPageHeader", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline grproLib::IGRReportFooter* IGridppReport::InsertReportFooter()
{
    grproLib::IGRReportFooter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportFooter*>("IGRReportFooter*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportFooter>("IGRReportFooter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline grproLib::IGRReportHeader* IGridppReport::InsertReportHeader()
{
    grproLib::IGRReportHeader* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportHeader*>("IGRReportHeader*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportHeader>("IGRReportHeader", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void IGridppReport::LoadBackImageFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void IGridppReport::LoadBackImageFromMemory(uint& pBuffer, int BytesCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline bool IGridppReport::LoadDataFromURL(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IGridppReport::LoadDataFromXML(const QString& XMLData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IGridppReport::LoadFromFile(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool IGridppReport::LoadFromMemory(uint& pData, int ByteCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pData, (void*)&ByteCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool IGridppReport::LoadFromStr(const QString& Data)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool IGridppReport::LoadFromURL(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IGridppReport::LoadFromVariant(const QVariant& Buf)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Buf};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline void IGridppReport::LoadWatermarkFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGridppReport::LoadWatermarkFromMemory(uint& pBuffer, int BytesCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGridppReport::LoopPrint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline grproLib::IGRParameter* IGridppReport::ParameterByName(const QString& Name)
{
    grproLib::IGRParameter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRParameter*>("IGRParameter*", &qax_result);
    qRegisterMetaType<grproLib::IGRParameter>("IGRParameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline double IGridppReport::PixelsToUnit(int Pixels)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Pixels};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline grproLib::IGRExportOption* IGridppReport::PrepareExport(grproLib::tagGRExportType ExportType)
{
    grproLib::IGRExportOption* qax_result = 0;
    qRegisterMetaType<grproLib::IGRExportOption*>("IGRExportOption*", &qax_result);
    qRegisterMetaType<grproLib::IGRExportOption>("IGRExportOption", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ExportType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline bool IGridppReport::PrepareRecordset()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void IGridppReport::Print(bool ShowPrintDialog)
{
    void *_a[] = {0, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGridppReport::PrintEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog)
{
    void *_a[] = {0, (void*)&GenerateStyle, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IGridppReport::PrintPreview(bool ShowModal)
{
    void *_a[] = {0, (void*)&ShowModal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void IGridppReport::PrintPreviewEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowModal, bool MaximizeWindow)
{
    void *_a[] = {0, (void*)&GenerateStyle, (void*)&ShowModal, (void*)&MaximizeWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline bool IGridppReport::Register(const QString& SerialNo)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SerialNo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline grproLib::IGRReportFooter* IGridppReport::ReportFooter(const QVariant& Index)
{
    grproLib::IGRReportFooter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportFooter*>("IGRReportFooter*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportFooter>("IGRReportFooter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline grproLib::IGRReportHeader* IGridppReport::ReportHeader(const QVariant& Index)
{
    grproLib::IGRReportHeader* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportHeader*>("IGRReportHeader*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportHeader>("IGRReportHeader", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline bool IGridppReport::SaveToFile(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool IGridppReport::SaveToMemory(int*& ppData, int& pBytesCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ppData, (void*)&pBytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline QString IGridppReport::SaveToStr()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool IGridppReport::SaveToURL(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline QVariant IGridppReport::SaveToVariant()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline void IGridppReport::SetSkin(uint BackColorRed, uint BackColorGreen, uint BackColorBlue, int Style)
{
    void *_a[] = {0, (void*)&BackColorRed, (void*)&BackColorGreen, (void*)&BackColorBlue, (void*)&Style};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
}

inline void IGridppReport::SharePrintSetupDisableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
}

inline void IGridppReport::SharePrintSetupEnableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline bool IGridppReport::SharePrintSetupGetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
    return qax_result;
}

inline void IGridppReport::SharePrintSetupSetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option, bool Enabled)
{
    void *_a[] = {0, (void*)&Option, (void*)&Enabled};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline int IGridppReport::SystemVarValue(grproLib::tagGRSystemVar SystemVar)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SystemVar};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
    return qax_result;
}

inline int IGridppReport::UnitToPixels(double UnitValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&UnitValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
    return qax_result;
}

inline void IGridppReport::UnprepareExport()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
}

inline grproLib::IGRPicture* IGridppReport::_CreatePicture()
{
    grproLib::IGRPicture* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_result);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline grproLib::IGridppReport* IGridppReport::_CreateProxyReport()
{
    grproLib::IGridppReport* qax_result = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_result);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline void IGridppReport::_DestroyProxyReport()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
}

inline void IGridppReport::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
}

inline void IGridppReport::_ObjLoadBegin(uint& pData, uint BytesCount)
{
    void *_a[] = {0, (void*)&pData, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
}

inline void IGridppReport::_ObjLoadEnd()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
}

inline bool IGridppReport::_ObjLoadEof()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
    return qax_result;
}

inline void IGridppReport::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
}

inline void IGridppReport::_ObjSaveBegin()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline void IGridppReport::_ObjSaveEnd(int*& ppData, uint& pBytesCount)
{
    void *_a[] = {0, (void*)&ppData, (void*)&pBytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
}

inline void IGridppReport::_RefreshPrinter()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
}

inline int IGridppReport::_SystemImage(grproLib::tagGRSystemImage SystemImage)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SystemImage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
    return qax_result;
}


inline bool IGRDetailGrid::AppendBlankCol() const
{
    QVariant qax_result = property("AppendBlankCol");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetAppendBlankCol(bool value){ setProperty("AppendBlankCol", QVariant(value)); }

inline double IGRDetailGrid::AppendBlankColWidth() const
{
    QVariant qax_result = property("AppendBlankColWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRDetailGrid::SetAppendBlankColWidth(double value){ setProperty("AppendBlankColWidth", QVariant(value)); }

inline bool IGRDetailGrid::AppendBlankRow() const
{
    QVariant qax_result = property("AppendBlankRow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetAppendBlankRow(bool value){ setProperty("AppendBlankRow", QVariant(value)); }

inline bool IGRDetailGrid::AppendBlankRowAtLast() const
{
    QVariant qax_result = property("AppendBlankRowAtLast");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetAppendBlankRowAtLast(bool value){ setProperty("AppendBlankRowAtLast", QVariant(value)); }

inline QColor IGRDetailGrid::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDetailGrid::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QColor IGRDetailGrid::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDetailGrid::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRPrintType IGRDetailGrid::BorderPrintType() const
{
    QVariant qax_result = property("BorderPrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRDetailGrid::SetBorderPrintType(grproLib::tagGRPrintType value){ setProperty("BorderPrintType", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRDetailGrid::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRDetailGrid::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRDetailGrid::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRDetailGrid::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline bool IGRDetailGrid::CenterView() const
{
    QVariant qax_result = property("CenterView");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetCenterView(bool value){ setProperty("CenterView", QVariant(value)); }

inline QColor IGRDetailGrid::ColLineColor() const
{
    QVariant qax_result = property("ColLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDetailGrid::SetColLineColor(const QColor& value){ setProperty("ColLineColor", QVariant(value)); }

inline double IGRDetailGrid::ColLineWidth() const
{
    QVariant qax_result = property("ColLineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRDetailGrid::SetColLineWidth(double value){ setProperty("ColLineWidth", QVariant(value)); }

inline grproLib::IGRColumnContent* IGRDetailGrid::ColumnContent() const
{
    grproLib::IGRColumnContent* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnContent*>("IGRColumnContent*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnContent>("IGRColumnContent", qax_pointer);
    QVariant qax_result = property("ColumnContent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnContent**)qax_result.constData();
}

inline grproLib::IGRColumnTitle* IGRDetailGrid::ColumnTitle() const
{
    grproLib::IGRColumnTitle* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnTitle*>("IGRColumnTitle*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnTitle>("IGRColumnTitle", qax_pointer);
    QVariant qax_result = property("ColumnTitle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnTitle**)qax_result.constData();
}

inline grproLib::IGRColumns* IGRDetailGrid::Columns() const
{
    grproLib::IGRColumns* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumns*>("IGRColumns*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumns>("IGRColumns", qax_pointer);
    QVariant qax_result = property("Columns");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumns**)qax_result.constData();
}

inline grproLib::IGRCrossTab* IGRDetailGrid::CrossTab() const
{
    grproLib::IGRCrossTab* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRCrossTab*>("IGRCrossTab*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRCrossTab>("IGRCrossTab", qax_pointer);
    QVariant qax_result = property("CrossTab");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRCrossTab**)qax_result.constData();
}

inline int IGRDetailGrid::FixCols() const
{
    QVariant qax_result = property("FixCols");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDetailGrid::SetFixCols(int value){ setProperty("FixCols", QVariant(value)); }

inline grproLib::IGRFont* IGRDetailGrid::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRDetailGrid::GridLinePrintType() const
{
    QVariant qax_result = property("GridLinePrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRDetailGrid::SetGridLinePrintType(grproLib::tagGRPrintType value){ setProperty("GridLinePrintType", QVariant(value)); }

inline grproLib::IGRGroups* IGRDetailGrid::Groups() const
{
    grproLib::IGRGroups* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGroups*>("IGRGroups*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGroups>("IGRGroups", qax_pointer);
    QVariant qax_result = property("Groups");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGroups**)qax_result.constData();
}

inline bool IGRDetailGrid::GrowToBottom() const
{
    QVariant qax_result = property("GrowToBottom");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetGrowToBottom(bool value){ setProperty("GrowToBottom", QVariant(value)); }

inline bool IGRDetailGrid::IsCrossTab() const
{
    QVariant qax_result = property("IsCrossTab");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetIsCrossTab(bool value){ setProperty("IsCrossTab", QVariant(value)); }

inline grproLib::tagGRNewPageStyle IGRDetailGrid::NewPage() const
{
    QVariant qax_result = property("NewPage");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageStyle*)qax_result.constData();
}
inline void IGRDetailGrid::SetNewPage(grproLib::tagGRNewPageStyle value){ setProperty("NewPage", QVariant(value)); }

inline int IGRDetailGrid::PageColumnCount() const
{
    QVariant qax_result = property("PageColumnCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDetailGrid::SetPageColumnCount(int value){ setProperty("PageColumnCount", QVariant(value)); }

inline grproLib::tagGRPageColumnDirection IGRDetailGrid::PageColumnDirection() const
{
    QVariant qax_result = property("PageColumnDirection");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPageColumnDirection*)qax_result.constData();
}
inline void IGRDetailGrid::SetPageColumnDirection(grproLib::tagGRPageColumnDirection value){ setProperty("PageColumnDirection", QVariant(value)); }

inline double IGRDetailGrid::PageColumnSpacing() const
{
    QVariant qax_result = property("PageColumnSpacing");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRDetailGrid::SetPageColumnSpacing(double value){ setProperty("PageColumnSpacing", QVariant(value)); }

inline bool IGRDetailGrid::PrintAdaptFitText() const
{
    QVariant qax_result = property("PrintAdaptFitText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetPrintAdaptFitText(bool value){ setProperty("PrintAdaptFitText", QVariant(value)); }

inline grproLib::tagGRColumnPrintAdaptMethod IGRDetailGrid::PrintAdaptMethod() const
{
    QVariant qax_result = property("PrintAdaptMethod");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRColumnPrintAdaptMethod*)qax_result.constData();
}
inline void IGRDetailGrid::SetPrintAdaptMethod(grproLib::tagGRColumnPrintAdaptMethod value){ setProperty("PrintAdaptMethod", QVariant(value)); }

inline int IGRDetailGrid::PrintAdaptRFCStep() const
{
    QVariant qax_result = property("PrintAdaptRFCStep");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDetailGrid::SetPrintAdaptRFCStep(int value){ setProperty("PrintAdaptRFCStep", QVariant(value)); }

inline bool IGRDetailGrid::PrintAdaptRepeat() const
{
    QVariant qax_result = property("PrintAdaptRepeat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetPrintAdaptRepeat(bool value){ setProperty("PrintAdaptRepeat", QVariant(value)); }

inline grproLib::IGRRecordset* IGRDetailGrid::Recordset() const
{
    grproLib::IGRRecordset* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRecordset*>("IGRRecordset*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRecordset>("IGRRecordset", qax_pointer);
    QVariant qax_result = property("Recordset");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRecordset**)qax_result.constData();
}

inline QColor IGRDetailGrid::RowLineColor() const
{
    QVariant qax_result = property("RowLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDetailGrid::SetRowLineColor(const QColor& value){ setProperty("RowLineColor", QVariant(value)); }

inline double IGRDetailGrid::RowLineWidth() const
{
    QVariant qax_result = property("RowLineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRDetailGrid::SetRowLineWidth(double value){ setProperty("RowLineWidth", QVariant(value)); }

inline bool IGRDetailGrid::ShowColLine() const
{
    QVariant qax_result = property("ShowColLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetShowColLine(bool value){ setProperty("ShowColLine", QVariant(value)); }

inline bool IGRDetailGrid::ShowRowLine() const
{
    QVariant qax_result = property("ShowRowLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDetailGrid::SetShowRowLine(bool value){ setProperty("ShowRowLine", QVariant(value)); }

inline QString IGRDetailGrid::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRDetailGrid::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::IGRColumn* IGRDetailGrid::AddColumn(const QString& Name, const QString& Title, const QString& DataField, double Width)
{
    grproLib::IGRColumn* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Title, (void*)&DataField, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline grproLib::IGRColumnTitleCell* IGRDetailGrid::AddGroupTitle(const QString& Name, const QString& Title)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IGRDetailGrid::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRDetailGrid::ClearColumns()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRDetailGrid::ClearGroupTitles()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRDetailGrid::ColumnMoveTo(const QString& ColumnName, const QString& NewGroupTitleCellName, int NewShowOrderNo)
{
    void *_a[] = {0, (void*)&ColumnName, (void*)&NewGroupTitleCellName, (void*)&NewShowOrderNo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRDetailGrid::ColumnMoveToEnd(const QVariant& ColumnIndex)
{
    void *_a[] = {0, (void*)&ColumnIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline grproLib::IGRColumnTitleCell* IGRDetailGrid::FindGroupTitleCell(const QString& Name)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void IGRDetailGrid::StartNewGroup(const QVariant& GroupIndex)
{
    void *_a[] = {0, (void*)&GroupIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline int IGRDetailGrid::_GetOccupyColumnGroupCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void IGRDetailGrid::_GetOccupyColumnGroupInfo(int Index, int& pGroupIndex, int& pBeginDataRowNo, int& pEndDataRowNo)
{
    void *_a[] = {0, (void*)&Index, (void*)&pGroupIndex, (void*)&pBeginDataRowNo, (void*)&pEndDataRowNo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline int IGRDetailGrid::_GetRowCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline void IGRDetailGrid::_GetRowInfo(int RowNo, int& pDataNo, tagGRDetailGridRowType& pType, int& pGroupIndex)
{
    void *_a[] = {0, (void*)&RowNo, (void*)&pDataNo, (void*)&pType, (void*)&pGroupIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRDetailGrid::_MoveSubTitleToEnd(grproLib::IGRColumnTitleCells* pOwnerTitles, grproLib::IGRColumnTitleCell* pSubTitle)
{
    void *_a[] = {0, (void*)&pOwnerTitles, (void*)&pSubTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGRDetailGrid::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRDetailGrid::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}


inline bool IGRColumnContent::AdjustRowHeight() const
{
    QVariant qax_result = property("AdjustRowHeight");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContent::SetAdjustRowHeight(bool value){ setProperty("AdjustRowHeight", QVariant(value)); }

inline QColor IGRColumnContent::AlternatingBackColor() const
{
    QVariant qax_result = property("AlternatingBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnContent::SetAlternatingBackColor(const QColor& value){ setProperty("AlternatingBackColor", QVariant(value)); }

inline QColor IGRColumnContent::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnContent::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRColumnContent::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContent::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRColumnContent::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContent::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRColumnContent::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContent::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRColumnContentCells* IGRColumnContent::ContentCells() const
{
    grproLib::IGRColumnContentCells* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnContentCells*>("IGRColumnContentCells*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnContentCells>("IGRColumnContentCells", qax_pointer);
    QVariant qax_result = property("ContentCells");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnContentCells**)qax_result.constData();
}

inline grproLib::IGRControls* IGRColumnContent::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRColumnContent::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRColumnContent::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline grproLib::IGRDetailGrid* IGRColumnContent::DetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("DetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::IGRFont* IGRColumnContent::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRColumnContent::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContent::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline bool IGRColumnContent::GrowToNextRow() const
{
    QVariant qax_result = property("GrowToNextRow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContent::SetGrowToNextRow(bool value){ setProperty("GrowToNextRow", QVariant(value)); }

inline double IGRColumnContent::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRColumnContent::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRColumnContent::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContent::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRColumnContent::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContent::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRColumnContent::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IGRColumnContent::RowsPerPage() const
{
    QVariant qax_result = property("RowsPerPage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRColumnContent::SetRowsPerPage(int value){ setProperty("RowsPerPage", QVariant(value)); }

inline grproLib::tagGRSectionType IGRColumnContent::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRColumnContent::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContent::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRColumnContent::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContent::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRColumnContent::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRColumnContent::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRColumnContent::SetCellsBackColor(const QColor& BackColor)
{
    void *_a[] = {0, (void*)&BackColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IGRColumnContent::SetCellsForeColor(const QColor& ForeColor)
{
    void *_a[] = {0, (void*)&ForeColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IGRColumnContent::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IGRColumnContent::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IGRColumnContent::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}


inline QColor IGRColumnSection::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnSection::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRColumnSection::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnSection::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRColumnSection::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnSection::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRColumnSection::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnSection::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRColumnSection::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRDetailGrid* IGRColumnSection::DetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("DetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::IGRFont* IGRColumnSection::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRColumnSection::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnSection::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRColumnSection::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRColumnSection::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRColumnSection::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnSection::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRColumnSection::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnSection::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRColumnSection::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRSectionType IGRColumnSection::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRColumnSection::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnSection::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRColumnSection::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnSection::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRColumnSection::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRColumnSection::SetCellsBackColor(const QColor& BackColor)
{
    void *_a[] = {0, (void*)&BackColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRColumnSection::SetCellsForeColor(const QColor& ForeColor)
{
    void *_a[] = {0, (void*)&ForeColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRColumnSection::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRColumnSection::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRColumnSection::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}


inline int IGRColumnContentCells::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRColumnContentCells::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IGRColumnContentCells::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline grproLib::IGRColumnContentCell* IGRColumnContentCells::Item(const QVariant& Index)
{
    grproLib::IGRColumnContentCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnContentCell*>("IGRColumnContentCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnContentCell>("IGRColumnContentCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline QColor IGRColumnContentCell::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnContentCell::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline bool IGRColumnContentCell::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRColumnContentCell::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRColumn* IGRColumnContentCell::Column() const
{
    grproLib::IGRColumn* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_pointer);
    QVariant qax_result = property("Column");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumn**)qax_result.constData();
}

inline grproLib::IGRControls* IGRColumnContentCell::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRColumnContentCell::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRColumnContentCell::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline QString IGRColumnContentCell::DataField() const
{
    QVariant qax_result = property("DataField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContentCell::SetDataField(const QString& value){ setProperty("DataField", QVariant(value)); }

inline bool IGRColumnContentCell::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRColumnContentCell::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRColumnContentCell::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnContentCell::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline bool IGRColumnContentCell::FreeCell() const
{
    QVariant qax_result = property("FreeCell");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetFreeCell(bool value){ setProperty("FreeCell", QVariant(value)); }

inline QString IGRColumnContentCell::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContentCell::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::IGRColumnContent* IGRColumnContentCell::Parent() const
{
    grproLib::IGRColumnContent* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnContent*>("IGRColumnContent*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnContent>("IGRColumnContent", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnContent**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRColumnContentCell::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRColumnContentCell::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRColumnContentCell::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRColumnContentCell::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRColumnContentCell::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline QString IGRColumnContentCell::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnContentCell::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRColumnContentCell::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRColumnContentCell::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline bool IGRColumnContentCell::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnContentCell::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline int IGRColumnContentCell::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IGRColumnContentCell::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRColumnContentCell::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRColumnContentCell::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IGRColumnContentCell::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline QColor IGRColumnCell::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnCell::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::IGRColumn* IGRColumnCell::Column() const
{
    grproLib::IGRColumn* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_pointer);
    QVariant qax_result = property("Column");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumn**)qax_result.constData();
}

inline grproLib::IGRControls* IGRColumnCell::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline bool IGRColumnCell::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnCell::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRColumnCell::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRColumnCell::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnCell::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline bool IGRColumnCell::FreeCell() const
{
    QVariant qax_result = property("FreeCell");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnCell::SetFreeCell(bool value){ setProperty("FreeCell", QVariant(value)); }

inline QString IGRColumnCell::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnCell::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::tagGRPrintType IGRColumnCell::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRColumnCell::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRColumnCell::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnCell::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRColumnCell::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnCell::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRColumnCell::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnCell::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline QString IGRColumnCell::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnCell::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRColumnCell::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRColumnCell::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline bool IGRColumnCell::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnCell::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline void IGRColumnCell::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRColumnCell::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRColumnCell::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline grproLib::IGRColumnContentCell* IGRColumn::ContentCell() const
{
    grproLib::IGRColumnContentCell* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnContentCell*>("IGRColumnContentCell*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnContentCell>("IGRColumnContentCell", qax_pointer);
    QVariant qax_result = property("ContentCell");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnContentCell**)qax_result.constData();
}

inline QString IGRColumn::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumn::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::IGRDetailGrid* IGRColumn::Parent() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline QString IGRColumn::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumn::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::IGRColumnTitleCell* IGRColumn::TitleCell() const
{
    grproLib::IGRColumnTitleCell* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_pointer);
    QVariant qax_result = property("TitleCell");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnTitleCell**)qax_result.constData();
}

inline bool IGRColumn::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumn::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRColumn::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRColumn::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline void IGRColumn::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRColumn::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRColumn::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline QColor IGRColumnTitleCell::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::IGRColumn* IGRColumnTitleCell::Column() const
{
    grproLib::IGRColumn* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_pointer);
    QVariant qax_result = property("Column");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumn**)qax_result.constData();
}

inline grproLib::IGRControls* IGRColumnTitleCell::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline bool IGRColumnTitleCell::EndEllipsis() const
{
    QVariant qax_result = property("EndEllipsis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetEndEllipsis(bool value){ setProperty("EndEllipsis", QVariant(value)); }

inline grproLib::IGRFont* IGRColumnTitleCell::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRColumnTitleCell::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline bool IGRColumnTitleCell::FreeCell() const
{
    QVariant qax_result = property("FreeCell");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetFreeCell(bool value){ setProperty("FreeCell", QVariant(value)); }

inline bool IGRColumnTitleCell::GroupTitle() const
{
    QVariant qax_result = property("GroupTitle");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IGRColumnTitleCell::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IGRColumnTitleCell::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::IGRColumnTitle* IGRColumnTitleCell::Parent() const
{
    grproLib::IGRColumnTitle* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnTitle*>("IGRColumnTitle*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnTitle>("IGRColumnTitle", qax_pointer);
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnTitle**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRColumnTitleCell::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline bool IGRColumnTitleCell::ShowMoneyLabel() const
{
    QVariant qax_result = property("ShowMoneyLabel");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetShowMoneyLabel(bool value){ setProperty("ShowMoneyLabel", QVariant(value)); }

inline bool IGRColumnTitleCell::ShowMoneyLine() const
{
    QVariant qax_result = property("ShowMoneyLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetShowMoneyLine(bool value){ setProperty("ShowMoneyLine", QVariant(value)); }

inline bool IGRColumnTitleCell::ShrinkFontToFit() const
{
    QVariant qax_result = property("ShrinkFontToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetShrinkFontToFit(bool value){ setProperty("ShrinkFontToFit", QVariant(value)); }

inline grproLib::IGRColumnTitleCells* IGRColumnTitleCell::SubTitles() const
{
    grproLib::IGRColumnTitleCells* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCells*>("IGRColumnTitleCells*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnTitleCells>("IGRColumnTitleCells", qax_pointer);
    QVariant qax_result = property("SubTitles");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnTitleCells**)qax_result.constData();
}

inline grproLib::IGRColumnTitleCell* IGRColumnTitleCell::SupCell() const
{
    grproLib::IGRColumnTitleCell* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_pointer);
    QVariant qax_result = property("SupCell");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnTitleCell**)qax_result.constData();
}

inline QString IGRColumnTitleCell::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IGRColumnTitleCell::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline grproLib::tagGRTextAlign IGRColumnTitleCell::TextAlign() const
{
    QVariant qax_result = property("TextAlign");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextAlign*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetTextAlign(grproLib::tagGRTextAlign value){ setProperty("TextAlign", QVariant(value)); }

inline bool IGRColumnTitleCell::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline bool IGRColumnTitleCell::WordWrap() const
{
    QVariant qax_result = property("WordWrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitleCell::SetWordWrap(bool value){ setProperty("WordWrap", QVariant(value)); }

inline grproLib::IGRColumnTitleCell* IGRColumnTitleCell::AddSubGroupTitle(const QString& Name, const QString& Title)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IGRColumnTitleCell::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRColumnTitleCell::EncloseColumn(const QVariant& ColumnIndex)
{
    void *_a[] = {0, (void*)&ColumnIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRColumnTitleCell::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IGRColumnTitleCell::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline QColor IGRColumnTitle::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRColumnTitle::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRColumnTitle::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitle::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRColumnTitle::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitle::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRColumnTitle::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitle::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRColumnTitle::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRDetailGrid* IGRColumnTitle::DetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("DetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::IGRFont* IGRColumnTitle::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRColumnTitle::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitle::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRColumnTitle::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRColumnTitle::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRColumnTitle::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitle::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRColumnTitle::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitle::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRColumnTitle::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRRepeatStyle IGRColumnTitle::RepeatStyle() const
{
    QVariant qax_result = property("RepeatStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRRepeatStyle*)qax_result.constData();
}
inline void IGRColumnTitle::SetRepeatStyle(grproLib::tagGRRepeatStyle value){ setProperty("RepeatStyle", QVariant(value)); }

inline grproLib::tagGRSectionType IGRColumnTitle::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRColumnTitle::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRColumnTitle::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::IGRColumnTitleCells* IGRColumnTitle::TitleCells() const
{
    grproLib::IGRColumnTitleCells* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCells*>("IGRColumnTitleCells*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRColumnTitleCells>("IGRColumnTitleCells", qax_pointer);
    QVariant qax_result = property("TitleCells");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRColumnTitleCells**)qax_result.constData();
}

inline bool IGRColumnTitle::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRColumnTitle::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRColumnTitle::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRColumnTitle::SetCellsBackColor(const QColor& BackColor)
{
    void *_a[] = {0, (void*)&BackColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRColumnTitle::SetCellsForeColor(const QColor& ForeColor)
{
    void *_a[] = {0, (void*)&ForeColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRColumnTitle::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRColumnTitle::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IGRColumnTitle::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}


inline int IGRColumnTitleCells::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRColumnTitleCells::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRColumnTitleCell* IGRColumnTitleCells::AddGroup(const QString& Name, const QString& Title)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Title};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRColumnTitleCells::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline grproLib::IGRColumnTitleCell* IGRColumnTitleCells::Item(const QVariant& Index)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRColumnTitleCells::RemoveGroup(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline int IGRColumns::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRColumns::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRColumn* IGRColumns::Add()
{
    grproLib::IGRColumn* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRColumns::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline grproLib::IGRColumn* IGRColumns::Item(const QVariant& Index)
{
    grproLib::IGRColumn* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRColumns::Remove(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRColumns::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int IGRGroups::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRGroups::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRGroup* IGRGroups::Add()
{
    grproLib::IGRGroup* qax_result = 0;
    qRegisterMetaType<grproLib::IGRGroup*>("IGRGroup*", &qax_result);
    qRegisterMetaType<grproLib::IGRGroup>("IGRGroup", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRGroups::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline grproLib::IGRGroup* IGRGroups::Item(const QVariant& Index)
{
    grproLib::IGRGroup* qax_result = 0;
    qRegisterMetaType<grproLib::IGRGroup*>("IGRGroup*", &qax_result);
    qRegisterMetaType<grproLib::IGRGroup>("IGRGroup", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRGroups::Remove(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRGroups::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline QString IGRRecordset::BeforePostRecordScript() const
{
    QVariant qax_result = property("BeforePostRecordScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetBeforePostRecordScript(const QString& value){ setProperty("BeforePostRecordScript", QVariant(value)); }

inline QString IGRRecordset::ConnectionString() const
{
    QVariant qax_result = property("ConnectionString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetConnectionString(const QString& value){ setProperty("ConnectionString", QVariant(value)); }

inline bool IGRRecordset::Editable() const
{
    QVariant qax_result = property("Editable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRecordset::SetEditable(bool value){ setProperty("Editable", QVariant(value)); }

inline QString IGRRecordset::FetchRecordScript() const
{
    QVariant qax_result = property("FetchRecordScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetFetchRecordScript(const QString& value){ setProperty("FetchRecordScript", QVariant(value)); }

inline grproLib::IGRFields* IGRRecordset::Fields() const
{
    grproLib::IGRFields* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFields*>("IGRFields*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFields>("IGRFields", qax_pointer);
    QVariant qax_result = property("Fields");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFields**)qax_result.constData();
}

inline QString IGRRecordset::PageProcessRecordScript() const
{
    QVariant qax_result = property("PageProcessRecordScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetPageProcessRecordScript(const QString& value){ setProperty("PageProcessRecordScript", QVariant(value)); }

inline QString IGRRecordset::ProcessRecordScript() const
{
    QVariant qax_result = property("ProcessRecordScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetProcessRecordScript(const QString& value){ setProperty("ProcessRecordScript", QVariant(value)); }

inline QString IGRRecordset::QuerySQL() const
{
    QVariant qax_result = property("QuerySQL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetQuerySQL(const QString& value){ setProperty("QuerySQL", QVariant(value)); }

inline int IGRRecordset::RecordCount() const
{
    QVariant qax_result = property("RecordCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRRecordset::RecordNo() const
{
    QVariant qax_result = property("RecordNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IGRRecordset::SkipQuery() const
{
    QVariant qax_result = property("SkipQuery");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRecordset::SetSkipQuery(bool value){ setProperty("SkipQuery", QVariant(value)); }

inline bool IGRRecordset::SortAsc() const
{
    QVariant qax_result = property("SortAsc");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRecordset::SetSortAsc(bool value){ setProperty("SortAsc", QVariant(value)); }

inline bool IGRRecordset::SortCaseSensitive() const
{
    QVariant qax_result = property("SortCaseSensitive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRRecordset::SetSortCaseSensitive(bool value){ setProperty("SortCaseSensitive", QVariant(value)); }

inline QString IGRRecordset::SortFields() const
{
    QVariant qax_result = property("SortFields");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetSortFields(const QString& value){ setProperty("SortFields", QVariant(value)); }

inline QString IGRRecordset::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRRecordset::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::IGRField* IGRRecordset::AddField(const QString& Name, grproLib::tagGRFieldType FieldType)
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&FieldType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IGRRecordset::Append()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRRecordset::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline bool IGRRecordset::Bof()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IGRRecordset::Cancel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRRecordset::Edit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRRecordset::Empty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline bool IGRRecordset::Eof()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void IGRRecordset::First()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IGRRecordset::Last()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IGRRecordset::MoveBy(int Delta)
{
    void *_a[] = {0, (void*)&Delta};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRRecordset::MoveTo(int RecordNo)
{
    void *_a[] = {0, (void*)&RecordNo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRRecordset::Next()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IGRRecordset::Post()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRRecordset::Prior()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRRecordset::RemoveAllFields()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline bool IGRRecordset::Resort(const QString& Fields, bool Ascending, bool CaseSensitive)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Fields, (void*)&Ascending, (void*)&CaseSensitive};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void IGRRecordset::_KeepValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void IGRRecordset::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void IGRRecordset::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}


inline int IGRFields::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRFields::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRField* IGRFields::Add()
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRFields::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline grproLib::IGRField* IGRFields::Item(const QVariant& Index)
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRFields::Remove(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRFields::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline bool IGRField::AsBoolean() const
{
    QVariant qax_result = property("AsBoolean");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRField::SetAsBoolean(bool value){ setProperty("AsBoolean", QVariant(value)); }

inline qlonglong IGRField::AsCurrency() const
{
    QVariant qax_result = property("AsCurrency");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IGRField::SetAsCurrency(qlonglong value){ setProperty("AsCurrency", QVariant(value)); }

inline QDateTime IGRField::AsDateTime() const
{
    QVariant qax_result = property("AsDateTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}
inline void IGRField::SetAsDateTime(const QDateTime& value){ setProperty("AsDateTime", QVariant(value)); }

inline double IGRField::AsFloat() const
{
    QVariant qax_result = property("AsFloat");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRField::SetAsFloat(double value){ setProperty("AsFloat", QVariant(value)); }

inline int IGRField::AsInteger() const
{
    QVariant qax_result = property("AsInteger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRField::SetAsInteger(int value){ setProperty("AsInteger", QVariant(value)); }

inline QString IGRField::AsString() const
{
    QVariant qax_result = property("AsString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetAsString(const QString& value){ setProperty("AsString", QVariant(value)); }

inline QString IGRField::DBFieldName() const
{
    QVariant qax_result = property("DBFieldName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetDBFieldName(const QString& value){ setProperty("DBFieldName", QVariant(value)); }

inline int IGRField::DataBuffer() const
{
    QVariant qax_result = property("DataBuffer");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRField::DataSize() const
{
    QVariant qax_result = property("DataSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRField::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetDisplayText(const QString& value){ setProperty("DisplayText", QVariant(value)); }

inline grproLib::tagGRFieldType IGRField::FieldType() const
{
    QVariant qax_result = property("FieldType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRFieldType*)qax_result.constData();
}
inline void IGRField::SetFieldType(grproLib::tagGRFieldType value){ setProperty("FieldType", QVariant(value)); }

inline QString IGRField::Format() const
{
    QVariant qax_result = property("Format");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetFormat(const QString& value){ setProperty("Format", QVariant(value)); }

inline QString IGRField::GetDisplayTextScript() const
{
    QVariant qax_result = property("GetDisplayTextScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetGetDisplayTextScript(const QString& value){ setProperty("GetDisplayTextScript", QVariant(value)); }

inline bool IGRField::IsNull() const
{
    QVariant qax_result = property("IsNull");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IGRField::Length() const
{
    QVariant qax_result = property("Length");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRField::SetLength(int value){ setProperty("Length", QVariant(value)); }

inline QString IGRField::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline bool IGRField::RTrimBlankChars() const
{
    QVariant qax_result = property("RTrimBlankChars");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRField::SetRTrimBlankChars(bool value){ setProperty("RTrimBlankChars", QVariant(value)); }

inline QString IGRField::RunningDBField() const
{
    QVariant qax_result = property("RunningDBField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IGRField::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRField::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QVariant IGRField::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void IGRField::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void IGRField::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRField::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRField::LoadFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRField::LoadFromMemory(uint& pBuffer, int ByteCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&ByteCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline double IGRField::_AsDoubleValue()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IGRField::_CopyValueFromPool(int pAddr, int& Length)
{
    void *_a[] = {0, (void*)&pAddr, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IGRField::_FetchValuePostInfo(int*& pAddr, int& pSize, int& pLength)
{
    void *_a[] = {0, (void*)&pAddr, (void*)&pSize, (void*)&pLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IGRField::_KeepValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IGRField::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IGRField::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline bool IGRField::_ValueChanged()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}


inline bool IGRCrossTab::AutoPeriodText() const
{
    QVariant qax_result = property("AutoPeriodText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetAutoPeriodText(bool value){ setProperty("AutoPeriodText", QVariant(value)); }

inline QString IGRCrossTab::BeginDateParameter() const
{
    QVariant qax_result = property("BeginDateParameter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetBeginDateParameter(const QString& value){ setProperty("BeginDateParameter", QVariant(value)); }

inline QString IGRCrossTab::EndDateParameter() const
{
    QVariant qax_result = property("EndDateParameter");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetEndDateParameter(const QString& value){ setProperty("EndDateParameter", QVariant(value)); }

inline bool IGRCrossTab::GroupAutoSum() const
{
    QVariant qax_result = property("GroupAutoSum");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetGroupAutoSum(bool value){ setProperty("GroupAutoSum", QVariant(value)); }

inline QString IGRCrossTab::HCrossFields() const
{
    QVariant qax_result = property("HCrossFields");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetHCrossFields(const QString& value){ setProperty("HCrossFields", QVariant(value)); }

inline grproLib::tagGRPeriodType IGRCrossTab::HCrossPeriodType() const
{
    QVariant qax_result = property("HCrossPeriodType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPeriodType*)qax_result.constData();
}
inline void IGRCrossTab::SetHCrossPeriodType(grproLib::tagGRPeriodType value){ setProperty("HCrossPeriodType", QVariant(value)); }

inline QString IGRCrossTab::HPercentColumns() const
{
    QVariant qax_result = property("HPercentColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetHPercentColumns(const QString& value){ setProperty("HPercentColumns", QVariant(value)); }

inline bool IGRCrossTab::HResort() const
{
    QVariant qax_result = property("HResort");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetHResort(bool value){ setProperty("HResort", QVariant(value)); }

inline bool IGRCrossTab::HSortAsc() const
{
    QVariant qax_result = property("HSortAsc");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetHSortAsc(bool value){ setProperty("HSortAsc", QVariant(value)); }

inline bool IGRCrossTab::HTotalAtFirst() const
{
    QVariant qax_result = property("HTotalAtFirst");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetHTotalAtFirst(bool value){ setProperty("HTotalAtFirst", QVariant(value)); }

inline int IGRCrossTab::ListCols() const
{
    QVariant qax_result = property("ListCols");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRCrossTab::SetListCols(int value){ setProperty("ListCols", QVariant(value)); }

inline QString IGRCrossTab::PercentFormat() const
{
    QVariant qax_result = property("PercentFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetPercentFormat(const QString& value){ setProperty("PercentFormat", QVariant(value)); }

inline grproLib::IGRRecordset* IGRCrossTab::Recordset() const
{
    grproLib::IGRRecordset* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRecordset*>("IGRRecordset*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRecordset>("IGRRecordset", qax_pointer);
    QVariant qax_result = property("Recordset");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRecordset**)qax_result.constData();
}

inline int IGRCrossTab::SubtotalCols() const
{
    QVariant qax_result = property("SubtotalCols");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRCrossTab::SetSubtotalCols(int value){ setProperty("SubtotalCols", QVariant(value)); }

inline QString IGRCrossTab::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline int IGRCrossTab::TotalCols() const
{
    QVariant qax_result = property("TotalCols");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRCrossTab::SetTotalCols(int value){ setProperty("TotalCols", QVariant(value)); }

inline QString IGRCrossTab::TotalHPercentColumns() const
{
    QVariant qax_result = property("TotalHPercentColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetTotalHPercentColumns(const QString& value){ setProperty("TotalHPercentColumns", QVariant(value)); }

inline QString IGRCrossTab::TotalVPercentColumns() const
{
    QVariant qax_result = property("TotalVPercentColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetTotalVPercentColumns(const QString& value){ setProperty("TotalVPercentColumns", QVariant(value)); }

inline QString IGRCrossTab::VCrossFields() const
{
    QVariant qax_result = property("VCrossFields");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetVCrossFields(const QString& value){ setProperty("VCrossFields", QVariant(value)); }

inline QString IGRCrossTab::VPercentColumns() const
{
    QVariant qax_result = property("VPercentColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRCrossTab::SetVPercentColumns(const QString& value){ setProperty("VPercentColumns", QVariant(value)); }

inline bool IGRCrossTab::VResort() const
{
    QVariant qax_result = property("VResort");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetVResort(bool value){ setProperty("VResort", QVariant(value)); }

inline bool IGRCrossTab::VSortAsc() const
{
    QVariant qax_result = property("VSortAsc");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRCrossTab::SetVSortAsc(bool value){ setProperty("VSortAsc", QVariant(value)); }

inline void IGRCrossTab::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QDateTime IGRCrossTab::GetCurPeriodBeginDate()
{
    QDateTime qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QDateTime IGRCrossTab::GetCurPeriodEndDate()
{
    QDateTime qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRCrossTab::HBeginAddItem()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRCrossTab::HEndAddItem()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRCrossTab::VBeginAddItem()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IGRCrossTab::VEndAddItem()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IGRCrossTab::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IGRCrossTab::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}


inline QColor IGRPageHeader::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRPageHeader::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRPageHeader::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageHeader::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRPageHeader::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPageHeader::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRPageHeader::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPageHeader::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRPageHeader::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRPageHeader::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRPageHeader::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageHeader::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRPageHeader::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPageHeader::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IGRPageHeader::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageHeader::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRPageHeader::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRSectionType IGRPageHeader::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRPageHeader::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageHeader::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRPageHeader::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPageHeader::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRPageHeader::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRPageHeader::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRPageHeader::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRPageHeader::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline QColor IGRPageFooter::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRPageFooter::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRPageFooter::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageFooter::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRPageFooter::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPageFooter::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRPageFooter::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPageFooter::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRPageFooter::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRPageFooter::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRPageFooter::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageFooter::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRPageFooter::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPageFooter::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IGRPageFooter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageFooter::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRPageFooter::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRSectionType IGRPageFooter::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRPageFooter::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPageFooter::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRPageFooter::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPageFooter::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRPageFooter::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRPageFooter::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRPageFooter::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRPageFooter::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline QColor IGRReportHeader::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRReportHeader::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRReportHeader::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportHeader::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRReportHeader::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportHeader::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRReportHeader::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportHeader::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRReportHeader::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRReportHeader::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRReportHeader::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportHeader::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRReportHeader::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRReportHeader::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRReportHeader::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportHeader::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRReportHeader::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportHeader::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::tagGRNewPageStyle IGRReportHeader::NewPage() const
{
    QVariant qax_result = property("NewPage");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageStyle*)qax_result.constData();
}
inline void IGRReportHeader::SetNewPage(grproLib::tagGRNewPageStyle value){ setProperty("NewPage", QVariant(value)); }

inline IUnknown* IGRReportHeader::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IGRReportHeader::RepeatOnPage() const
{
    QVariant qax_result = property("RepeatOnPage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportHeader::SetRepeatOnPage(bool value){ setProperty("RepeatOnPage", QVariant(value)); }

inline grproLib::tagGRSectionType IGRReportHeader::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRReportHeader::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportHeader::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRReportHeader::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportHeader::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRReportHeader::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRReportHeader::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRReportHeader::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRReportHeader::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}


inline bool IGRReportFooter::AppendBlankRowExclude() const
{
    QVariant qax_result = property("AppendBlankRowExclude");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetAppendBlankRowExclude(bool value){ setProperty("AppendBlankRowExclude", QVariant(value)); }

inline QColor IGRReportFooter::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRReportFooter::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRReportFooter::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportFooter::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRReportFooter::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRReportFooter::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRReportFooter::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRReportFooter::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRReportFooter::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportFooter::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline double IGRReportFooter::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRReportFooter::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRReportFooter::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRReportFooter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportFooter::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::tagGRNewPageStyle IGRReportFooter::NewPage() const
{
    QVariant qax_result = property("NewPage");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageStyle*)qax_result.constData();
}
inline void IGRReportFooter::SetNewPage(grproLib::tagGRNewPageStyle value){ setProperty("NewPage", QVariant(value)); }

inline IUnknown* IGRReportFooter::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IGRReportFooter::PrintAtBottom() const
{
    QVariant qax_result = property("PrintAtBottom");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetPrintAtBottom(bool value){ setProperty("PrintAtBottom", QVariant(value)); }

inline bool IGRReportFooter::RepeatOnPage() const
{
    QVariant qax_result = property("RepeatOnPage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetRepeatOnPage(bool value){ setProperty("RepeatOnPage", QVariant(value)); }

inline grproLib::tagGRSectionType IGRReportFooter::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRReportFooter::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRReportFooter::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRReportFooter::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRReportFooter::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRReportFooter::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRReportFooter::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IGRReportFooter::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IGRReportFooter::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}


inline int IGRParameters::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRParameters::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRParameter* IGRParameters::Add()
{
    grproLib::IGRParameter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRParameter*>("IGRParameter*", &qax_result);
    qRegisterMetaType<grproLib::IGRParameter>("IGRParameter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRParameters::IndexByName(const QString& Name)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline grproLib::IGRParameter* IGRParameters::Item(const QVariant& Index)
{
    grproLib::IGRParameter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRParameter*>("IGRParameter*", &qax_result);
    qRegisterMetaType<grproLib::IGRParameter>("IGRParameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRParameters::Remove(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRParameters::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline bool IGRParameter::AsBoolean() const
{
    QVariant qax_result = property("AsBoolean");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRParameter::SetAsBoolean(bool value){ setProperty("AsBoolean", QVariant(value)); }

inline QDateTime IGRParameter::AsDateTime() const
{
    QVariant qax_result = property("AsDateTime");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}
inline void IGRParameter::SetAsDateTime(const QDateTime& value){ setProperty("AsDateTime", QVariant(value)); }

inline double IGRParameter::AsFloat() const
{
    QVariant qax_result = property("AsFloat");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRParameter::SetAsFloat(double value){ setProperty("AsFloat", QVariant(value)); }

inline int IGRParameter::AsInteger() const
{
    QVariant qax_result = property("AsInteger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRParameter::SetAsInteger(int value){ setProperty("AsInteger", QVariant(value)); }

inline QString IGRParameter::AsString() const
{
    QVariant qax_result = property("AsString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRParameter::SetAsString(const QString& value){ setProperty("AsString", QVariant(value)); }

inline grproLib::tagGRParameterDataType IGRParameter::DataType() const
{
    QVariant qax_result = property("DataType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRParameterDataType*)qax_result.constData();
}
inline void IGRParameter::SetDataType(grproLib::tagGRParameterDataType value){ setProperty("DataType", QVariant(value)); }

inline QString IGRParameter::DisplayText() const
{
    QVariant qax_result = property("DisplayText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IGRParameter::Format() const
{
    QVariant qax_result = property("Format");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRParameter::SetFormat(const QString& value){ setProperty("Format", QVariant(value)); }

inline bool IGRParameter::IsNull() const
{
    QVariant qax_result = property("IsNull");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRParameter::SetIsNull(bool value){ setProperty("IsNull", QVariant(value)); }

inline QString IGRParameter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRParameter::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString IGRParameter::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRParameter::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QVariant IGRParameter::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void IGRParameter::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline void IGRParameter::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRParameter::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IGRParameter::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline int IGRSections::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IGRSections::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::IGRSection* IGRSections::Add(grproLib::tagGRSectionType SectionType)
{
    grproLib::IGRSection* qax_result = 0;
    qRegisterMetaType<grproLib::IGRSection*>("IGRSection*", &qax_result);
    qRegisterMetaType<grproLib::IGRSection>("IGRSection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&SectionType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline grproLib::IGRSection* IGRSections::Item(const QVariant& Index)
{
    grproLib::IGRSection* qax_result = 0;
    qRegisterMetaType<grproLib::IGRSection*>("IGRSection*", &qax_result);
    qRegisterMetaType<grproLib::IGRSection>("IGRSection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IGRSections::Remove(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRSections::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline double IGRPrinter::BottomMargin() const
{
    QVariant qax_result = property("BottomMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetBottomMargin(double value){ setProperty("BottomMargin", QVariant(value)); }

inline bool IGRPrinter::CanCollate() const
{
    QVariant qax_result = property("CanCollate");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IGRPrinter::CanDuplex() const
{
    QVariant qax_result = property("CanDuplex");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IGRPrinter::Collate() const
{
    QVariant qax_result = property("Collate");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrinter::SetCollate(bool value){ setProperty("Collate", QVariant(value)); }

inline int IGRPrinter::Copies() const
{
    QVariant qax_result = property("Copies");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrinter::SetCopies(int value){ setProperty("Copies", QVariant(value)); }

inline grproLib::tagGRDuplexKind IGRPrinter::Duplex() const
{
    QVariant qax_result = property("Duplex");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDuplexKind*)qax_result.constData();
}
inline void IGRPrinter::SetDuplex(grproLib::tagGRDuplexKind value){ setProperty("Duplex", QVariant(value)); }

inline double IGRPrinter::LeftMargin() const
{
    QVariant qax_result = property("LeftMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetLeftMargin(double value){ setProperty("LeftMargin", QVariant(value)); }

inline bool IGRPrinter::Online() const
{
    QVariant qax_result = property("Online");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IGRPrinter::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrinter::SetPageCount(int value){ setProperty("PageCount", QVariant(value)); }

inline grproLib::tagGRPaperKind IGRPrinter::PaperKind() const
{
    QVariant qax_result = property("PaperKind");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperKind*)qax_result.constData();
}
inline void IGRPrinter::SetPaperKind(grproLib::tagGRPaperKind value){ setProperty("PaperKind", QVariant(value)); }

inline double IGRPrinter::PaperLength() const
{
    QVariant qax_result = property("PaperLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetPaperLength(double value){ setProperty("PaperLength", QVariant(value)); }

inline QString IGRPrinter::PaperName() const
{
    QVariant qax_result = property("PaperName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPrinter::SetPaperName(const QString& value){ setProperty("PaperName", QVariant(value)); }

inline grproLib::tagGRPaperOrientation IGRPrinter::PaperOrientation() const
{
    QVariant qax_result = property("PaperOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperOrientation*)qax_result.constData();
}
inline void IGRPrinter::SetPaperOrientation(grproLib::tagGRPaperOrientation value){ setProperty("PaperOrientation", QVariant(value)); }

inline int IGRPrinter::PaperSize() const
{
    QVariant qax_result = property("PaperSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrinter::SetPaperSize(int value){ setProperty("PaperSize", QVariant(value)); }

inline grproLib::tagGRPaperSourceKind IGRPrinter::PaperSource() const
{
    QVariant qax_result = property("PaperSource");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperSourceKind*)qax_result.constData();
}
inline void IGRPrinter::SetPaperSource(grproLib::tagGRPaperSourceKind value){ setProperty("PaperSource", QVariant(value)); }

inline double IGRPrinter::PaperWidth() const
{
    QVariant qax_result = property("PaperWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetPaperWidth(double value){ setProperty("PaperWidth", QVariant(value)); }

inline bool IGRPrinter::PrintOffsetSaveToLocal() const
{
    QVariant qax_result = property("PrintOffsetSaveToLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrinter::SetPrintOffsetSaveToLocal(bool value){ setProperty("PrintOffsetSaveToLocal", QVariant(value)); }

inline double IGRPrinter::PrintOffsetX() const
{
    QVariant qax_result = property("PrintOffsetX");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetPrintOffsetX(double value){ setProperty("PrintOffsetX", QVariant(value)); }

inline double IGRPrinter::PrintOffsetY() const
{
    QVariant qax_result = property("PrintOffsetY");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetPrintOffsetY(double value){ setProperty("PrintOffsetY", QVariant(value)); }

inline grproLib::tagGRPrintPageType IGRPrinter::PrintPageType() const
{
    QVariant qax_result = property("PrintPageType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintPageType*)qax_result.constData();
}
inline void IGRPrinter::SetPrintPageType(grproLib::tagGRPrintPageType value){ setProperty("PrintPageType", QVariant(value)); }

inline grproLib::tagGRPrintRangeType IGRPrinter::PrintRangeType() const
{
    QVariant qax_result = property("PrintRangeType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintRangeType*)qax_result.constData();
}
inline void IGRPrinter::SetPrintRangeType(grproLib::tagGRPrintRangeType value){ setProperty("PrintRangeType", QVariant(value)); }

inline QString IGRPrinter::PrinterName() const
{
    QVariant qax_result = property("PrinterName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPrinter::SetPrinterName(const QString& value){ setProperty("PrinterName", QVariant(value)); }

inline double IGRPrinter::RightMargin() const
{
    QVariant qax_result = property("RightMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetRightMargin(double value){ setProperty("RightMargin", QVariant(value)); }

inline QString IGRPrinter::SelectionPrintPages() const
{
    QVariant qax_result = property("SelectionPrintPages");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRPrinter::SetSelectionPrintPages(const QString& value){ setProperty("SelectionPrintPages", QVariant(value)); }

inline grproLib::tagGRSheetPages IGRPrinter::SheetPages() const
{
    QVariant qax_result = property("SheetPages");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSheetPages*)qax_result.constData();
}
inline void IGRPrinter::SetSheetPages(grproLib::tagGRSheetPages value){ setProperty("SheetPages", QVariant(value)); }

inline int IGRPrinter::SheetPaperSize() const
{
    QVariant qax_result = property("SheetPaperSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrinter::SetSheetPaperSize(int value){ setProperty("SheetPaperSize", QVariant(value)); }

inline bool IGRPrinter::SupportCustomPaper() const
{
    QVariant qax_result = property("SupportCustomPaper");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IGRPrinter::TopMargin() const
{
    QVariant qax_result = property("TopMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRPrinter::SetTopMargin(double value){ setProperty("TopMargin", QVariant(value)); }

inline int IGRPrinter::_CurPageNo() const
{
    QVariant qax_result = property("_CurPageNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrinter::set_CurPageNo(int value){ setProperty("_CurPageNo", QVariant(value)); }

inline uint IGRPrinter::_PrinterDC() const
{
    QVariant qax_result = property("_PrinterDC");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint IGRPrinter::_PrinterHandle() const
{
    QVariant qax_result = property("_PrinterHandle");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline bool IGRPrinter::EndDocPrinter()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IGRPrinter::EndPagePrinter()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IGRPrinter::PageSetupDialog()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool IGRPrinter::PrintDialog()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IGRPrinter::PrinterSetupDialog()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IGRPrinter::StartDocPrinter(const QString& DocTitle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DocTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool IGRPrinter::StartPagePrinter()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IGRPrinter::WritePrinter(uint& pDataBuf, int DataLen)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pDataBuf, (void*)&DataLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void IGRPrinter::_ClosePrinter()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void IGRPrinter::_OpenPrinter()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}


inline int IGRImageList::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IGRImageList::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRImageList::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline int IGRImageList::Add(stdole::IPicture* pPicture)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPicture};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IGRImageList::AddFromFile(const QString& PathFile)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IGRImageList::AddFromMemory(uint& pData, int ByteCount)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pData, (void*)&ByteCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IGRImageList::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline stdole::IPicture* IGRImageList::Item(int Index)
{
    stdole::IPicture* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_result);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_result);
#endif
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IGRImageList::Remove(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRImageList::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRImageList::_GRAdd(grproLib::IGRPicture* pPicture)
{
    void *_a[] = {0, (void*)&pPicture};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline grproLib::IGRPicture* IGRImageList::_GRItem(int Index)
{
    grproLib::IGRPicture* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_result);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IGRImageList::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRImageList::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline int IGRGraphics::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRGraphics::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRGraphics::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRGraphics::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IGRGraphics::Arc(int cx, int cy, int r, double BeginAngleDegree, double EndAngleDegree)
{
    void *_a[] = {0, (void*)&cx, (void*)&cy, (void*)&r, (void*)&BeginAngleDegree, (void*)&EndAngleDegree};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRGraphics::DrawOrientationString(const QString& String, int x, int y, int Width, int Height, grproLib::tagGRTextOrientation TextOrientation, bool WordWrap, int CharacterSpacing, int LineSpacing)
{
    void *_a[] = {0, (void*)&String, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&TextOrientation, (void*)&WordWrap, (void*)&CharacterSpacing, (void*)&LineSpacing};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRGraphics::DrawRotationString(const QString& String, int x, int y, int Width, int Height, double TextAngle)
{
    void *_a[] = {0, (void*)&String, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&TextAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRGraphics::DrawSpacedString(const QString& String, int x, int y, int Width, int Height, grproLib::tagGRTextAlign TextAlign, bool WordWrap, int CharacterSpacing, int LineSpacing)
{
    void *_a[] = {0, (void*)&String, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&TextAlign, (void*)&WordWrap, (void*)&CharacterSpacing, (void*)&LineSpacing};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRGraphics::DrawString(const QString& String, int x, int y, int Width, int Height, grproLib::tagGRTextAlign TextAlign, bool WordWrap, bool EndEllipsis, bool Underline)
{
    void *_a[] = {0, (void*)&String, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&TextAlign, (void*)&WordWrap, (void*)&EndEllipsis, (void*)&Underline};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRGraphics::Ellipse(int x, int y, int Width, int Height, bool ToFill)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&ToFill};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IGRGraphics::EllipseArc(int Left, int Top, int Width, int Height, double BeginAngleDegree, double EndAngleDegree)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&BeginAngleDegree, (void*)&EndAngleDegree};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IGRGraphics::EllipsePie(int Left, int Top, int Width, int Height, double BeginAngleDegree, double EndAngleDegree, bool ToFill)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Width, (void*)&Height, (void*)&BeginAngleDegree, (void*)&EndAngleDegree, (void*)&ToFill};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IGRGraphics::FillRect(int x, int y, int Width, int Height, const QColor& FillColor)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&FillColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QFont IGRGraphics::FontClone()
{
    QFont qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IGRGraphics::FontPointChangeTo(double Point)
{
    void *_a[] = {0, (void*)&Point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IGRGraphics::FontPointRestore()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRGraphics::LineTo(int x, int y)
{
    void *_a[] = {0, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IGRGraphics::MoveTo(int x, int y)
{
    void *_a[] = {0, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRGraphics::OutRotateString(const QString& String, int x, int y, double RotateDegree)
{
    void *_a[] = {0, (void*)&String, (void*)&x, (void*)&y, (void*)&RotateDegree};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRGraphics::OutString(const QString& String, int x, int y)
{
    void *_a[] = {0, (void*)&String, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline int IGRGraphics::OutStringCalcHeight(const QString& String)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&String};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int IGRGraphics::OutStringCalcWidth(const QString& String)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&String};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IGRGraphics::Pie(int x, int y, int r, double BeginAngleDegree, double EndAngleDegree, bool ToFill)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&r, (void*)&BeginAngleDegree, (void*)&EndAngleDegree, (void*)&ToFill};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IGRGraphics::PopClipRect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IGRGraphics::PushClipRect(int x, int y, int Width, int Height)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IGRGraphics::Rectangle(int x, int y, int Width, int Height, bool ToFill)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&ToFill};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IGRGraphics::RestoreFillColor()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IGRGraphics::RestoreFont()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IGRGraphics::RestorePen()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IGRGraphics::RestoreTextColor()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IGRGraphics::RoundRect(int x, int y, int Width, int Height, int cornerx, int cornery, bool ToFill)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&Width, (void*)&Height, (void*)&cornerx, (void*)&cornery, (void*)&ToFill};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IGRGraphics::SelectFillColor(const QColor& BrushColor)
{
    void *_a[] = {0, (void*)&BrushColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IGRGraphics::SelectFont(const QFont& pFont)
{
    void *_a[] = {0, (void*)&pFont};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IGRGraphics::SelectPen(double PenWidth, const QColor& PenColor, grproLib::tagGRPenStyle PenStyle)
{
    void *_a[] = {0, (void*)&PenWidth, (void*)&PenColor, (void*)&PenStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void IGRGraphics::SelectTextColor(const QColor& TextColor)
{
    void *_a[] = {0, (void*)&TextColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}


inline bool IGRExportOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRExportOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRExportOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRExportOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRExportOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRExportOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRExportOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRExportOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRExportOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRExportOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRExportOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline grproLib::tagGRExportType IGRExportOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRExportOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRExportOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRExportOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRExportOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRExportOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRExportOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRExportOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRExportOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRExportOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRExportOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRExportOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void IGRExportOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline bool IGRE2XLSOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2XLSOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2XLSOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2XLSOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2XLSOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2XLSOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2XLSOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2XLSOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2XLSOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline bool IGRE2XLSOption::ColumnAsDetailGrid() const
{
    QVariant qax_result = property("ColumnAsDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetColumnAsDetailGrid(bool value){ setProperty("ColumnAsDetailGrid", QVariant(value)); }

inline bool IGRE2XLSOption::ExpandRowHeight() const
{
    QVariant qax_result = property("ExpandRowHeight");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetExpandRowHeight(bool value){ setProperty("ExpandRowHeight", QVariant(value)); }

inline bool IGRE2XLSOption::ExportPageBreak() const
{
    QVariant qax_result = property("ExportPageBreak");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetExportPageBreak(bool value){ setProperty("ExportPageBreak", QVariant(value)); }

inline bool IGRE2XLSOption::ExportPageHeaderFooter() const
{
    QVariant qax_result = property("ExportPageHeaderFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetExportPageHeaderFooter(bool value){ setProperty("ExportPageHeaderFooter", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2XLSOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2XLSOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2XLSOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2XLSOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2XLSOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2XLSOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2XLSOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2XLSOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2XLSOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2XLSOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline int IGRE2XLSOption::MinColumnWidth() const
{
    QVariant qax_result = property("MinColumnWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRE2XLSOption::SetMinColumnWidth(int value){ setProperty("MinColumnWidth", QVariant(value)); }

inline int IGRE2XLSOption::MinRowHeight() const
{
    QVariant qax_result = property("MinRowHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRE2XLSOption::SetMinRowHeight(int value){ setProperty("MinRowHeight", QVariant(value)); }

inline bool IGRE2XLSOption::OnlyExportDetailGrid() const
{
    QVariant qax_result = property("OnlyExportDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetOnlyExportDetailGrid(bool value){ setProperty("OnlyExportDetailGrid", QVariant(value)); }

inline bool IGRE2XLSOption::OnlyExportPureText() const
{
    QVariant qax_result = property("OnlyExportPureText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetOnlyExportPureText(bool value){ setProperty("OnlyExportPureText", QVariant(value)); }

inline bool IGRE2XLSOption::SameAsPrint() const
{
    QVariant qax_result = property("SameAsPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetSameAsPrint(bool value){ setProperty("SameAsPrint", QVariant(value)); }

inline bool IGRE2XLSOption::SupressEmptyLines() const
{
    QVariant qax_result = property("SupressEmptyLines");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2XLSOption::SetSupressEmptyLines(bool value){ setProperty("SupressEmptyLines", QVariant(value)); }

inline bool IGRE2XLSOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IGRE2XLSOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}


inline bool IGRE2CellOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2CellOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2CellOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2CellOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2CellOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2CellOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2CellOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2CellOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2CellOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline bool IGRE2CellOption::ColumnAsDetailGrid() const
{
    QVariant qax_result = property("ColumnAsDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetColumnAsDetailGrid(bool value){ setProperty("ColumnAsDetailGrid", QVariant(value)); }

inline bool IGRE2CellOption::ExportPageBreak() const
{
    QVariant qax_result = property("ExportPageBreak");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetExportPageBreak(bool value){ setProperty("ExportPageBreak", QVariant(value)); }

inline bool IGRE2CellOption::ExportPageHeaderFooter() const
{
    QVariant qax_result = property("ExportPageHeaderFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetExportPageHeaderFooter(bool value){ setProperty("ExportPageHeaderFooter", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2CellOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2CellOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CellOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2CellOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2CellOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CellOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2CellOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CellOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2CellOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CellOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRE2CellOption::OnlyExportDetailGrid() const
{
    QVariant qax_result = property("OnlyExportDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetOnlyExportDetailGrid(bool value){ setProperty("OnlyExportDetailGrid", QVariant(value)); }

inline bool IGRE2CellOption::OnlyExportPureText() const
{
    QVariant qax_result = property("OnlyExportPureText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetOnlyExportPureText(bool value){ setProperty("OnlyExportPureText", QVariant(value)); }

inline bool IGRE2CellOption::SameAsPrint() const
{
    QVariant qax_result = property("SameAsPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetSameAsPrint(bool value){ setProperty("SameAsPrint", QVariant(value)); }

inline bool IGRE2CellOption::SupressEmptyLines() const
{
    QVariant qax_result = property("SupressEmptyLines");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CellOption::SetSupressEmptyLines(bool value){ setProperty("SupressEmptyLines", QVariant(value)); }

inline bool IGRE2CellOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void IGRE2CellOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}


inline bool IGRE2TXTOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2TXTOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2TXTOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2TXTOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2TXTOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2TXTOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2TXTOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2TXTOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2TXTOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline bool IGRE2TXTOption::ColumnAsDetailGrid() const
{
    QVariant qax_result = property("ColumnAsDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetColumnAsDetailGrid(bool value){ setProperty("ColumnAsDetailGrid", QVariant(value)); }

inline bool IGRE2TXTOption::ExportPageBreak() const
{
    QVariant qax_result = property("ExportPageBreak");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetExportPageBreak(bool value){ setProperty("ExportPageBreak", QVariant(value)); }

inline bool IGRE2TXTOption::ExportPageHeaderFooter() const
{
    QVariant qax_result = property("ExportPageHeaderFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetExportPageHeaderFooter(bool value){ setProperty("ExportPageHeaderFooter", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2TXTOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2TXTOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2TXTOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2TXTOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2TXTOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2TXTOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2TXTOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2TXTOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2TXTOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2TXTOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRE2TXTOption::OnlyExportDetailGrid() const
{
    QVariant qax_result = property("OnlyExportDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetOnlyExportDetailGrid(bool value){ setProperty("OnlyExportDetailGrid", QVariant(value)); }

inline bool IGRE2TXTOption::OnlyExportPureText() const
{
    QVariant qax_result = property("OnlyExportPureText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetOnlyExportPureText(bool value){ setProperty("OnlyExportPureText", QVariant(value)); }

inline bool IGRE2TXTOption::SameAsPrint() const
{
    QVariant qax_result = property("SameAsPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetSameAsPrint(bool value){ setProperty("SameAsPrint", QVariant(value)); }

inline bool IGRE2TXTOption::SupressEmptyLines() const
{
    QVariant qax_result = property("SupressEmptyLines");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetSupressEmptyLines(bool value){ setProperty("SupressEmptyLines", QVariant(value)); }

inline grproLib::tagGRTextEncodeMode IGRE2TXTOption::TextEncode() const
{
    QVariant qax_result = property("TextEncode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextEncodeMode*)qax_result.constData();
}
inline void IGRE2TXTOption::SetTextEncode(grproLib::tagGRTextEncodeMode value){ setProperty("TextEncode", QVariant(value)); }

inline bool IGRE2TXTOption::UsingCNGraphChar() const
{
    QVariant qax_result = property("UsingCNGraphChar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetUsingCNGraphChar(bool value){ setProperty("UsingCNGraphChar", QVariant(value)); }

inline bool IGRE2TXTOption::UsingTabChar() const
{
    QVariant qax_result = property("UsingTabChar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetUsingTabChar(bool value){ setProperty("UsingTabChar", QVariant(value)); }

inline bool IGRE2TXTOption::WriteDetailGridLine() const
{
    QVariant qax_result = property("WriteDetailGridLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2TXTOption::SetWriteDetailGridLine(bool value){ setProperty("WriteDetailGridLine", QVariant(value)); }

inline bool IGRE2TXTOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IGRE2TXTOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline bool IGRE2HTMOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2HTMOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2HTMOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2HTMOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2HTMOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2HTMOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2HTMOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2HTMOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2HTMOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline bool IGRE2HTMOption::ColumnAsDetailGrid() const
{
    QVariant qax_result = property("ColumnAsDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetColumnAsDetailGrid(bool value){ setProperty("ColumnAsDetailGrid", QVariant(value)); }

inline bool IGRE2HTMOption::ExportPageBreak() const
{
    QVariant qax_result = property("ExportPageBreak");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetExportPageBreak(bool value){ setProperty("ExportPageBreak", QVariant(value)); }

inline bool IGRE2HTMOption::ExportPageHeaderFooter() const
{
    QVariant qax_result = property("ExportPageHeaderFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetExportPageHeaderFooter(bool value){ setProperty("ExportPageHeaderFooter", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2HTMOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2HTMOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2HTMOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2HTMOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2HTMOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2HTMOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2HTMOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2HTMOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2HTMOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2HTMOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRE2HTMOption::MultiPage() const
{
    QVariant qax_result = property("MultiPage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetMultiPage(bool value){ setProperty("MultiPage", QVariant(value)); }

inline bool IGRE2HTMOption::OnlyExportDetailGrid() const
{
    QVariant qax_result = property("OnlyExportDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetOnlyExportDetailGrid(bool value){ setProperty("OnlyExportDetailGrid", QVariant(value)); }

inline bool IGRE2HTMOption::OnlyExportPureText() const
{
    QVariant qax_result = property("OnlyExportPureText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetOnlyExportPureText(bool value){ setProperty("OnlyExportPureText", QVariant(value)); }

inline QString IGRE2HTMOption::PicturePath() const
{
    QVariant qax_result = property("PicturePath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2HTMOption::SetPicturePath(const QString& value){ setProperty("PicturePath", QVariant(value)); }

inline bool IGRE2HTMOption::SameAsPrint() const
{
    QVariant qax_result = property("SameAsPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetSameAsPrint(bool value){ setProperty("SameAsPrint", QVariant(value)); }

inline bool IGRE2HTMOption::ShowNavLink() const
{
    QVariant qax_result = property("ShowNavLink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetShowNavLink(bool value){ setProperty("ShowNavLink", QVariant(value)); }

inline bool IGRE2HTMOption::SupressEmptyLines() const
{
    QVariant qax_result = property("SupressEmptyLines");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2HTMOption::SetSupressEmptyLines(bool value){ setProperty("SupressEmptyLines", QVariant(value)); }

inline QString IGRE2HTMOption::Title() const
{
    QVariant qax_result = property("Title");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2HTMOption::SetTitle(const QString& value){ setProperty("Title", QVariant(value)); }

inline bool IGRE2HTMOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IGRE2HTMOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline bool IGRE2RTFOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2RTFOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2RTFOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2RTFOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2RTFOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2RTFOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2RTFOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2RTFOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2RTFOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline QString IGRE2RTFOption::Author() const
{
    QVariant qax_result = property("Author");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2RTFOption::SetAuthor(const QString& value){ setProperty("Author", QVariant(value)); }

inline bool IGRE2RTFOption::ColumnAsDetailGrid() const
{
    QVariant qax_result = property("ColumnAsDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetColumnAsDetailGrid(bool value){ setProperty("ColumnAsDetailGrid", QVariant(value)); }

inline QString IGRE2RTFOption::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2RTFOption::SetCreator(const QString& value){ setProperty("Creator", QVariant(value)); }

inline bool IGRE2RTFOption::ExportPageBreak() const
{
    QVariant qax_result = property("ExportPageBreak");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetExportPageBreak(bool value){ setProperty("ExportPageBreak", QVariant(value)); }

inline bool IGRE2RTFOption::ExportPageHeaderFooter() const
{
    QVariant qax_result = property("ExportPageHeaderFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetExportPageHeaderFooter(bool value){ setProperty("ExportPageHeaderFooter", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2RTFOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2RTFOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2RTFOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2RTFOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2RTFOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2RTFOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2RTFOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2RTFOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2RTFOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2RTFOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRE2RTFOption::OnlyExportDetailGrid() const
{
    QVariant qax_result = property("OnlyExportDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetOnlyExportDetailGrid(bool value){ setProperty("OnlyExportDetailGrid", QVariant(value)); }

inline bool IGRE2RTFOption::OnlyExportPureText() const
{
    QVariant qax_result = property("OnlyExportPureText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetOnlyExportPureText(bool value){ setProperty("OnlyExportPureText", QVariant(value)); }

inline bool IGRE2RTFOption::SameAsPrint() const
{
    QVariant qax_result = property("SameAsPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetSameAsPrint(bool value){ setProperty("SameAsPrint", QVariant(value)); }

inline bool IGRE2RTFOption::SupressEmptyLines() const
{
    QVariant qax_result = property("SupressEmptyLines");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2RTFOption::SetSupressEmptyLines(bool value){ setProperty("SupressEmptyLines", QVariant(value)); }

inline bool IGRE2RTFOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void IGRE2RTFOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}


inline bool IGRE2PDFOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2PDFOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2PDFOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2PDFOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline bool IGRE2PDFOption::AnsiTextMode() const
{
    QVariant qax_result = property("AnsiTextMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2PDFOption::SetAnsiTextMode(bool value){ setProperty("AnsiTextMode", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2PDFOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2PDFOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2PDFOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2PDFOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2PDFOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2PDFOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2PDFOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline QString IGRE2PDFOption::Author() const
{
    QVariant qax_result = property("Author");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetAuthor(const QString& value){ setProperty("Author", QVariant(value)); }

inline QString IGRE2PDFOption::Creator() const
{
    QVariant qax_result = property("Creator");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetCreator(const QString& value){ setProperty("Creator", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2PDFOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2PDFOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2PDFOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2PDFOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2PDFOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2PDFOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2PDFOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline QString IGRE2PDFOption::Subject() const
{
    QVariant qax_result = property("Subject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2PDFOption::SetSubject(const QString& value){ setProperty("Subject", QVariant(value)); }

inline bool IGRE2PDFOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void IGRE2PDFOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline bool IGRE2CSVOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2CSVOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2CSVOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2CSVOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2CSVOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2CSVOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2CSVOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2CSVOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2CSVOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline bool IGRE2CSVOption::ColumnAsDetailGrid() const
{
    QVariant qax_result = property("ColumnAsDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetColumnAsDetailGrid(bool value){ setProperty("ColumnAsDetailGrid", QVariant(value)); }

inline int IGRE2CSVOption::DelimiterChar() const
{
    QVariant qax_result = property("DelimiterChar");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRE2CSVOption::SetDelimiterChar(int value){ setProperty("DelimiterChar", QVariant(value)); }

inline bool IGRE2CSVOption::ExportPageBreak() const
{
    QVariant qax_result = property("ExportPageBreak");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetExportPageBreak(bool value){ setProperty("ExportPageBreak", QVariant(value)); }

inline bool IGRE2CSVOption::ExportPageHeaderFooter() const
{
    QVariant qax_result = property("ExportPageHeaderFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetExportPageHeaderFooter(bool value){ setProperty("ExportPageHeaderFooter", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2CSVOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2CSVOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CSVOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline bool IGRE2CSVOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2CSVOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CSVOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2CSVOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CSVOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2CSVOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CSVOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRE2CSVOption::OnlyExportDetailGrid() const
{
    QVariant qax_result = property("OnlyExportDetailGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetOnlyExportDetailGrid(bool value){ setProperty("OnlyExportDetailGrid", QVariant(value)); }

inline bool IGRE2CSVOption::OnlyExportPureText() const
{
    QVariant qax_result = property("OnlyExportPureText");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetOnlyExportPureText(bool value){ setProperty("OnlyExportPureText", QVariant(value)); }

inline QString IGRE2CSVOption::QuoteText() const
{
    QVariant qax_result = property("QuoteText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2CSVOption::SetQuoteText(const QString& value){ setProperty("QuoteText", QVariant(value)); }

inline bool IGRE2CSVOption::SameAsPrint() const
{
    QVariant qax_result = property("SameAsPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetSameAsPrint(bool value){ setProperty("SameAsPrint", QVariant(value)); }

inline bool IGRE2CSVOption::SupressEmptyLines() const
{
    QVariant qax_result = property("SupressEmptyLines");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2CSVOption::SetSupressEmptyLines(bool value){ setProperty("SupressEmptyLines", QVariant(value)); }

inline bool IGRE2CSVOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void IGRE2CSVOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}


inline bool IGRE2IMGOption::AbortOpenFile() const
{
    QVariant qax_result = property("AbortOpenFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2IMGOption::SetAbortOpenFile(bool value){ setProperty("AbortOpenFile", QVariant(value)); }

inline bool IGRE2IMGOption::AbortShowOptionDlg() const
{
    QVariant qax_result = property("AbortShowOptionDlg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2IMGOption::SetAbortShowOptionDlg(bool value){ setProperty("AbortShowOptionDlg", QVariant(value)); }

inline grproLib::IGRE2CSVOption* IGRE2IMGOption::AsE2CSVOption() const
{
    grproLib::IGRE2CSVOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2CSVOption*>("IGRE2CSVOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2CSVOption>("IGRE2CSVOption", qax_pointer);
    QVariant qax_result = property("AsE2CSVOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2CSVOption**)qax_result.constData();
}

inline grproLib::IGRE2HTMOption* IGRE2IMGOption::AsE2HTMOption() const
{
    grproLib::IGRE2HTMOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2HTMOption*>("IGRE2HTMOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2HTMOption>("IGRE2HTMOption", qax_pointer);
    QVariant qax_result = property("AsE2HTMOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2HTMOption**)qax_result.constData();
}

inline grproLib::IGRE2IMGOption* IGRE2IMGOption::AsE2IMGOption() const
{
    grproLib::IGRE2IMGOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2IMGOption*>("IGRE2IMGOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2IMGOption>("IGRE2IMGOption", qax_pointer);
    QVariant qax_result = property("AsE2IMGOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2IMGOption**)qax_result.constData();
}

inline grproLib::IGRE2PDFOption* IGRE2IMGOption::AsE2PDFOption() const
{
    grproLib::IGRE2PDFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2PDFOption*>("IGRE2PDFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2PDFOption>("IGRE2PDFOption", qax_pointer);
    QVariant qax_result = property("AsE2PDFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2PDFOption**)qax_result.constData();
}

inline grproLib::IGRE2RTFOption* IGRE2IMGOption::AsE2RTFOption() const
{
    grproLib::IGRE2RTFOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2RTFOption*>("IGRE2RTFOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2RTFOption>("IGRE2RTFOption", qax_pointer);
    QVariant qax_result = property("AsE2RTFOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2RTFOption**)qax_result.constData();
}

inline grproLib::IGRE2TXTOption* IGRE2IMGOption::AsE2TXTOption() const
{
    grproLib::IGRE2TXTOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2TXTOption*>("IGRE2TXTOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2TXTOption>("IGRE2TXTOption", qax_pointer);
    QVariant qax_result = property("AsE2TXTOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2TXTOption**)qax_result.constData();
}

inline grproLib::IGRE2XLSOption* IGRE2IMGOption::AsE2XLSOption() const
{
    grproLib::IGRE2XLSOption* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRE2XLSOption*>("IGRE2XLSOption*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRE2XLSOption>("IGRE2XLSOption", qax_pointer);
    QVariant qax_result = property("AsE2XLSOption");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRE2XLSOption**)qax_result.constData();
}

inline int IGRE2IMGOption::DPI() const
{
    QVariant qax_result = property("DPI");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRE2IMGOption::SetDPI(int value){ setProperty("DPI", QVariant(value)); }

inline grproLib::tagGRExportType IGRE2IMGOption::ExportType() const
{
    QVariant qax_result = property("ExportType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportType*)qax_result.constData();
}

inline QString IGRE2IMGOption::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2IMGOption::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline grproLib::tagGRExportImageType IGRE2IMGOption::ImageType() const
{
    QVariant qax_result = property("ImageType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRExportImageType*)qax_result.constData();
}
inline void IGRE2IMGOption::SetImageType(grproLib::tagGRExportImageType value){ setProperty("ImageType", QVariant(value)); }

inline bool IGRE2IMGOption::MailExportFile() const
{
    QVariant qax_result = property("MailExportFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRE2IMGOption::SetMailExportFile(bool value){ setProperty("MailExportFile", QVariant(value)); }

inline QString IGRE2IMGOption::MailSubject() const
{
    QVariant qax_result = property("MailSubject");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2IMGOption::SetMailSubject(const QString& value){ setProperty("MailSubject", QVariant(value)); }

inline QString IGRE2IMGOption::MailText() const
{
    QVariant qax_result = property("MailText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2IMGOption::SetMailText(const QString& value){ setProperty("MailText", QVariant(value)); }

inline QString IGRE2IMGOption::MailTo() const
{
    QVariant qax_result = property("MailTo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRE2IMGOption::SetMailTo(const QString& value){ setProperty("MailTo", QVariant(value)); }

inline bool IGRE2IMGOption::ShowOptionDlg()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IGRE2IMGOption::_GetFileTextResID(uint& pExtFileNameID, uint& pExtFileDescID)
{
    void *_a[] = {0, (void*)&pExtFileNameID, (void*)&pExtFileDescID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}


inline double IGRSharePrintSetupObject::BottomMargin() const
{
    QVariant qax_result = property("BottomMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetBottomMargin(double value){ setProperty("BottomMargin", QVariant(value)); }

inline double IGRSharePrintSetupObject::LeftMargin() const
{
    QVariant qax_result = property("LeftMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetLeftMargin(double value){ setProperty("LeftMargin", QVariant(value)); }

inline grproLib::tagGRPaperKind IGRSharePrintSetupObject::PaperKind() const
{
    QVariant qax_result = property("PaperKind");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperKind*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperKind(grproLib::tagGRPaperKind value){ setProperty("PaperKind", QVariant(value)); }

inline double IGRSharePrintSetupObject::PaperLength() const
{
    QVariant qax_result = property("PaperLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperLength(double value){ setProperty("PaperLength", QVariant(value)); }

inline QString IGRSharePrintSetupObject::PaperName() const
{
    QVariant qax_result = property("PaperName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperName(const QString& value){ setProperty("PaperName", QVariant(value)); }

inline grproLib::tagGRPaperOrientation IGRSharePrintSetupObject::PaperOrientation() const
{
    QVariant qax_result = property("PaperOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperOrientation*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperOrientation(grproLib::tagGRPaperOrientation value){ setProperty("PaperOrientation", QVariant(value)); }

inline int IGRSharePrintSetupObject::PaperSize() const
{
    QVariant qax_result = property("PaperSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperSize(int value){ setProperty("PaperSize", QVariant(value)); }

inline grproLib::tagGRPaperSourceKind IGRSharePrintSetupObject::PaperSource() const
{
    QVariant qax_result = property("PaperSource");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperSourceKind*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperSource(grproLib::tagGRPaperSourceKind value){ setProperty("PaperSource", QVariant(value)); }

inline double IGRSharePrintSetupObject::PaperWidth() const
{
    QVariant qax_result = property("PaperWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPaperWidth(double value){ setProperty("PaperWidth", QVariant(value)); }

inline QString IGRSharePrintSetupObject::PrinterName() const
{
    QVariant qax_result = property("PrinterName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetPrinterName(const QString& value){ setProperty("PrinterName", QVariant(value)); }

inline double IGRSharePrintSetupObject::RightMargin() const
{
    QVariant qax_result = property("RightMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetRightMargin(double value){ setProperty("RightMargin", QVariant(value)); }

inline double IGRSharePrintSetupObject::TopMargin() const
{
    QVariant qax_result = property("TopMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetTopMargin(double value){ setProperty("TopMargin", QVariant(value)); }

inline grproLib::tagGRUnit IGRSharePrintSetupObject::Unit() const
{
    QVariant qax_result = property("Unit");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRUnit*)qax_result.constData();
}
inline void IGRSharePrintSetupObject::SetUnit(grproLib::tagGRUnit value){ setProperty("Unit", QVariant(value)); }

inline bool IGRSharePrintSetupObject::PageSetupDialog()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IGRSharePrintSetupObject::PrintDialog()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IGRSharePrintSetupObject::PrinterSetupDialog()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline QString IGRLine::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRLine::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRLine::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRLine::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRLine::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRLine::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRLine::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRLine::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRLine::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRLine::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRLine::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRLine::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRLine::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRLine::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRLine::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRLine::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRLine::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRLine::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRLine::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRLine::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRLine::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRLine::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRLine::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRLine::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRLine::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline QColor IGRLine::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRLine::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRLine::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRLine::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRLine::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRLine::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRLine::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline grproLib::tagGRControlType IGRLine::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRLine::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRLine::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRLine::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRLine::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRLine::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRLine::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRLine::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRLine::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline grproLib::IGRFont* IGRLine::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRLine::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRLine::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRLine::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRLine::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRLine::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRLine::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRLine::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRLine::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRLine::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRLine::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline IUnknown* IGRLine::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QColor IGRLine::PenColor() const
{
    QVariant qax_result = property("PenColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRLine::SetPenColor(const QColor& value){ setProperty("PenColor", QVariant(value)); }

inline grproLib::tagGRPenStyle IGRLine::PenStyle() const
{
    QVariant qax_result = property("PenStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPenStyle*)qax_result.constData();
}
inline void IGRLine::SetPenStyle(grproLib::tagGRPenStyle value){ setProperty("PenStyle", QVariant(value)); }

inline double IGRLine::PenWidth() const
{
    QVariant qax_result = property("PenWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetPenWidth(double value){ setProperty("PenWidth", QVariant(value)); }

inline grproLib::tagGRPrintType IGRLine::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRLine::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline QString IGRLine::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRLine::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline double IGRLine::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRLine::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRLine::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRLine::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline double IGRLine::X1() const
{
    QVariant qax_result = property("X1");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetX1(double value){ setProperty("X1", QVariant(value)); }

inline double IGRLine::X2() const
{
    QVariant qax_result = property("X2");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetX2(double value){ setProperty("X2", QVariant(value)); }

inline double IGRLine::Y1() const
{
    QVariant qax_result = property("Y1");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetY1(double value){ setProperty("Y1", QVariant(value)); }

inline double IGRLine::Y2() const
{
    QVariant qax_result = property("Y2");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRLine::SetY2(double value){ setProperty("Y2", QVariant(value)); }

inline int IGRLine::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRLine::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRLine::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRLine::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRLine::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRLine::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRLine::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRLine::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRLine::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void IGRLine::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IGRLine::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IGRLine::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}


inline QString IGRBarcode::AlignColumn() const
{
    QVariant qax_result = property("AlignColumn");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetAlignColumn(const QString& value){ setProperty("AlignColumn", QVariant(value)); }

inline QString IGRBarcode::AlignColumnEx() const
{
    QVariant qax_result = property("AlignColumnEx");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetAlignColumnEx(const QString& value){ setProperty("AlignColumnEx", QVariant(value)); }

inline grproLib::tagGRAlignColumnSideStyle IGRBarcode::AlignColumnSide() const
{
    QVariant qax_result = property("AlignColumnSide");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAlignColumnSideStyle*)qax_result.constData();
}
inline void IGRBarcode::SetAlignColumnSide(grproLib::tagGRAlignColumnSideStyle value){ setProperty("AlignColumnSide", QVariant(value)); }

inline grproLib::tagGRStringAlignment IGRBarcode::Alignment() const
{
    QVariant qax_result = property("Alignment");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRStringAlignment*)qax_result.constData();
}
inline void IGRBarcode::SetAlignment(grproLib::tagGRStringAlignment value){ setProperty("Alignment", QVariant(value)); }

inline grproLib::tagGRAnchorStyle IGRBarcode::Anchor() const
{
    QVariant qax_result = property("Anchor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRAnchorStyle*)qax_result.constData();
}
inline void IGRBarcode::SetAnchor(grproLib::tagGRAnchorStyle value){ setProperty("Anchor", QVariant(value)); }

inline grproLib::IGRBarcode* IGRBarcode::AsBarcode() const
{
    grproLib::IGRBarcode* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRBarcode*>("IGRBarcode*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRBarcode>("IGRBarcode", qax_pointer);
    QVariant qax_result = property("AsBarcode");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRBarcode**)qax_result.constData();
}

inline grproLib::IGRChart* IGRBarcode::AsChart() const
{
    grproLib::IGRChart* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRChart*>("IGRChart*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRChart>("IGRChart", qax_pointer);
    QVariant qax_result = property("AsChart");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRChart**)qax_result.constData();
}

inline grproLib::IGRFieldBox* IGRBarcode::AsFieldBox() const
{
    grproLib::IGRFieldBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFieldBox*>("IGRFieldBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFieldBox>("IGRFieldBox", qax_pointer);
    QVariant qax_result = property("AsFieldBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFieldBox**)qax_result.constData();
}

inline grproLib::IGRLine* IGRBarcode::AsLine() const
{
    grproLib::IGRLine* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRLine*>("IGRLine*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRLine>("IGRLine", qax_pointer);
    QVariant qax_result = property("AsLine");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRLine**)qax_result.constData();
}

inline grproLib::IGRMemoBox* IGRBarcode::AsMemoBox() const
{
    grproLib::IGRMemoBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRMemoBox*>("IGRMemoBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRMemoBox>("IGRMemoBox", qax_pointer);
    QVariant qax_result = property("AsMemoBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRMemoBox**)qax_result.constData();
}

inline grproLib::IGRPictureBox* IGRBarcode::AsPictureBox() const
{
    grproLib::IGRPictureBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPictureBox*>("IGRPictureBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPictureBox>("IGRPictureBox", qax_pointer);
    QVariant qax_result = property("AsPictureBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPictureBox**)qax_result.constData();
}

inline grproLib::IGRRichTextBox* IGRBarcode::AsRichTextBox() const
{
    grproLib::IGRRichTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRRichTextBox*>("IGRRichTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRRichTextBox>("IGRRichTextBox", qax_pointer);
    QVariant qax_result = property("AsRichTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRRichTextBox**)qax_result.constData();
}

inline grproLib::IGRShapeBox* IGRBarcode::AsShapeBox() const
{
    grproLib::IGRShapeBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRShapeBox*>("IGRShapeBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRShapeBox>("IGRShapeBox", qax_pointer);
    QVariant qax_result = property("AsShapeBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRShapeBox**)qax_result.constData();
}

inline grproLib::IGRStaticBox* IGRBarcode::AsStaticBox() const
{
    grproLib::IGRStaticBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRStaticBox*>("IGRStaticBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRStaticBox>("IGRStaticBox", qax_pointer);
    QVariant qax_result = property("AsStaticBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRStaticBox**)qax_result.constData();
}

inline grproLib::IGRSubReport* IGRBarcode::AsSubReport() const
{
    grproLib::IGRSubReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSubReport*>("IGRSubReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSubReport>("IGRSubReport", qax_pointer);
    QVariant qax_result = property("AsSubReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSubReport**)qax_result.constData();
}

inline grproLib::IGRSummaryBox* IGRBarcode::AsSummaryBox() const
{
    grproLib::IGRSummaryBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSummaryBox*>("IGRSummaryBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSummaryBox>("IGRSummaryBox", qax_pointer);
    QVariant qax_result = property("AsSummaryBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSummaryBox**)qax_result.constData();
}

inline grproLib::IGRSystemVarBox* IGRBarcode::AsSystemVarBox() const
{
    grproLib::IGRSystemVarBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSystemVarBox*>("IGRSystemVarBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSystemVarBox>("IGRSystemVarBox", qax_pointer);
    QVariant qax_result = property("AsSystemVarBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSystemVarBox**)qax_result.constData();
}

inline grproLib::IGRTextBox* IGRBarcode::AsTextBox() const
{
    grproLib::IGRTextBox* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRTextBox*>("IGRTextBox*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRTextBox>("IGRTextBox", qax_pointer);
    QVariant qax_result = property("AsTextBox");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRTextBox**)qax_result.constData();
}

inline QColor IGRBarcode::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRBarcode::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline grproLib::tagGRBackStyle IGRBarcode::BackStyle() const
{
    QVariant qax_result = property("BackStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBackStyle*)qax_result.constData();
}
inline void IGRBarcode::SetBackStyle(grproLib::tagGRBackStyle value){ setProperty("BackStyle", QVariant(value)); }

inline double IGRBarcode::BarRatio() const
{
    QVariant qax_result = property("BarRatio");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetBarRatio(double value){ setProperty("BarRatio", QVariant(value)); }

inline double IGRBarcode::BarWidth() const
{
    QVariant qax_result = property("BarWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetBarWidth(double value){ setProperty("BarWidth", QVariant(value)); }

inline grproLib::tagGRBarcodeType IGRBarcode::BarcodeType() const
{
    QVariant qax_result = property("BarcodeType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBarcodeType*)qax_result.constData();
}
inline void IGRBarcode::SetBarcodeType(grproLib::tagGRBarcodeType value){ setProperty("BarcodeType", QVariant(value)); }

inline QColor IGRBarcode::BorderColor() const
{
    QVariant qax_result = property("BorderColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRBarcode::SetBorderColor(const QColor& value){ setProperty("BorderColor", QVariant(value)); }

inline grproLib::tagGRBorderStyle IGRBarcode::BorderStyles() const
{
    QVariant qax_result = property("BorderStyles");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBorderStyle*)qax_result.constData();
}
inline void IGRBarcode::SetBorderStyles(grproLib::tagGRBorderStyle value){ setProperty("BorderStyles", QVariant(value)); }

inline double IGRBarcode::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline grproLib::tagGRBarcodeCaptionPosition IGRBarcode::CaptionPosition() const
{
    QVariant qax_result = property("CaptionPosition");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBarcodeCaptionPosition*)qax_result.constData();
}
inline void IGRBarcode::SetCaptionPosition(grproLib::tagGRBarcodeCaptionPosition value){ setProperty("CaptionPosition", QVariant(value)); }

inline grproLib::tagGRCenterStyle IGRBarcode::Center() const
{
    QVariant qax_result = property("Center");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCenterStyle*)qax_result.constData();
}
inline void IGRBarcode::SetCenter(grproLib::tagGRCenterStyle value){ setProperty("Center", QVariant(value)); }

inline bool IGRBarcode::CheckSum() const
{
    QVariant qax_result = property("CheckSum");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRBarcode::SetCheckSum(bool value){ setProperty("CheckSum", QVariant(value)); }

inline grproLib::tagGRControlType IGRBarcode::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRControlType*)qax_result.constData();
}

inline grproLib::tagGRDisplayCursor IGRBarcode::Cursor() const
{
    QVariant qax_result = property("Cursor");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDisplayCursor*)qax_result.constData();
}
inline void IGRBarcode::SetCursor(grproLib::tagGRDisplayCursor value){ setProperty("Cursor", QVariant(value)); }

inline bool IGRBarcode::CustomDraw() const
{
    QVariant qax_result = property("CustomDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRBarcode::SetCustomDraw(bool value){ setProperty("CustomDraw", QVariant(value)); }

inline QString IGRBarcode::CustomDrawScript() const
{
    QVariant qax_result = property("CustomDrawScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetCustomDrawScript(const QString& value){ setProperty("CustomDrawScript", QVariant(value)); }

inline QString IGRBarcode::DataField() const
{
    QVariant qax_result = property("DataField");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetDataField(const QString& value){ setProperty("DataField", QVariant(value)); }

inline grproLib::tagGRBarcodeDirection IGRBarcode::Direction() const
{
    QVariant qax_result = property("Direction");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRBarcodeDirection*)qax_result.constData();
}
inline void IGRBarcode::SetDirection(grproLib::tagGRBarcodeDirection value){ setProperty("Direction", QVariant(value)); }

inline grproLib::tagGRDockStyle IGRBarcode::Dock() const
{
    QVariant qax_result = property("Dock");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDockStyle*)qax_result.constData();
}
inline void IGRBarcode::SetDock(grproLib::tagGRDockStyle value){ setProperty("Dock", QVariant(value)); }

inline grproLib::IGRFont* IGRBarcode::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QColor IGRBarcode::ForeColor() const
{
    QVariant qax_result = property("ForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRBarcode::SetForeColor(const QColor& value){ setProperty("ForeColor", QVariant(value)); }

inline double IGRBarcode::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRBarcode::HyperlinkAuto() const
{
    QVariant qax_result = property("HyperlinkAuto");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRBarcode::SetHyperlinkAuto(bool value){ setProperty("HyperlinkAuto", QVariant(value)); }

inline QString IGRBarcode::HyperlinkText() const
{
    QVariant qax_result = property("HyperlinkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetHyperlinkText(const QString& value){ setProperty("HyperlinkText", QVariant(value)); }

inline double IGRBarcode::Left() const
{
    QVariant qax_result = property("Left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetLeft(double value){ setProperty("Left", QVariant(value)); }

inline QString IGRBarcode::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline int IGRBarcode::PDF417Columns() const
{
    QVariant qax_result = property("PDF417Columns");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRBarcode::SetPDF417Columns(int value){ setProperty("PDF417Columns", QVariant(value)); }

inline int IGRBarcode::PDF417ErrorLevel() const
{
    QVariant qax_result = property("PDF417ErrorLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRBarcode::SetPDF417ErrorLevel(int value){ setProperty("PDF417ErrorLevel", QVariant(value)); }

inline int IGRBarcode::PDF417Rows() const
{
    QVariant qax_result = property("PDF417Rows");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRBarcode::SetPDF417Rows(int value){ setProperty("PDF417Rows", QVariant(value)); }

inline bool IGRBarcode::PDF417Simple() const
{
    QVariant qax_result = property("PDF417Simple");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRBarcode::SetPDF417Simple(bool value){ setProperty("PDF417Simple", QVariant(value)); }

inline IUnknown* IGRBarcode::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline grproLib::tagGRPrintType IGRBarcode::PrintType() const
{
    QVariant qax_result = property("PrintType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintType*)qax_result.constData();
}
inline void IGRBarcode::SetPrintType(grproLib::tagGRPrintType value){ setProperty("PrintType", QVariant(value)); }

inline int IGRBarcode::QRCodeErrorLevel() const
{
    QVariant qax_result = property("QRCodeErrorLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRBarcode::SetQRCodeErrorLevel(int value){ setProperty("QRCodeErrorLevel", QVariant(value)); }

inline int IGRBarcode::QRCodeMask() const
{
    QVariant qax_result = property("QRCodeMask");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRBarcode::SetQRCodeMask(int value){ setProperty("QRCodeMask", QVariant(value)); }

inline int IGRBarcode::QRCodeVersion() const
{
    QVariant qax_result = property("QRCodeVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRBarcode::SetQRCodeVersion(int value){ setProperty("QRCodeVersion", QVariant(value)); }

inline QString IGRBarcode::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IGRBarcode::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRBarcode::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline double IGRBarcode::Top() const
{
    QVariant qax_result = property("Top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetTop(double value){ setProperty("Top", QVariant(value)); }

inline bool IGRBarcode::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRBarcode::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IGRBarcode::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRBarcode::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline int IGRBarcode::_CursorHandle() const
{
    QVariant qax_result = property("_CursorHandle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QColor IGRBarcode::_RealViewBackColor() const
{
    QVariant qax_result = property("_RealViewBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}

inline void IGRBarcode::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRBarcode::BringToFront()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IGRBarcode::DrawDefault()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IGRBarcode::LoadCursorFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IGRBarcode::SendToBack()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IGRBarcode::SetBounds(double Left, double Top, double Right, double Bottom)
{
    void *_a[] = {0, (void*)&Left, (void*)&Top, (void*)&Right, (void*)&Bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IGRBarcode::_Draw(int pDrawDevice, int pDrawRect)
{
    void *_a[] = {0, (void*)&pDrawDevice, (void*)&pDrawRect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRBarcode::_HasCustomDrawScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IGRBarcode::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IGRBarcode::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}


inline bool IGRGroupFooter::AppendBlankRowExclude() const
{
    QVariant qax_result = property("AppendBlankRowExclude");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetAppendBlankRowExclude(bool value){ setProperty("AppendBlankRowExclude", QVariant(value)); }

inline QColor IGRGroupFooter::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRGroupFooter::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline QString IGRGroupFooter::BookmarkText() const
{
    QVariant qax_result = property("BookmarkText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupFooter::SetBookmarkText(const QString& value){ setProperty("BookmarkText", QVariant(value)); }

inline bool IGRGroupFooter::CanGrow() const
{
    QVariant qax_result = property("CanGrow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetCanGrow(bool value){ setProperty("CanGrow", QVariant(value)); }

inline bool IGRGroupFooter::CanShrink() const
{
    QVariant qax_result = property("CanShrink");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetCanShrink(bool value){ setProperty("CanShrink", QVariant(value)); }

inline grproLib::IGRControls* IGRGroupFooter::Controls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("Controls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* IGRGroupFooter::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline QString IGRGroupFooter::FormatScript() const
{
    QVariant qax_result = property("FormatScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupFooter::SetFormatScript(const QString& value){ setProperty("FormatScript", QVariant(value)); }

inline grproLib::IGRGroup* IGRGroupFooter::Group() const
{
    grproLib::IGRGroup* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGroup*>("IGRGroup*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGroup>("IGRGroup", qax_pointer);
    QVariant qax_result = property("Group");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGroup**)qax_result.constData();
}

inline bool IGRGroupFooter::HNewPageFixed() const
{
    QVariant qax_result = property("HNewPageFixed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetHNewPageFixed(bool value){ setProperty("HNewPageFixed", QVariant(value)); }

inline double IGRGroupFooter::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IGRGroupFooter::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline bool IGRGroupFooter::KeepTogether() const
{
    QVariant qax_result = property("KeepTogether");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetKeepTogether(bool value){ setProperty("KeepTogether", QVariant(value)); }

inline QString IGRGroupFooter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupFooter::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline grproLib::tagGRNewPageStyle IGRGroupFooter::NewPage() const
{
    QVariant qax_result = property("NewPage");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageStyle*)qax_result.constData();
}
inline void IGRGroupFooter::SetNewPage(grproLib::tagGRNewPageStyle value){ setProperty("NewPage", QVariant(value)); }

inline grproLib::tagGRNewPageColumnStyle IGRGroupFooter::NewPageColumn() const
{
    QVariant qax_result = property("NewPageColumn");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRNewPageColumnStyle*)qax_result.constData();
}
inline void IGRGroupFooter::SetNewPageColumn(grproLib::tagGRNewPageColumnStyle value){ setProperty("NewPageColumn", QVariant(value)); }

inline IUnknown* IGRGroupFooter::Parent() const
{
    QVariant qax_result = property("Parent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IGRGroupFooter::PrintAtBottom() const
{
    QVariant qax_result = property("PrintAtBottom");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetPrintAtBottom(bool value){ setProperty("PrintAtBottom", QVariant(value)); }

inline bool IGRGroupFooter::PrintGridBorder() const
{
    QVariant qax_result = property("PrintGridBorder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetPrintGridBorder(bool value){ setProperty("PrintGridBorder", QVariant(value)); }

inline grproLib::tagGRSectionType IGRGroupFooter::SectionType() const
{
    QVariant qax_result = property("SectionType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRSectionType*)qax_result.constData();
}

inline QString IGRGroupFooter::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRGroupFooter::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline bool IGRGroupFooter::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRGroupFooter::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline void IGRGroupFooter::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IGRGroupFooter::_HasSectionFormatScript()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IGRGroupFooter::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IGRGroupFooter::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline grproLib::IGRObject* IGRPrintViewer::BatchReport() const
{
    grproLib::IGRObject* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRObject*>("IGRObject*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRObject>("IGRObject", qax_pointer);
    QVariant qax_result = property("BatchReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRObject**)qax_result.constData();
}
inline void IGRPrintViewer::SetBatchReport(grproLib::IGRObject* value){
    int typeId = qRegisterMetaType<grproLib::IGRObject*>("grproLib::IGRObject*", &value);
    setProperty("BatchReport", QVariant(typeId, &value));
}

inline grproLib::tagGRViewerBorderStyle IGRPrintViewer::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRViewerBorderStyle*)qax_result.constData();
}

inline int IGRPrintViewer::ColPages() const
{
    QVariant qax_result = property("ColPages");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrintViewer::SetColPages(int value){ setProperty("ColPages", QVariant(value)); }

inline int IGRPrintViewer::CurPageNo() const
{
    QVariant qax_result = property("CurPageNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrintViewer::SetCurPageNo(int value){ setProperty("CurPageNo", QVariant(value)); }

inline grproLib::tagGRPreviewEditMode IGRPrintViewer::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPreviewEditMode*)qax_result.constData();
}
inline void IGRPrintViewer::SetEditMode(grproLib::tagGRPreviewEditMode value){ setProperty("EditMode", QVariant(value)); }

inline grproLib::tagGRPrintGenerateStyle IGRPrintViewer::GenerateStyle() const
{
    QVariant qax_result = property("GenerateStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintGenerateStyle*)qax_result.constData();
}
inline void IGRPrintViewer::SetGenerateStyle(grproLib::tagGRPrintGenerateStyle value){ setProperty("GenerateStyle", QVariant(value)); }

inline int IGRPrintViewer::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline grproLib::IGridppReport* IGRPrintViewer::Report() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}
inline void IGRPrintViewer::SetReport(grproLib::IGridppReport* value){
    int typeId = qRegisterMetaType<grproLib::IGridppReport*>("grproLib::IGridppReport*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline int IGRPrintViewer::RowPages() const
{
    QVariant qax_result = property("RowPages");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrintViewer::SetRowPages(int value){ setProperty("RowPages", QVariant(value)); }

inline bool IGRPrintViewer::Running() const
{
    QVariant qax_result = property("Running");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IGRPrintViewer::Searchable() const
{
    QVariant qax_result = property("Searchable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrintViewer::SetSearchable(bool value){ setProperty("Searchable", QVariant(value)); }

inline bool IGRPrintViewer::ShowBookmark() const
{
    QVariant qax_result = property("ShowBookmark");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrintViewer::SetShowBookmark(bool value){ setProperty("ShowBookmark", QVariant(value)); }

inline bool IGRPrintViewer::ShowMarginCorner() const
{
    QVariant qax_result = property("ShowMarginCorner");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrintViewer::SetShowMarginCorner(bool value){ setProperty("ShowMarginCorner", QVariant(value)); }

inline bool IGRPrintViewer::ShowRuler() const
{
    QVariant qax_result = property("ShowRuler");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrintViewer::SetShowRuler(bool value){ setProperty("ShowRuler", QVariant(value)); }

inline bool IGRPrintViewer::ShowToolbar() const
{
    QVariant qax_result = property("ShowToolbar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRPrintViewer::SetShowToolbar(bool value){ setProperty("ShowToolbar", QVariant(value)); }

inline grproLib::tagGRPrintViewMode IGRPrintViewer::ViewMode() const
{
    QVariant qax_result = property("ViewMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintViewMode*)qax_result.constData();
}
inline void IGRPrintViewer::SetViewMode(grproLib::tagGRPrintViewMode value){ setProperty("ViewMode", QVariant(value)); }

inline int IGRPrintViewer::ZoomPercent() const
{
    QVariant qax_result = property("ZoomPercent");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRPrintViewer::SetZoomPercent(int value){ setProperty("ZoomPercent", QVariant(value)); }

inline void IGRPrintViewer::AddToolbarControl(grproLib::tagGRToolControlType ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IGRPrintViewer::AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText)
{
    void *_a[] = {0, (void*)&BtnID, (void*)&BtnFileName, (void*)&TooltipText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IGRPrintViewer::FirstPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IGRPrintViewer::LastPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IGRPrintViewer::LoadFromDocumentFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IGRPrintViewer::NextPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IGRPrintViewer::Print(bool ShowPrintDialog)
{
    void *_a[] = {0, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IGRPrintViewer::PriorPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IGRPrintViewer::QuickRefresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IGRPrintViewer::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IGRPrintViewer::RemoveToolbarControl(grproLib::tagGRToolControlType ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IGRPrintViewer::ResetToolbarContent()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline bool IGRPrintViewer::Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text, (void*)&CaseSensitive, (void*)&WholeWord, (void*)&ToUp, (void*)&FromSelection, (void*)&ShowDlg, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool IGRPrintViewer::SearchAgain(bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline void IGRPrintViewer::SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle)
{
    void *_a[] = {0, (void*)&BorderStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IGRPrintViewer::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IGRPrintViewer::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRPrintViewer::UpdateLanguage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGRPrintViewer::UpdateToolbar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRPrintViewer::ZoomIn()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IGRPrintViewer::ZoomOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IGRPrintViewer::ZoomToFit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IGRPrintViewer::ZoomToHeight()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IGRPrintViewer::ZoomToWidth()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline bool GridppReport::AlignToGrid() const
{
    QVariant qax_result = property("AlignToGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetAlignToGrid(bool value){ setProperty("AlignToGrid", QVariant(value)); }

inline QColor GridppReport::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GridppReport::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline stdole::IPicture* GridppReport::BackImage() const
{
#ifdef QAX_DUMPCPP_STDOLE_H
    stdole::IPicture* qax_pointer = 0;
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_pointer);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_pointer);
    QVariant qax_result = property("BackImage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(stdole::IPicture**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void GridppReport::SetBackImage(stdole::IPicture* value){
//    int typeId = qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &value);
//    setProperty("BackImage", QVariant(typeId, &value));
}

inline QString GridppReport::BackImageFile() const
{
    QVariant qax_result = property("BackImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetBackImageFile(const QString& value){ setProperty("BackImageFile", QVariant(value)); }

inline bool GridppReport::BackImagePreview() const
{
    QVariant qax_result = property("BackImagePreview");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetBackImagePreview(bool value){ setProperty("BackImagePreview", QVariant(value)); }

inline bool GridppReport::BackImagePrint() const
{
    QVariant qax_result = property("BackImagePrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetBackImagePrint(bool value){ setProperty("BackImagePrint", QVariant(value)); }

inline QString GridppReport::BeforeSortScript() const
{
    QVariant qax_result = property("BeforeSortScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetBeforeSortScript(const QString& value){ setProperty("BeforeSortScript", QVariant(value)); }

inline QString GridppReport::ConnectionString() const
{
    QVariant qax_result = property("ConnectionString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetConnectionString(const QString& value){ setProperty("ConnectionString", QVariant(value)); }

inline bool GridppReport::ContinuePrint() const
{
    QVariant qax_result = property("ContinuePrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetContinuePrint(bool value){ setProperty("ContinuePrint", QVariant(value)); }

inline double GridppReport::DesignBottomMargin() const
{
    QVariant qax_result = property("DesignBottomMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetDesignBottomMargin(double value){ setProperty("DesignBottomMargin", QVariant(value)); }

inline double GridppReport::DesignLeftMargin() const
{
    QVariant qax_result = property("DesignLeftMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetDesignLeftMargin(double value){ setProperty("DesignLeftMargin", QVariant(value)); }

inline grproLib::tagGRPaperKind GridppReport::DesignPaperKind() const
{
    QVariant qax_result = property("DesignPaperKind");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperKind*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperKind(grproLib::tagGRPaperKind value){ setProperty("DesignPaperKind", QVariant(value)); }

inline double GridppReport::DesignPaperLength() const
{
    QVariant qax_result = property("DesignPaperLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperLength(double value){ setProperty("DesignPaperLength", QVariant(value)); }

inline QString GridppReport::DesignPaperName() const
{
    QVariant qax_result = property("DesignPaperName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperName(const QString& value){ setProperty("DesignPaperName", QVariant(value)); }

inline grproLib::tagGRPaperOrientation GridppReport::DesignPaperOrientation() const
{
    QVariant qax_result = property("DesignPaperOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperOrientation*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperOrientation(grproLib::tagGRPaperOrientation value){ setProperty("DesignPaperOrientation", QVariant(value)); }

inline int GridppReport::DesignPaperSize() const
{
    QVariant qax_result = property("DesignPaperSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperSize(int value){ setProperty("DesignPaperSize", QVariant(value)); }

inline grproLib::tagGRPaperSourceKind GridppReport::DesignPaperSource() const
{
    QVariant qax_result = property("DesignPaperSource");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPaperSourceKind*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperSource(grproLib::tagGRPaperSourceKind value){ setProperty("DesignPaperSource", QVariant(value)); }

inline double GridppReport::DesignPaperWidth() const
{
    QVariant qax_result = property("DesignPaperWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetDesignPaperWidth(double value){ setProperty("DesignPaperWidth", QVariant(value)); }

inline grproLib::tagGRCollateKind GridppReport::DesignPrintCollate() const
{
    QVariant qax_result = property("DesignPrintCollate");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRCollateKind*)qax_result.constData();
}
inline void GridppReport::SetDesignPrintCollate(grproLib::tagGRCollateKind value){ setProperty("DesignPrintCollate", QVariant(value)); }

inline grproLib::tagGRDuplexKind GridppReport::DesignPrintDuplex() const
{
    QVariant qax_result = property("DesignPrintDuplex");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRDuplexKind*)qax_result.constData();
}
inline void GridppReport::SetDesignPrintDuplex(grproLib::tagGRDuplexKind value){ setProperty("DesignPrintDuplex", QVariant(value)); }

inline double GridppReport::DesignRightMargin() const
{
    QVariant qax_result = property("DesignRightMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetDesignRightMargin(double value){ setProperty("DesignRightMargin", QVariant(value)); }

inline double GridppReport::DesignTopMargin() const
{
    QVariant qax_result = property("DesignTopMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetDesignTopMargin(double value){ setProperty("DesignTopMargin", QVariant(value)); }

inline grproLib::IGRDetailGrid* GridppReport::DetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("DetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::tagGRReportDisplayMode GridppReport::DisplayMode() const
{
    QVariant qax_result = property("DisplayMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRReportDisplayMode*)qax_result.constData();
}

inline QString GridppReport::ExportBeginScript() const
{
    QVariant qax_result = property("ExportBeginScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetExportBeginScript(const QString& value){ setProperty("ExportBeginScript", QVariant(value)); }

inline bool GridppReport::FirstPass() const
{
    QVariant qax_result = property("FirstPass");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline grproLib::IGRControls* GridppReport::FloatControls() const
{
    grproLib::IGRControls* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRControls*>("IGRControls*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRControls>("IGRControls", qax_pointer);
    QVariant qax_result = property("FloatControls");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRControls**)qax_result.constData();
}

inline grproLib::IGRFont* GridppReport::Font() const
{
    grproLib::IGRFont* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRFont*>("IGRFont*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRFont>("IGRFont", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRFont**)qax_result.constData();
}

inline grproLib::IGRGraphics* GridppReport::Graphics() const
{
    grproLib::IGRGraphics* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRGraphics*>("IGRGraphics*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRGraphics>("IGRGraphics", qax_pointer);
    QVariant qax_result = property("Graphics");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRGraphics**)qax_result.constData();
}

inline int GridppReport::GridColsPerUnit() const
{
    QVariant qax_result = property("GridColsPerUnit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetGridColsPerUnit(int value){ setProperty("GridColsPerUnit", QVariant(value)); }

inline int GridppReport::GridRowsPerUnit() const
{
    QVariant qax_result = property("GridRowsPerUnit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetGridRowsPerUnit(int value){ setProperty("GridRowsPerUnit", QVariant(value)); }

inline bool GridppReport::HasFloatControl() const
{
    QVariant qax_result = property("HasFloatControl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline grproLib::IGRImageList* GridppReport::ImageList() const
{
    grproLib::IGRImageList* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRImageList*>("IGRImageList*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRImageList>("IGRImageList", qax_pointer);
    QVariant qax_result = property("ImageList");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRImageList**)qax_result.constData();
}

inline QString GridppReport::InitializeScript() const
{
    QVariant qax_result = property("InitializeScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetInitializeScript(const QString& value){ setProperty("InitializeScript", QVariant(value)); }

inline bool GridppReport::IsBlank() const
{
    QVariant qax_result = property("IsBlank");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int GridppReport::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetLanguage(int value){ setProperty("Language", QVariant(value)); }

inline int GridppReport::MaxGenPages() const
{
    QVariant qax_result = property("MaxGenPages");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetMaxGenPages(int value){ setProperty("MaxGenPages", QVariant(value)); }

inline bool GridppReport::MirrorMargins() const
{
    QVariant qax_result = property("MirrorMargins");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetMirrorMargins(bool value){ setProperty("MirrorMargins", QVariant(value)); }

inline bool GridppReport::MonoPrint() const
{
    QVariant qax_result = property("MonoPrint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetMonoPrint(bool value){ setProperty("MonoPrint", QVariant(value)); }

inline double GridppReport::PageBlankHeight() const
{
    QVariant qax_result = property("PageBlankHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int GridppReport::PageDivideCount() const
{
    QVariant qax_result = property("PageDivideCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetPageDivideCount(int value){ setProperty("PageDivideCount", QVariant(value)); }

inline bool GridppReport::PageDivideLine() const
{
    QVariant qax_result = property("PageDivideLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetPageDivideLine(bool value){ setProperty("PageDivideLine", QVariant(value)); }

inline double GridppReport::PageDivideSpacing() const
{
    QVariant qax_result = property("PageDivideSpacing");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetPageDivideSpacing(double value){ setProperty("PageDivideSpacing", QVariant(value)); }

inline QString GridppReport::PageEndScript() const
{
    QVariant qax_result = property("PageEndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetPageEndScript(const QString& value){ setProperty("PageEndScript", QVariant(value)); }

inline grproLib::IGRPageFooter* GridppReport::PageFooter() const
{
    grproLib::IGRPageFooter* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPageFooter*>("IGRPageFooter*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPageFooter>("IGRPageFooter", qax_pointer);
    QVariant qax_result = property("PageFooter");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPageFooter**)qax_result.constData();
}

inline grproLib::IGRPageHeader* GridppReport::PageHeader() const
{
    grproLib::IGRPageHeader* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPageHeader*>("IGRPageHeader*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPageHeader>("IGRPageHeader", qax_pointer);
    QVariant qax_result = property("PageHeader");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPageHeader**)qax_result.constData();
}

inline QString GridppReport::PageStartScript() const
{
    QVariant qax_result = property("PageStartScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetPageStartScript(const QString& value){ setProperty("PageStartScript", QVariant(value)); }

inline grproLib::IGRParameters* GridppReport::Parameters() const
{
    grproLib::IGRParameters* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRParameters*>("IGRParameters*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRParameters>("IGRParameters", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRParameters**)qax_result.constData();
}

inline grproLib::IGridppReport* GridppReport::ParentReport() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("ParentReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}

inline bool GridppReport::PrintAsDesignPaper() const
{
    QVariant qax_result = property("PrintAsDesignPaper");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetPrintAsDesignPaper(bool value){ setProperty("PrintAsDesignPaper", QVariant(value)); }

inline bool GridppReport::PrintToStretch() const
{
    QVariant qax_result = property("PrintToStretch");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetPrintToStretch(bool value){ setProperty("PrintToStretch", QVariant(value)); }

inline grproLib::IGRPrinter* GridppReport::Printer() const
{
    grproLib::IGRPrinter* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPrinter*>("IGRPrinter*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPrinter>("IGRPrinter", qax_pointer);
    QVariant qax_result = property("Printer");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPrinter**)qax_result.constData();
}

inline QString GridppReport::ProcessBeginScript() const
{
    QVariant qax_result = property("ProcessBeginScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetProcessBeginScript(const QString& value){ setProperty("ProcessBeginScript", QVariant(value)); }

inline QString GridppReport::ProcessEndScript() const
{
    QVariant qax_result = property("ProcessEndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetProcessEndScript(const QString& value){ setProperty("ProcessEndScript", QVariant(value)); }

inline QString GridppReport::QuerySQL() const
{
    QVariant qax_result = property("QuerySQL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetQuerySQL(const QString& value){ setProperty("QuerySQL", QVariant(value)); }

inline int GridppReport::ReportFooterCount() const
{
    QVariant qax_result = property("ReportFooterCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int GridppReport::ReportHeaderCount() const
{
    QVariant qax_result = property("ReportHeaderCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool GridppReport::Running() const
{
    QVariant qax_result = property("Running");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline grproLib::IGRDetailGrid* GridppReport::RunningDetailGrid() const
{
    grproLib::IGRDetailGrid* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_pointer);
    QVariant qax_result = property("RunningDetailGrid");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRDetailGrid**)qax_result.constData();
}

inline grproLib::tagGRScriptType GridppReport::ScriptType() const
{
    QVariant qax_result = property("ScriptType");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRScriptType*)qax_result.constData();
}
inline void GridppReport::SetScriptType(grproLib::tagGRScriptType value){ setProperty("ScriptType", QVariant(value)); }

inline grproLib::IGRSections* GridppReport::Sections() const
{
    grproLib::IGRSections* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSections*>("IGRSections*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSections>("IGRSections", qax_pointer);
    QVariant qax_result = property("Sections");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSections**)qax_result.constData();
}

inline grproLib::IGRSharePrintSetupObject* GridppReport::SharePrintSetupObject() const
{
    grproLib::IGRSharePrintSetupObject* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRSharePrintSetupObject*>("IGRSharePrintSetupObject*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRSharePrintSetupObject>("IGRSharePrintSetupObject", qax_pointer);
    QVariant qax_result = property("SharePrintSetupObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRSharePrintSetupObject**)qax_result.constData();
}

inline int GridppReport::SharePrintSetupOptions() const
{
    QVariant qax_result = property("SharePrintSetupOptions");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetSharePrintSetupOptions(int value){ setProperty("SharePrintSetupOptions", QVariant(value)); }

inline bool GridppReport::ShowGrid() const
{
    QVariant qax_result = property("ShowGrid");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetShowGrid(bool value){ setProperty("ShowGrid", QVariant(value)); }

inline int GridppReport::ShowMoneyDigit() const
{
    QVariant qax_result = property("ShowMoneyDigit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GridppReport::SetShowMoneyDigit(int value){ setProperty("ShowMoneyDigit", QVariant(value)); }

inline QColor GridppReport::ShowMoneyLineColor() const
{
    QVariant qax_result = property("ShowMoneyLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GridppReport::SetShowMoneyLineColor(const QColor& value){ setProperty("ShowMoneyLineColor", QVariant(value)); }

inline QColor GridppReport::ShowMoneySepLineColor() const
{
    QVariant qax_result = property("ShowMoneySepLineColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GridppReport::SetShowMoneySepLineColor(const QColor& value){ setProperty("ShowMoneySepLineColor", QVariant(value)); }

inline double GridppReport::ShowMoneyWidth() const
{
    QVariant qax_result = property("ShowMoneyWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void GridppReport::SetShowMoneyWidth(double value){ setProperty("ShowMoneyWidth", QVariant(value)); }

inline QString GridppReport::ShowPreviewWndScript() const
{
    QVariant qax_result = property("ShowPreviewWndScript");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetShowPreviewWndScript(const QString& value){ setProperty("ShowPreviewWndScript", QVariant(value)); }

inline bool GridppReport::ShowProgressUI() const
{
    QVariant qax_result = property("ShowProgressUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetShowProgressUI(bool value){ setProperty("ShowProgressUI", QVariant(value)); }

inline bool GridppReport::SkipQuery() const
{
    QVariant qax_result = property("SkipQuery");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetSkipQuery(bool value){ setProperty("SkipQuery", QVariant(value)); }

inline grproLib::tagGRStorageFormat GridppReport::StorageFormat() const
{
    QVariant qax_result = property("StorageFormat");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRStorageFormat*)qax_result.constData();
}
inline void GridppReport::SetStorageFormat(grproLib::tagGRStorageFormat value){ setProperty("StorageFormat", QVariant(value)); }

inline bool GridppReport::SummaryAccept() const
{
    QVariant qax_result = property("SummaryAccept");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GridppReport::SetSummaryAccept(bool value){ setProperty("SummaryAccept", QVariant(value)); }

inline QString GridppReport::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline grproLib::tagGRTextEncodeMode GridppReport::TextEncode() const
{
    QVariant qax_result = property("TextEncode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRTextEncodeMode*)qax_result.constData();
}
inline void GridppReport::SetTextEncode(grproLib::tagGRTextEncodeMode value){ setProperty("TextEncode", QVariant(value)); }

inline QString GridppReport::Title() const
{
    QVariant qax_result = property("Title");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GridppReport::SetTitle(const QString& value){ setProperty("Title", QVariant(value)); }

inline grproLib::tagGRUnit GridppReport::Unit() const
{
    QVariant qax_result = property("Unit");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRUnit*)qax_result.constData();
}
inline void GridppReport::SetUnit(grproLib::tagGRUnit value){ setProperty("Unit", QVariant(value)); }

inline QString GridppReport::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline stdole::IPicture* GridppReport::Watermark() const
{
#ifdef QAX_DUMPCPP_STDOLE_H
    stdole::IPicture* qax_pointer = 0;
    qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &qax_pointer);
    qRegisterMetaType<stdole::IPicture>("stdole::IPicture", qax_pointer);
    QVariant qax_result = property("Watermark");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(stdole::IPicture**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void GridppReport::SetWatermark(stdole::IPicture* value){
//    int typeId = qRegisterMetaType<stdole::IPicture*>("stdole::IPicture*", &value);
//    setProperty("Watermark", QVariant(typeId, &value));
}

inline grproLib::tagGRPictureAlignment GridppReport::WatermarkAlignment() const
{
    QVariant qax_result = property("WatermarkAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPictureAlignment*)qax_result.constData();
}
inline void GridppReport::SetWatermarkAlignment(grproLib::tagGRPictureAlignment value){ setProperty("WatermarkAlignment", QVariant(value)); }

inline grproLib::tagGRPictureSizeMode GridppReport::WatermarkSizeMode() const
{
    QVariant qax_result = property("WatermarkSizeMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPictureSizeMode*)qax_result.constData();
}
inline void GridppReport::SetWatermarkSizeMode(grproLib::tagGRPictureSizeMode value){ setProperty("WatermarkSizeMode", QVariant(value)); }

inline grproLib::IGRPicture* GridppReport::_GRBackImage() const
{
    grproLib::IGRPicture* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_pointer);
    QVariant qax_result = property("_GRBackImage");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPicture**)qax_result.constData();
}
inline void GridppReport::set_GRBackImage(grproLib::IGRPicture* value){
    int typeId = qRegisterMetaType<grproLib::IGRPicture*>("grproLib::IGRPicture*", &value);
    setProperty("_GRBackImage", QVariant(typeId, &value));
}

inline grproLib::IGRPicture* GridppReport::_GRWatermark() const
{
    grproLib::IGRPicture* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_pointer);
    QVariant qax_result = property("_GRWatermark");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRPicture**)qax_result.constData();
}
inline void GridppReport::set_GRWatermark(grproLib::IGRPicture* value){
    int typeId = qRegisterMetaType<grproLib::IGRPicture*>("grproLib::IGRPicture*", &value);
    setProperty("_GRWatermark", QVariant(typeId, &value));
}

inline int GridppReport::_ResHinst() const
{
    QVariant qax_result = property("_ResHinst");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void GridppReport::AbortPrint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void GridppReport::About()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline grproLib::IGRParameter* GridppReport::AddParameter(const QString& Name, grproLib::tagGRParameterDataType DataType)
{
    grproLib::IGRParameter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRParameter*>("IGRParameter*", &qax_result);
    qRegisterMetaType<grproLib::IGRParameter>("IGRParameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&DataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline void GridppReport::Assign(IDispatch* Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline bool GridppReport::BeginLoopPrint(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&GenerateStyle, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline QString GridppReport::CalcTextOut(double Width, double Height, const QString& Text, grproLib::IGRFont* Font, bool WordWrap)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Width, (void*)&Height, (void*)&Text, (void*)&Font, (void*)&WordWrap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void GridppReport::CancelRecordset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void GridppReport::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline grproLib::IGRColumn* GridppReport::ColumnByName(const QString& Name)
{
    grproLib::IGRColumn* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumn*>("IGRColumn*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumn>("IGRColumn", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline grproLib::IGRControl* GridppReport::ControlByName(const QString& Name)
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline grproLib::IGRObject* GridppReport::CreateBatchReport()
{
    grproLib::IGRObject* qax_result = 0;
    qRegisterMetaType<grproLib::IGRObject*>("IGRObject*", &qax_result);
    qRegisterMetaType<grproLib::IGRObject>("IGRObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void GridppReport::DeleteDetailGrid()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void GridppReport::DeletePageFooter()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void GridppReport::DeletePageHeader()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void GridppReport::DeleteReportFooter(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void GridppReport::DeleteReportHeader(const QVariant& Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void GridppReport::EndLoopPrint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline bool GridppReport::Export(bool DoneOpen)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DoneOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool GridppReport::ExportDirect(grproLib::tagGRExportType ExportType, const QString& FileName, bool ShowOptionDlg, bool DoneOpen)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ExportType, (void*)&FileName, (void*)&ShowOptionDlg, (void*)&DoneOpen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString GridppReport::ExtractXMLFromURL(const QString& URL)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline grproLib::IGRField* GridppReport::FieldByDBName(const QString& Name)
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline grproLib::IGRField* GridppReport::FieldByName(const QString& Name)
{
    grproLib::IGRField* qax_result = 0;
    qRegisterMetaType<grproLib::IGRField*>("IGRField*", &qax_result);
    qRegisterMetaType<grproLib::IGRField>("IGRField", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline grproLib::IGRControl* GridppReport::FindFirstControl()
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline grproLib::IGRControl* GridppReport::FindNextControl()
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void GridppReport::ForceNewPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void GridppReport::GenerateDocumentFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void GridppReport::GetSkin(uint& BackColorRed, uint& BackColorGreen, uint& BackColorBlue, int& Style)
{
    void *_a[] = {0, (void*)&BackColorRed, (void*)&BackColorGreen, (void*)&BackColorBlue, (void*)&Style};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline grproLib::IGRDetailGrid* GridppReport::InsertDetailGrid()
{
    grproLib::IGRDetailGrid* qax_result = 0;
    qRegisterMetaType<grproLib::IGRDetailGrid*>("IGRDetailGrid*", &qax_result);
    qRegisterMetaType<grproLib::IGRDetailGrid>("IGRDetailGrid", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline grproLib::IGRPageFooter* GridppReport::InsertPageFooter()
{
    grproLib::IGRPageFooter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPageFooter*>("IGRPageFooter*", &qax_result);
    qRegisterMetaType<grproLib::IGRPageFooter>("IGRPageFooter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline grproLib::IGRPageHeader* GridppReport::InsertPageHeader()
{
    grproLib::IGRPageHeader* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPageHeader*>("IGRPageHeader*", &qax_result);
    qRegisterMetaType<grproLib::IGRPageHeader>("IGRPageHeader", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline grproLib::IGRReportFooter* GridppReport::InsertReportFooter()
{
    grproLib::IGRReportFooter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportFooter*>("IGRReportFooter*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportFooter>("IGRReportFooter", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline grproLib::IGRReportHeader* GridppReport::InsertReportHeader()
{
    grproLib::IGRReportHeader* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportHeader*>("IGRReportHeader*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportHeader>("IGRReportHeader", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline void GridppReport::LoadBackImageFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void GridppReport::LoadBackImageFromMemory(uint& pBuffer, int BytesCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline bool GridppReport::LoadDataFromURL(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool GridppReport::LoadDataFromXML(const QString& XMLData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool GridppReport::LoadFromFile(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool GridppReport::LoadFromMemory(uint& pData, int ByteCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pData, (void*)&ByteCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool GridppReport::LoadFromStr(const QString& Data)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool GridppReport::LoadFromURL(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool GridppReport::LoadFromVariant(const QVariant& Buf)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Buf};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline void GridppReport::LoadWatermarkFromFile(const QString& PathFile)
{
    void *_a[] = {0, (void*)&PathFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void GridppReport::LoadWatermarkFromMemory(uint& pBuffer, int BytesCount)
{
    void *_a[] = {0, (void*)&pBuffer, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void GridppReport::LoopPrint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline grproLib::IGRParameter* GridppReport::ParameterByName(const QString& Name)
{
    grproLib::IGRParameter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRParameter*>("IGRParameter*", &qax_result);
    qRegisterMetaType<grproLib::IGRParameter>("IGRParameter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline double GridppReport::PixelsToUnit(int Pixels)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Pixels};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline grproLib::IGRExportOption* GridppReport::PrepareExport(grproLib::tagGRExportType ExportType)
{
    grproLib::IGRExportOption* qax_result = 0;
    qRegisterMetaType<grproLib::IGRExportOption*>("IGRExportOption*", &qax_result);
    qRegisterMetaType<grproLib::IGRExportOption>("IGRExportOption", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ExportType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool GridppReport::PrepareRecordset()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline void GridppReport::Print(bool ShowPrintDialog)
{
    void *_a[] = {0, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void GridppReport::PrintEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowPrintDialog)
{
    void *_a[] = {0, (void*)&GenerateStyle, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void GridppReport::PrintPreview(bool ShowModal)
{
    void *_a[] = {0, (void*)&ShowModal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void GridppReport::PrintPreviewEx(grproLib::tagGRPrintGenerateStyle GenerateStyle, bool ShowModal, bool MaximizeWindow)
{
    void *_a[] = {0, (void*)&GenerateStyle, (void*)&ShowModal, (void*)&MaximizeWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline bool GridppReport::Register(const QString& SerialNo)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SerialNo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline grproLib::IGRReportFooter* GridppReport::ReportFooter(const QVariant& Index)
{
    grproLib::IGRReportFooter* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportFooter*>("IGRReportFooter*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportFooter>("IGRReportFooter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline grproLib::IGRReportHeader* GridppReport::ReportHeader(const QVariant& Index)
{
    grproLib::IGRReportHeader* qax_result = 0;
    qRegisterMetaType<grproLib::IGRReportHeader*>("IGRReportHeader*", &qax_result);
    qRegisterMetaType<grproLib::IGRReportHeader>("IGRReportHeader", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline bool GridppReport::SaveToFile(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline bool GridppReport::SaveToMemory(int*& ppData, int& pBytesCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ppData, (void*)&pBytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline QString GridppReport::SaveToStr()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline bool GridppReport::SaveToURL(const QString& URL)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&URL};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline QVariant GridppReport::SaveToVariant()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline void GridppReport::SetSkin(uint BackColorRed, uint BackColorGreen, uint BackColorBlue, int Style)
{
    void *_a[] = {0, (void*)&BackColorRed, (void*)&BackColorGreen, (void*)&BackColorBlue, (void*)&Style};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline void GridppReport::SharePrintSetupDisableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
}

inline void GridppReport::SharePrintSetupEnableAllOptions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline bool GridppReport::SharePrintSetupGetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
    return qax_result;
}

inline void GridppReport::SharePrintSetupSetOptionEnabled(grproLib::tagGRSharePrintSetupOption Option, bool Enabled)
{
    void *_a[] = {0, (void*)&Option, (void*)&Enabled};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
}

inline int GridppReport::SystemVarValue(grproLib::tagGRSystemVar SystemVar)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SystemVar};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline int GridppReport::UnitToPixels(double UnitValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&UnitValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline void GridppReport::UnprepareExport()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
}

inline grproLib::IGRPicture* GridppReport::_CreatePicture()
{
    grproLib::IGRPicture* qax_result = 0;
    qRegisterMetaType<grproLib::IGRPicture*>("IGRPicture*", &qax_result);
    qRegisterMetaType<grproLib::IGRPicture>("IGRPicture", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
    return qax_result;
}

inline grproLib::IGridppReport* GridppReport::_CreateProxyReport()
{
    grproLib::IGridppReport* qax_result = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_result);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
    return qax_result;
}

inline void GridppReport::_DestroyProxyReport()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
}

inline void GridppReport::_ObjLoad()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline void GridppReport::_ObjLoadBegin(uint& pData, uint BytesCount)
{
    void *_a[] = {0, (void*)&pData, (void*)&BytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
}

inline void GridppReport::_ObjLoadEnd()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
}

inline bool GridppReport::_ObjLoadEof()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
    return qax_result;
}

inline void GridppReport::_ObjSave()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
}

inline void GridppReport::_ObjSaveBegin()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
}

inline void GridppReport::_ObjSaveEnd(int*& ppData, uint& pBytesCount)
{
    void *_a[] = {0, (void*)&ppData, (void*)&pBytesCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
}

inline void GridppReport::_RefreshPrinter()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
}

inline int GridppReport::_SystemImage(grproLib::tagGRSystemImage SystemImage)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SystemImage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
    return qax_result;
}


inline bool GRDisplayViewer::AlwaysShowHScrollBar() const
{
    QVariant qax_result = property("AlwaysShowHScrollBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetAlwaysShowHScrollBar(bool value){ setProperty("AlwaysShowHScrollBar", QVariant(value)); }

inline bool GRDisplayViewer::AlwaysShowSelection() const
{
    QVariant qax_result = property("AlwaysShowSelection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetAlwaysShowSelection(bool value){ setProperty("AlwaysShowSelection", QVariant(value)); }

inline bool GRDisplayViewer::AlwaysShowVScrollBar() const
{
    QVariant qax_result = property("AlwaysShowVScrollBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetAlwaysShowVScrollBar(bool value){ setProperty("AlwaysShowVScrollBar", QVariant(value)); }

inline QColor GRDisplayViewer::BackgroundColor() const
{
    QVariant qax_result = property("BackgroundColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GRDisplayViewer::SetBackgroundColor(const QColor& value){ setProperty("BackgroundColor", QVariant(value)); }

inline bool GRDisplayViewer::BatchFinished() const
{
    QVariant qax_result = property("BatchFinished");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetBatchFinished(bool value){ setProperty("BatchFinished", QVariant(value)); }

inline bool GRDisplayViewer::BatchGetRecord() const
{
    QVariant qax_result = property("BatchGetRecord");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetBatchGetRecord(bool value){ setProperty("BatchGetRecord", QVariant(value)); }

inline int GRDisplayViewer::BatchNo() const
{
    QVariant qax_result = property("BatchNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int GRDisplayViewer::BatchStartRecNo() const
{
    QVariant qax_result = property("BatchStartRecNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int GRDisplayViewer::BatchWantRecords() const
{
    QVariant qax_result = property("BatchWantRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetBatchWantRecords(int value){ setProperty("BatchWantRecords", QVariant(value)); }

inline grproLib::tagGRViewerBorderStyle GRDisplayViewer::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRViewerBorderStyle*)qax_result.constData();
}

inline int GRDisplayViewer::BottomGap() const
{
    QVariant qax_result = property("BottomGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetBottomGap(int value){ setProperty("BottomGap", QVariant(value)); }

inline bool GRDisplayViewer::ColumnMove() const
{
    QVariant qax_result = property("ColumnMove");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetColumnMove(bool value){ setProperty("ColumnMove", QVariant(value)); }

inline bool GRDisplayViewer::ColumnResize() const
{
    QVariant qax_result = property("ColumnResize");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetColumnResize(bool value){ setProperty("ColumnResize", QVariant(value)); }

inline int GRDisplayViewer::CurPageNo() const
{
    QVariant qax_result = property("CurPageNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetCurPageNo(int value){ setProperty("CurPageNo", QVariant(value)); }

inline bool GRDisplayViewer::GridCenterView() const
{
    QVariant qax_result = property("GridCenterView");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetGridCenterView(bool value){ setProperty("GridCenterView", QVariant(value)); }

inline bool GRDisplayViewer::GridTitle3D() const
{
    QVariant qax_result = property("GridTitle3D");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetGridTitle3D(bool value){ setProperty("GridTitle3D", QVariant(value)); }

inline int GRDisplayViewer::HScrollPos() const
{
    QVariant qax_result = property("HScrollPos");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetHScrollPos(int value){ setProperty("HScrollPos", QVariant(value)); }

inline int GRDisplayViewer::LeftGap() const
{
    QVariant qax_result = property("LeftGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetLeftGap(int value){ setProperty("LeftGap", QVariant(value)); }

inline int GRDisplayViewer::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline grproLib::IGridppReport* GRDisplayViewer::Report() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}
inline void GRDisplayViewer::SetReport(grproLib::IGridppReport* value){
    int typeId = qRegisterMetaType<grproLib::IGridppReport*>("grproLib::IGridppReport*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline bool GRDisplayViewer::ResizeToFit() const
{
    QVariant qax_result = property("ResizeToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetResizeToFit(bool value){ setProperty("ResizeToFit", QVariant(value)); }

inline bool GRDisplayViewer::ResortCaseSensitive() const
{
    QVariant qax_result = property("ResortCaseSensitive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetResortCaseSensitive(bool value){ setProperty("ResortCaseSensitive", QVariant(value)); }

inline bool GRDisplayViewer::ResortDefaultAsc() const
{
    QVariant qax_result = property("ResortDefaultAsc");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetResortDefaultAsc(bool value){ setProperty("ResortDefaultAsc", QVariant(value)); }

inline bool GRDisplayViewer::Resortable() const
{
    QVariant qax_result = property("Resortable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetResortable(bool value){ setProperty("Resortable", QVariant(value)); }

inline int GRDisplayViewer::RightGap() const
{
    QVariant qax_result = property("RightGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetRightGap(int value){ setProperty("RightGap", QVariant(value)); }

inline int GRDisplayViewer::RowCount() const
{
    QVariant qax_result = property("RowCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool GRDisplayViewer::RowSelection() const
{
    QVariant qax_result = property("RowSelection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetRowSelection(bool value){ setProperty("RowSelection", QVariant(value)); }

inline int GRDisplayViewer::RowsPerPage() const
{
    QVariant qax_result = property("RowsPerPage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetRowsPerPage(int value){ setProperty("RowsPerPage", QVariant(value)); }

inline bool GRDisplayViewer::Running() const
{
    QVariant qax_result = property("Running");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool GRDisplayViewer::Searchable() const
{
    QVariant qax_result = property("Searchable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetSearchable(bool value){ setProperty("Searchable", QVariant(value)); }

inline QString GRDisplayViewer::SelColumnName() const
{
    QVariant qax_result = property("SelColumnName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GRDisplayViewer::SetSelColumnName(const QString& value){ setProperty("SelColumnName", QVariant(value)); }

inline int GRDisplayViewer::SelColumnNo() const
{
    QVariant qax_result = property("SelColumnNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetSelColumnNo(int value){ setProperty("SelColumnNo", QVariant(value)); }

inline int GRDisplayViewer::SelRowNo() const
{
    QVariant qax_result = property("SelRowNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetSelRowNo(int value){ setProperty("SelRowNo", QVariant(value)); }

inline QColor GRDisplayViewer::SelectionBackColor() const
{
    QVariant qax_result = property("SelectionBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GRDisplayViewer::SetSelectionBackColor(const QColor& value){ setProperty("SelectionBackColor", QVariant(value)); }

inline bool GRDisplayViewer::SelectionFollowScroll() const
{
    QVariant qax_result = property("SelectionFollowScroll");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetSelectionFollowScroll(bool value){ setProperty("SelectionFollowScroll", QVariant(value)); }

inline QColor GRDisplayViewer::SelectionForeColor() const
{
    QVariant qax_result = property("SelectionForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void GRDisplayViewer::SetSelectionForeColor(const QColor& value){ setProperty("SelectionForeColor", QVariant(value)); }

inline bool GRDisplayViewer::ShowFooter() const
{
    QVariant qax_result = property("ShowFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetShowFooter(bool value){ setProperty("ShowFooter", QVariant(value)); }

inline bool GRDisplayViewer::ShowHeader() const
{
    QVariant qax_result = property("ShowHeader");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetShowHeader(bool value){ setProperty("ShowHeader", QVariant(value)); }

inline bool GRDisplayViewer::ShowPreviewLine() const
{
    QVariant qax_result = property("ShowPreviewLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetShowPreviewLine(bool value){ setProperty("ShowPreviewLine", QVariant(value)); }

inline bool GRDisplayViewer::ShowToolbar() const
{
    QVariant qax_result = property("ShowToolbar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetShowToolbar(bool value){ setProperty("ShowToolbar", QVariant(value)); }

inline QString GRDisplayViewer::SortColumns() const
{
    QVariant qax_result = property("SortColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void GRDisplayViewer::SetSortColumns(const QString& value){ setProperty("SortColumns", QVariant(value)); }

inline bool GRDisplayViewer::ToPostColumnLayout() const
{
    QVariant qax_result = property("ToPostColumnLayout");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRDisplayViewer::SetToPostColumnLayout(bool value){ setProperty("ToPostColumnLayout", QVariant(value)); }

inline int GRDisplayViewer::TopGap() const
{
    QVariant qax_result = property("TopGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetTopGap(int value){ setProperty("TopGap", QVariant(value)); }

inline int GRDisplayViewer::TotalRecord() const
{
    QVariant qax_result = property("TotalRecord");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetTotalRecord(int value){ setProperty("TotalRecord", QVariant(value)); }

inline int GRDisplayViewer::VScrollPos() const
{
    QVariant qax_result = property("VScrollPos");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRDisplayViewer::SetVScrollPos(int value){ setProperty("VScrollPos", QVariant(value)); }

inline void GRDisplayViewer::AddToolbarControl(grproLib::tagGRToolControlType2 ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void GRDisplayViewer::AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText)
{
    void *_a[] = {0, (void*)&BtnID, (void*)&BtnFileName, (void*)&TooltipText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void GRDisplayViewer::FirstPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline bool GRDisplayViewer::GetColumnVisible(const QString& ColumnName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ColumnName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline grproLib::IGRColumnContentCell* GRDisplayViewer::GetContentCellFromPos(int xPos, int yPos)
{
    grproLib::IGRColumnContentCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnContentCell*>("IGRColumnContentCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnContentCell>("IGRColumnContentCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline grproLib::IGRControl* GRDisplayViewer::GetControlFromPos(int xPos, int yPos)
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline grproLib::IGRSection* GRDisplayViewer::GetSectionFromPos(int xPos, int yPos)
{
    grproLib::IGRSection* qax_result = 0;
    qRegisterMetaType<grproLib::IGRSection*>("IGRSection*", &qax_result);
    qRegisterMetaType<grproLib::IGRSection>("IGRSection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline QString GRDisplayViewer::GetSelRowCellText(int ColumnIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ColumnIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline grproLib::IGRColumnTitleCell* GRDisplayViewer::GetTitleCellFromPos(int xPos, int yPos)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline void GRDisplayViewer::LastPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void GRDisplayViewer::LockUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void GRDisplayViewer::NextPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void GRDisplayViewer::PostColumnLayout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void GRDisplayViewer::PriorPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void GRDisplayViewer::QuickRefresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void GRDisplayViewer::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void GRDisplayViewer::RemoveToolbarControl(grproLib::tagGRToolControlType2 ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void GRDisplayViewer::ResetToolbarContent()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void GRDisplayViewer::ResizeColumnToFit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void GRDisplayViewer::ResizeColumnToFitPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void GRDisplayViewer::ResizeColumnToFitText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline bool GRDisplayViewer::Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text, (void*)&CaseSensitive, (void*)&WholeWord, (void*)&ToUp, (void*)&FromSelection, (void*)&ShowDlg, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline bool GRDisplayViewer::SearchAgain(bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline void GRDisplayViewer::SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle)
{
    void *_a[] = {0, (void*)&BorderStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
}

inline void GRDisplayViewer::SetColumnVisible(const QString& ColumnName, bool Visible)
{
    void *_a[] = {0, (void*)&ColumnName, (void*)&Visible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
}

inline void GRDisplayViewer::ShowColumnVisibleDlg()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
}

inline void GRDisplayViewer::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
}

inline void GRDisplayViewer::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
}

inline void GRDisplayViewer::UnlockUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
}

inline void GRDisplayViewer::UpdateColumnView()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline void GRDisplayViewer::UpdateControl(grproLib::IGRControl* pControl)
{
    void *_a[] = {0, (void*)&pControl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
}

inline void GRDisplayViewer::UpdateLanguage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
}

inline void GRDisplayViewer::UpdateSelCell()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline void GRDisplayViewer::UpdateSelRow()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
}

inline void GRDisplayViewer::UpdateToolbar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
}

inline void GRDisplayViewer::UpdateViewer()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
}


inline bool IGRDisplayViewer::AlwaysShowHScrollBar() const
{
    QVariant qax_result = property("AlwaysShowHScrollBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetAlwaysShowHScrollBar(bool value){ setProperty("AlwaysShowHScrollBar", QVariant(value)); }

inline bool IGRDisplayViewer::AlwaysShowSelection() const
{
    QVariant qax_result = property("AlwaysShowSelection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetAlwaysShowSelection(bool value){ setProperty("AlwaysShowSelection", QVariant(value)); }

inline bool IGRDisplayViewer::AlwaysShowVScrollBar() const
{
    QVariant qax_result = property("AlwaysShowVScrollBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetAlwaysShowVScrollBar(bool value){ setProperty("AlwaysShowVScrollBar", QVariant(value)); }

inline QColor IGRDisplayViewer::BackgroundColor() const
{
    QVariant qax_result = property("BackgroundColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDisplayViewer::SetBackgroundColor(const QColor& value){ setProperty("BackgroundColor", QVariant(value)); }

inline bool IGRDisplayViewer::BatchFinished() const
{
    QVariant qax_result = property("BatchFinished");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetBatchFinished(bool value){ setProperty("BatchFinished", QVariant(value)); }

inline bool IGRDisplayViewer::BatchGetRecord() const
{
    QVariant qax_result = property("BatchGetRecord");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetBatchGetRecord(bool value){ setProperty("BatchGetRecord", QVariant(value)); }

inline int IGRDisplayViewer::BatchNo() const
{
    QVariant qax_result = property("BatchNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRDisplayViewer::BatchStartRecNo() const
{
    QVariant qax_result = property("BatchStartRecNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IGRDisplayViewer::BatchWantRecords() const
{
    QVariant qax_result = property("BatchWantRecords");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetBatchWantRecords(int value){ setProperty("BatchWantRecords", QVariant(value)); }

inline grproLib::tagGRViewerBorderStyle IGRDisplayViewer::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRViewerBorderStyle*)qax_result.constData();
}

inline int IGRDisplayViewer::BottomGap() const
{
    QVariant qax_result = property("BottomGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetBottomGap(int value){ setProperty("BottomGap", QVariant(value)); }

inline bool IGRDisplayViewer::ColumnMove() const
{
    QVariant qax_result = property("ColumnMove");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetColumnMove(bool value){ setProperty("ColumnMove", QVariant(value)); }

inline bool IGRDisplayViewer::ColumnResize() const
{
    QVariant qax_result = property("ColumnResize");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetColumnResize(bool value){ setProperty("ColumnResize", QVariant(value)); }

inline int IGRDisplayViewer::CurPageNo() const
{
    QVariant qax_result = property("CurPageNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetCurPageNo(int value){ setProperty("CurPageNo", QVariant(value)); }

inline bool IGRDisplayViewer::GridCenterView() const
{
    QVariant qax_result = property("GridCenterView");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetGridCenterView(bool value){ setProperty("GridCenterView", QVariant(value)); }

inline bool IGRDisplayViewer::GridTitle3D() const
{
    QVariant qax_result = property("GridTitle3D");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetGridTitle3D(bool value){ setProperty("GridTitle3D", QVariant(value)); }

inline int IGRDisplayViewer::HScrollPos() const
{
    QVariant qax_result = property("HScrollPos");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetHScrollPos(int value){ setProperty("HScrollPos", QVariant(value)); }

inline int IGRDisplayViewer::LeftGap() const
{
    QVariant qax_result = property("LeftGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetLeftGap(int value){ setProperty("LeftGap", QVariant(value)); }

inline int IGRDisplayViewer::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline grproLib::IGridppReport* IGRDisplayViewer::Report() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}
inline void IGRDisplayViewer::SetReport(grproLib::IGridppReport* value){
    int typeId = qRegisterMetaType<grproLib::IGridppReport*>("grproLib::IGridppReport*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline bool IGRDisplayViewer::ResizeToFit() const
{
    QVariant qax_result = property("ResizeToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetResizeToFit(bool value){ setProperty("ResizeToFit", QVariant(value)); }

inline bool IGRDisplayViewer::ResortCaseSensitive() const
{
    QVariant qax_result = property("ResortCaseSensitive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetResortCaseSensitive(bool value){ setProperty("ResortCaseSensitive", QVariant(value)); }

inline bool IGRDisplayViewer::ResortDefaultAsc() const
{
    QVariant qax_result = property("ResortDefaultAsc");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetResortDefaultAsc(bool value){ setProperty("ResortDefaultAsc", QVariant(value)); }

inline bool IGRDisplayViewer::Resortable() const
{
    QVariant qax_result = property("Resortable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetResortable(bool value){ setProperty("Resortable", QVariant(value)); }

inline int IGRDisplayViewer::RightGap() const
{
    QVariant qax_result = property("RightGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetRightGap(int value){ setProperty("RightGap", QVariant(value)); }

inline int IGRDisplayViewer::RowCount() const
{
    QVariant qax_result = property("RowCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IGRDisplayViewer::RowSelection() const
{
    QVariant qax_result = property("RowSelection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetRowSelection(bool value){ setProperty("RowSelection", QVariant(value)); }

inline int IGRDisplayViewer::RowsPerPage() const
{
    QVariant qax_result = property("RowsPerPage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetRowsPerPage(int value){ setProperty("RowsPerPage", QVariant(value)); }

inline bool IGRDisplayViewer::Running() const
{
    QVariant qax_result = property("Running");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IGRDisplayViewer::Searchable() const
{
    QVariant qax_result = property("Searchable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSearchable(bool value){ setProperty("Searchable", QVariant(value)); }

inline QString IGRDisplayViewer::SelColumnName() const
{
    QVariant qax_result = property("SelColumnName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSelColumnName(const QString& value){ setProperty("SelColumnName", QVariant(value)); }

inline int IGRDisplayViewer::SelColumnNo() const
{
    QVariant qax_result = property("SelColumnNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSelColumnNo(int value){ setProperty("SelColumnNo", QVariant(value)); }

inline int IGRDisplayViewer::SelRowNo() const
{
    QVariant qax_result = property("SelRowNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSelRowNo(int value){ setProperty("SelRowNo", QVariant(value)); }

inline QColor IGRDisplayViewer::SelectionBackColor() const
{
    QVariant qax_result = property("SelectionBackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSelectionBackColor(const QColor& value){ setProperty("SelectionBackColor", QVariant(value)); }

inline bool IGRDisplayViewer::SelectionFollowScroll() const
{
    QVariant qax_result = property("SelectionFollowScroll");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSelectionFollowScroll(bool value){ setProperty("SelectionFollowScroll", QVariant(value)); }

inline QColor IGRDisplayViewer::SelectionForeColor() const
{
    QVariant qax_result = property("SelectionForeColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSelectionForeColor(const QColor& value){ setProperty("SelectionForeColor", QVariant(value)); }

inline bool IGRDisplayViewer::ShowFooter() const
{
    QVariant qax_result = property("ShowFooter");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetShowFooter(bool value){ setProperty("ShowFooter", QVariant(value)); }

inline bool IGRDisplayViewer::ShowHeader() const
{
    QVariant qax_result = property("ShowHeader");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetShowHeader(bool value){ setProperty("ShowHeader", QVariant(value)); }

inline bool IGRDisplayViewer::ShowPreviewLine() const
{
    QVariant qax_result = property("ShowPreviewLine");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetShowPreviewLine(bool value){ setProperty("ShowPreviewLine", QVariant(value)); }

inline bool IGRDisplayViewer::ShowToolbar() const
{
    QVariant qax_result = property("ShowToolbar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetShowToolbar(bool value){ setProperty("ShowToolbar", QVariant(value)); }

inline QString IGRDisplayViewer::SortColumns() const
{
    QVariant qax_result = property("SortColumns");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IGRDisplayViewer::SetSortColumns(const QString& value){ setProperty("SortColumns", QVariant(value)); }

inline bool IGRDisplayViewer::ToPostColumnLayout() const
{
    QVariant qax_result = property("ToPostColumnLayout");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IGRDisplayViewer::SetToPostColumnLayout(bool value){ setProperty("ToPostColumnLayout", QVariant(value)); }

inline int IGRDisplayViewer::TopGap() const
{
    QVariant qax_result = property("TopGap");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetTopGap(int value){ setProperty("TopGap", QVariant(value)); }

inline int IGRDisplayViewer::TotalRecord() const
{
    QVariant qax_result = property("TotalRecord");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetTotalRecord(int value){ setProperty("TotalRecord", QVariant(value)); }

inline int IGRDisplayViewer::VScrollPos() const
{
    QVariant qax_result = property("VScrollPos");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IGRDisplayViewer::SetVScrollPos(int value){ setProperty("VScrollPos", QVariant(value)); }

inline void IGRDisplayViewer::AddToolbarControl(grproLib::tagGRToolControlType2 ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IGRDisplayViewer::AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText)
{
    void *_a[] = {0, (void*)&BtnID, (void*)&BtnFileName, (void*)&TooltipText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IGRDisplayViewer::FirstPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline bool IGRDisplayViewer::GetColumnVisible(const QString& ColumnName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ColumnName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline grproLib::IGRColumnContentCell* IGRDisplayViewer::GetContentCellFromPos(int xPos, int yPos)
{
    grproLib::IGRColumnContentCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnContentCell*>("IGRColumnContentCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnContentCell>("IGRColumnContentCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline grproLib::IGRControl* IGRDisplayViewer::GetControlFromPos(int xPos, int yPos)
{
    grproLib::IGRControl* qax_result = 0;
    qRegisterMetaType<grproLib::IGRControl*>("IGRControl*", &qax_result);
    qRegisterMetaType<grproLib::IGRControl>("IGRControl", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline grproLib::IGRSection* IGRDisplayViewer::GetSectionFromPos(int xPos, int yPos)
{
    grproLib::IGRSection* qax_result = 0;
    qRegisterMetaType<grproLib::IGRSection*>("IGRSection*", &qax_result);
    qRegisterMetaType<grproLib::IGRSection>("IGRSection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline QString IGRDisplayViewer::GetSelRowCellText(int ColumnIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ColumnIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline grproLib::IGRColumnTitleCell* IGRDisplayViewer::GetTitleCellFromPos(int xPos, int yPos)
{
    grproLib::IGRColumnTitleCell* qax_result = 0;
    qRegisterMetaType<grproLib::IGRColumnTitleCell*>("IGRColumnTitleCell*", &qax_result);
    qRegisterMetaType<grproLib::IGRColumnTitleCell>("IGRColumnTitleCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xPos, (void*)&yPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IGRDisplayViewer::LastPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IGRDisplayViewer::LockUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IGRDisplayViewer::NextPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IGRDisplayViewer::PostColumnLayout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IGRDisplayViewer::PriorPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IGRDisplayViewer::QuickRefresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void IGRDisplayViewer::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IGRDisplayViewer::RemoveToolbarControl(grproLib::tagGRToolControlType2 ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IGRDisplayViewer::ResetToolbarContent()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IGRDisplayViewer::ResizeColumnToFit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IGRDisplayViewer::ResizeColumnToFitPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IGRDisplayViewer::ResizeColumnToFitText()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline bool IGRDisplayViewer::Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text, (void*)&CaseSensitive, (void*)&WholeWord, (void*)&ToUp, (void*)&FromSelection, (void*)&ShowDlg, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool IGRDisplayViewer::SearchAgain(bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline void IGRDisplayViewer::SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle)
{
    void *_a[] = {0, (void*)&BorderStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void IGRDisplayViewer::SetColumnVisible(const QString& ColumnName, bool Visible)
{
    void *_a[] = {0, (void*)&ColumnName, (void*)&Visible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void IGRDisplayViewer::ShowColumnVisibleDlg()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void IGRDisplayViewer::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void IGRDisplayViewer::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void IGRDisplayViewer::UnlockUpdate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void IGRDisplayViewer::UpdateColumnView()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void IGRDisplayViewer::UpdateControl(grproLib::IGRControl* pControl)
{
    void *_a[] = {0, (void*)&pControl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void IGRDisplayViewer::UpdateLanguage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void IGRDisplayViewer::UpdateSelCell()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void IGRDisplayViewer::UpdateSelRow()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void IGRDisplayViewer::UpdateToolbar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void IGRDisplayViewer::UpdateViewer()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}



inline grproLib::IGRObject* GRPrintViewer::BatchReport() const
{
    grproLib::IGRObject* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGRObject*>("IGRObject*", &qax_pointer);
    qRegisterMetaType<grproLib::IGRObject>("IGRObject", qax_pointer);
    QVariant qax_result = property("BatchReport");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGRObject**)qax_result.constData();
}
inline void GRPrintViewer::SetBatchReport(grproLib::IGRObject* value){
    int typeId = qRegisterMetaType<grproLib::IGRObject*>("grproLib::IGRObject*", &value);
    setProperty("BatchReport", QVariant(typeId, &value));
}

inline grproLib::tagGRViewerBorderStyle GRPrintViewer::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRViewerBorderStyle*)qax_result.constData();
}

inline int GRPrintViewer::ColPages() const
{
    QVariant qax_result = property("ColPages");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRPrintViewer::SetColPages(int value){ setProperty("ColPages", QVariant(value)); }

inline int GRPrintViewer::CurPageNo() const
{
    QVariant qax_result = property("CurPageNo");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRPrintViewer::SetCurPageNo(int value){ setProperty("CurPageNo", QVariant(value)); }

inline grproLib::tagGRPreviewEditMode GRPrintViewer::EditMode() const
{
    QVariant qax_result = property("EditMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPreviewEditMode*)qax_result.constData();
}
inline void GRPrintViewer::SetEditMode(grproLib::tagGRPreviewEditMode value){ setProperty("EditMode", QVariant(value)); }

inline grproLib::tagGRPrintGenerateStyle GRPrintViewer::GenerateStyle() const
{
    QVariant qax_result = property("GenerateStyle");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintGenerateStyle*)qax_result.constData();
}
inline void GRPrintViewer::SetGenerateStyle(grproLib::tagGRPrintGenerateStyle value){ setProperty("GenerateStyle", QVariant(value)); }

inline int GRPrintViewer::PageCount() const
{
    QVariant qax_result = property("PageCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline grproLib::IGridppReport* GRPrintViewer::Report() const
{
    grproLib::IGridppReport* qax_pointer = 0;
    qRegisterMetaType<grproLib::IGridppReport*>("IGridppReport*", &qax_pointer);
    qRegisterMetaType<grproLib::IGridppReport>("IGridppReport", qax_pointer);
    QVariant qax_result = property("Report");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::IGridppReport**)qax_result.constData();
}
inline void GRPrintViewer::SetReport(grproLib::IGridppReport* value){
    int typeId = qRegisterMetaType<grproLib::IGridppReport*>("grproLib::IGridppReport*", &value);
    setProperty("Report", QVariant(typeId, &value));
}

inline int GRPrintViewer::RowPages() const
{
    QVariant qax_result = property("RowPages");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRPrintViewer::SetRowPages(int value){ setProperty("RowPages", QVariant(value)); }

inline bool GRPrintViewer::Running() const
{
    QVariant qax_result = property("Running");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool GRPrintViewer::Searchable() const
{
    QVariant qax_result = property("Searchable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRPrintViewer::SetSearchable(bool value){ setProperty("Searchable", QVariant(value)); }

inline bool GRPrintViewer::ShowBookmark() const
{
    QVariant qax_result = property("ShowBookmark");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRPrintViewer::SetShowBookmark(bool value){ setProperty("ShowBookmark", QVariant(value)); }

inline bool GRPrintViewer::ShowMarginCorner() const
{
    QVariant qax_result = property("ShowMarginCorner");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRPrintViewer::SetShowMarginCorner(bool value){ setProperty("ShowMarginCorner", QVariant(value)); }

inline bool GRPrintViewer::ShowRuler() const
{
    QVariant qax_result = property("ShowRuler");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRPrintViewer::SetShowRuler(bool value){ setProperty("ShowRuler", QVariant(value)); }

inline bool GRPrintViewer::ShowToolbar() const
{
    QVariant qax_result = property("ShowToolbar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void GRPrintViewer::SetShowToolbar(bool value){ setProperty("ShowToolbar", QVariant(value)); }

inline grproLib::tagGRPrintViewMode GRPrintViewer::ViewMode() const
{
    QVariant qax_result = property("ViewMode");
    Q_ASSERT(qax_result.isValid());
    return *(grproLib::tagGRPrintViewMode*)qax_result.constData();
}
inline void GRPrintViewer::SetViewMode(grproLib::tagGRPrintViewMode value){ setProperty("ViewMode", QVariant(value)); }

inline int GRPrintViewer::ZoomPercent() const
{
    QVariant qax_result = property("ZoomPercent");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void GRPrintViewer::SetZoomPercent(int value){ setProperty("ZoomPercent", QVariant(value)); }

inline void GRPrintViewer::AddToolbarControl(grproLib::tagGRToolControlType ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void GRPrintViewer::AddToolbarCustomButton(int BtnID, const QString& BtnFileName, const QString& TooltipText)
{
    void *_a[] = {0, (void*)&BtnID, (void*)&BtnFileName, (void*)&TooltipText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void GRPrintViewer::FirstPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void GRPrintViewer::LastPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void GRPrintViewer::LoadFromDocumentFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void GRPrintViewer::NextPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void GRPrintViewer::Print(bool ShowPrintDialog)
{
    void *_a[] = {0, (void*)&ShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void GRPrintViewer::PriorPage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void GRPrintViewer::QuickRefresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void GRPrintViewer::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void GRPrintViewer::RemoveToolbarControl(grproLib::tagGRToolControlType ControlType)
{
    void *_a[] = {0, (void*)&ControlType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void GRPrintViewer::ResetToolbarContent()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline bool GRPrintViewer::Search(const QString& Text, bool CaseSensitive, bool WholeWord, bool ToUp, bool FromSelection, bool ShowDlg, bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text, (void*)&CaseSensitive, (void*)&WholeWord, (void*)&ToUp, (void*)&FromSelection, (void*)&ShowDlg, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool GRPrintViewer::SearchAgain(bool ShowMsg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ShowMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline void GRPrintViewer::SetBorderStyle(grproLib::tagGRViewerBorderStyle BorderStyle)
{
    void *_a[] = {0, (void*)&BorderStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void GRPrintViewer::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void GRPrintViewer::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void GRPrintViewer::UpdateLanguage()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void GRPrintViewer::UpdateToolbar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void GRPrintViewer::ZoomIn()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void GRPrintViewer::ZoomOut()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void GRPrintViewer::ZoomToFit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void GRPrintViewer::ZoomToHeight()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void GRPrintViewer::ZoomToWidth()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}




#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<grproLib::IGRGroup, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRGroup*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRGroup();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRGroup*>(t)->grproLib::IGRGroup::~IGRGroup();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRGroup;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRGroup*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRGroup*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRObject*>(t)->grproLib::IGRObject::~IGRObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRGroupHeader, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRGroupHeader*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRGroupHeader();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRGroupHeader*>(t)->grproLib::IGRGroupHeader::~IGRGroupHeader();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRGroupHeader;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRGroupHeader*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRGroupHeader*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRGroupSection, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRGroupSection*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRGroupSection();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRGroupSection*>(t)->grproLib::IGRGroupSection::~IGRGroupSection();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRGroupSection;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRGroupSection*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRGroupSection*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRSection, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRSection*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRSection();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRSection*>(t)->grproLib::IGRSection::~IGRSection();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRSection;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRSection*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRSection*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRFont, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRFont*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRFont();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRFont*>(t)->grproLib::IGRFont::~IGRFont();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRFont;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRFont*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRFont*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRControls, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRControls*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRControls();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRControls*>(t)->grproLib::IGRControls::~IGRControls();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRControls;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRControls*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRControls*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRControl, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRControl*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRControl();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRControl*>(t)->grproLib::IGRControl::~IGRControl();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRControl;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRControl*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRControl*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRTextBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRTextBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRTextBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRTextBox*>(t)->grproLib::IGRTextBox::~IGRTextBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRTextBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRTextBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRTextBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRChart, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRChart*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRChart();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRChart*>(t)->grproLib::IGRChart::~IGRChart();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRChart;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRChart*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRChart*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRStaticBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRStaticBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRStaticBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRStaticBox*>(t)->grproLib::IGRStaticBox::~IGRStaticBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRStaticBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRStaticBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRStaticBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRShapeBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRShapeBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRShapeBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRShapeBox*>(t)->grproLib::IGRShapeBox::~IGRShapeBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRShapeBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRShapeBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRShapeBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRSystemVarBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRSystemVarBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRSystemVarBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRSystemVarBox*>(t)->grproLib::IGRSystemVarBox::~IGRSystemVarBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRSystemVarBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRSystemVarBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRSystemVarBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRFieldBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRFieldBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRFieldBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRFieldBox*>(t)->grproLib::IGRFieldBox::~IGRFieldBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRFieldBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRFieldBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRFieldBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRSummaryBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRSummaryBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRSummaryBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRSummaryBox*>(t)->grproLib::IGRSummaryBox::~IGRSummaryBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRSummaryBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRSummaryBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRSummaryBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRPictureBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRPictureBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRPictureBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRPictureBox*>(t)->grproLib::IGRPictureBox::~IGRPictureBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRPictureBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRPictureBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRPictureBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRPicture, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRPicture*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRPicture();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRPicture*>(t)->grproLib::IGRPicture::~IGRPicture();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRPicture;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRPicture*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRPicture*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRRichTextBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRRichTextBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRRichTextBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRRichTextBox*>(t)->grproLib::IGRRichTextBox::~IGRRichTextBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRRichTextBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRRichTextBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRRichTextBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRMemoBox, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRMemoBox*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRMemoBox();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRMemoBox*>(t)->grproLib::IGRMemoBox::~IGRMemoBox();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRMemoBox;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRMemoBox*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRMemoBox*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRSubReport, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRSubReport*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRSubReport();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRSubReport*>(t)->grproLib::IGRSubReport::~IGRSubReport();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRSubReport;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRSubReport*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRSubReport*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGridppReport, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGridppReport*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGridppReport();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGridppReport*>(t)->grproLib::IGridppReport::~IGridppReport();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGridppReport;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGridppReport*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGridppReport*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRDetailGrid, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRDetailGrid*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRDetailGrid();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRDetailGrid*>(t)->grproLib::IGRDetailGrid::~IGRDetailGrid();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRDetailGrid;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRDetailGrid*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRDetailGrid*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnContent, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnContent*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnContent();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnContent*>(t)->grproLib::IGRColumnContent::~IGRColumnContent();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnContent;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnContent*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnContent*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnSection, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnSection*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnSection();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnSection*>(t)->grproLib::IGRColumnSection::~IGRColumnSection();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnSection;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnSection*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnSection*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnContentCells, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnContentCells*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnContentCells();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnContentCells*>(t)->grproLib::IGRColumnContentCells::~IGRColumnContentCells();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnContentCells;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnContentCells*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnContentCells*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnContentCell, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnContentCell*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnContentCell();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnContentCell*>(t)->grproLib::IGRColumnContentCell::~IGRColumnContentCell();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnContentCell;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnContentCell*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnContentCell*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnCell, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnCell*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnCell();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnCell*>(t)->grproLib::IGRColumnCell::~IGRColumnCell();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnCell;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnCell*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnCell*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumn, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumn*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumn();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumn*>(t)->grproLib::IGRColumn::~IGRColumn();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumn;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumn*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumn*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnTitleCell, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnTitleCell*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnTitleCell();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnTitleCell*>(t)->grproLib::IGRColumnTitleCell::~IGRColumnTitleCell();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnTitleCell;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnTitleCell*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnTitleCell*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnTitle, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnTitle*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnTitle();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnTitle*>(t)->grproLib::IGRColumnTitle::~IGRColumnTitle();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnTitle;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnTitle*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnTitle*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumnTitleCells, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumnTitleCells*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumnTitleCells();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumnTitleCells*>(t)->grproLib::IGRColumnTitleCells::~IGRColumnTitleCells();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumnTitleCells;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumnTitleCells*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumnTitleCells*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRColumns, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRColumns*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRColumns();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRColumns*>(t)->grproLib::IGRColumns::~IGRColumns();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRColumns;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRColumns*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRColumns*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRGroups, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRGroups*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRGroups();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRGroups*>(t)->grproLib::IGRGroups::~IGRGroups();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRGroups;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRGroups*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRGroups*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRRecordset, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRRecordset*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRRecordset();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRRecordset*>(t)->grproLib::IGRRecordset::~IGRRecordset();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRRecordset;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRRecordset*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRRecordset*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRFields, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRFields*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRFields();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRFields*>(t)->grproLib::IGRFields::~IGRFields();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRFields;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRFields*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRFields*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRField, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRField*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRField();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRField*>(t)->grproLib::IGRField::~IGRField();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRField;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRField*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRField*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRCrossTab, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRCrossTab*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRCrossTab();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRCrossTab*>(t)->grproLib::IGRCrossTab::~IGRCrossTab();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRCrossTab;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRCrossTab*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRCrossTab*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRPageHeader, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRPageHeader*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRPageHeader();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRPageHeader*>(t)->grproLib::IGRPageHeader::~IGRPageHeader();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRPageHeader;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRPageHeader*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRPageHeader*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRPageFooter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRPageFooter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRPageFooter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRPageFooter*>(t)->grproLib::IGRPageFooter::~IGRPageFooter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRPageFooter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRPageFooter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRPageFooter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRReportHeader, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRReportHeader*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRReportHeader();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRReportHeader*>(t)->grproLib::IGRReportHeader::~IGRReportHeader();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRReportHeader;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRReportHeader*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRReportHeader*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRReportFooter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRReportFooter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRReportFooter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRReportFooter*>(t)->grproLib::IGRReportFooter::~IGRReportFooter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRReportFooter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRReportFooter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRReportFooter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRParameters, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRParameters*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRParameters();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRParameters*>(t)->grproLib::IGRParameters::~IGRParameters();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRParameters;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRParameters*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRParameters*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRParameter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRParameter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRParameter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRParameter*>(t)->grproLib::IGRParameter::~IGRParameter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRParameter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRParameter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRParameter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRSections, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRSections*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRSections();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRSections*>(t)->grproLib::IGRSections::~IGRSections();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRSections;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRSections*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRSections*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRPrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRPrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRPrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRPrinter*>(t)->grproLib::IGRPrinter::~IGRPrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRPrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRPrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRPrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRImageList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRImageList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRImageList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRImageList*>(t)->grproLib::IGRImageList::~IGRImageList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRImageList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRImageList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRImageList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRGraphics, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRGraphics*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRGraphics();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRGraphics*>(t)->grproLib::IGRGraphics::~IGRGraphics();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRGraphics;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRGraphics*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRGraphics*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRExportOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRExportOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRExportOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRExportOption*>(t)->grproLib::IGRExportOption::~IGRExportOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRExportOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRExportOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRExportOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2XLSOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2XLSOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2XLSOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2XLSOption*>(t)->grproLib::IGRE2XLSOption::~IGRE2XLSOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2XLSOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2XLSOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2XLSOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2CellOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2CellOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2CellOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2CellOption*>(t)->grproLib::IGRE2CellOption::~IGRE2CellOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2CellOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2CellOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2CellOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2TXTOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2TXTOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2TXTOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2TXTOption*>(t)->grproLib::IGRE2TXTOption::~IGRE2TXTOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2TXTOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2TXTOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2TXTOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2HTMOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2HTMOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2HTMOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2HTMOption*>(t)->grproLib::IGRE2HTMOption::~IGRE2HTMOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2HTMOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2HTMOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2HTMOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2RTFOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2RTFOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2RTFOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2RTFOption*>(t)->grproLib::IGRE2RTFOption::~IGRE2RTFOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2RTFOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2RTFOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2RTFOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2PDFOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2PDFOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2PDFOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2PDFOption*>(t)->grproLib::IGRE2PDFOption::~IGRE2PDFOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2PDFOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2PDFOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2PDFOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2CSVOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2CSVOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2CSVOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2CSVOption*>(t)->grproLib::IGRE2CSVOption::~IGRE2CSVOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2CSVOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2CSVOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2CSVOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRE2IMGOption, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRE2IMGOption*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRE2IMGOption();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRE2IMGOption*>(t)->grproLib::IGRE2IMGOption::~IGRE2IMGOption();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRE2IMGOption;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRE2IMGOption*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRE2IMGOption*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRSharePrintSetupObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRSharePrintSetupObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRSharePrintSetupObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRSharePrintSetupObject*>(t)->grproLib::IGRSharePrintSetupObject::~IGRSharePrintSetupObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRSharePrintSetupObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRSharePrintSetupObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRSharePrintSetupObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRLine, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRLine*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRLine();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRLine*>(t)->grproLib::IGRLine::~IGRLine();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRLine;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRLine*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRLine*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRBarcode, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRBarcode*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRBarcode();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRBarcode*>(t)->grproLib::IGRBarcode::~IGRBarcode();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRBarcode;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRBarcode*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRBarcode*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRGroupFooter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRGroupFooter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRGroupFooter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRGroupFooter*>(t)->grproLib::IGRGroupFooter::~IGRGroupFooter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRGroupFooter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRGroupFooter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRGroupFooter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRPrintViewer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRPrintViewer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRPrintViewer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRPrintViewer*>(t)->grproLib::IGRPrintViewer::~IGRPrintViewer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRPrintViewer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRPrintViewer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRPrintViewer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::GridppReport, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::GridppReport*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::GridppReport();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::GridppReport*>(t)->grproLib::GridppReport::~GridppReport();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::GridppReport;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::GridppReport*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::GridppReport*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::GRDisplayViewer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::GRDisplayViewer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::GRDisplayViewer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::GRDisplayViewer*>(t)->grproLib::GRDisplayViewer::~GRDisplayViewer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::GRDisplayViewer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::GRDisplayViewer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::GRDisplayViewer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::IGRDisplayViewer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::IGRDisplayViewer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::IGRDisplayViewer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::IGRDisplayViewer*>(t)->grproLib::IGRDisplayViewer::~IGRDisplayViewer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::IGRDisplayViewer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::IGRDisplayViewer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::IGRDisplayViewer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::GRDisplayViewerProps, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::GRDisplayViewerProps*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::GRDisplayViewerProps();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::GRDisplayViewerProps*>(t)->grproLib::GRDisplayViewerProps::~GRDisplayViewerProps();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::GRDisplayViewerProps;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::GRDisplayViewerProps*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::GRDisplayViewerProps*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::GRPrintViewer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::GRPrintViewer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::GRPrintViewer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::GRPrintViewer*>(t)->grproLib::GRPrintViewer::~GRPrintViewer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::GRPrintViewer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::GRPrintViewer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::GRPrintViewer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<grproLib::GRPrintViewerProps, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<grproLib::GRPrintViewerProps*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new grproLib::GRPrintViewerProps();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<grproLib::GRPrintViewerProps*>(t)->grproLib::GRPrintViewerProps::~GRPrintViewerProps();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) grproLib::GRPrintViewerProps;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const grproLib::GRPrintViewerProps*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<grproLib::GRPrintViewerProps*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

